/**************************************************************************
This file is part of Damaris.

Damaris is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Damaris is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Damaris.  If not, see <http://www.gnu.org/licenses/>.
***************************************************************************/
#ifndef __DAMARIS__H
#define __DAMARIS__H

#include <stdlib.h>
#include <mpi.h>

#cmakedefine HAVE_VISIT_ENABLED
#cmakedefine HAVE_HDF5_ENABLED

#ifdef __cplusplus
extern "C" {
#endif

/**
 * List of error codes that Damaris can return.
 *  - DAMARIS_OK everything is fine.
 *  - DAMARIS_INIT_ERROR error during initialization.
 *  - DAMARIS_FINALIZE_ERROR error during finalization.
 *  - DAMARIS_CORE_IS_SERVER illegal operation on this core (client operations).
 *  - DAMARIS_NO_SERVER illegal operation in standalone mode.
 *  - DAMARIS_ALLOCATION_ERROR allocation error.
 *  - DAMARIS_CONFIG_ERROR configuration error.
 *  - DAMARIS_ARGUMENT_ERROR invalid argument.
 *  - DAMARIS_MPI_ERROR error during an MPI call.
 *  - DAMARIS_DATASPACE_ERROR invalid DataSpace.
 *  - DAMARIS_CHANNEL_ERROR error during the use of a Channel objet.
 *  - DAMARIS_INVALID_TAG invalid tag in the Reactor system.
 *  - DAMARIS_NOT_INITIALIZED illegal call before initialization of Damaris.
 *  - DAMARIS_ALREADY_INITIALIZED illgal call after initialization of Damaris.
 *  - DAMARIS_UNDEFINED_ACTION undefined action.
 *  - DAMARIS_UNDEFINED_PARAMETER undefined parameter.
 *  - DAMARIS_UNDEFINED_VARIABLE undefined variable.
 *  - DAMARIS_INVALID_BLOCK invalid block id.
 *  - DAMARIS_INVALID_DIMENSIONS invalid dimensions.
 *  - DAMARIS_BLOCK_NOT_FOUND block not found.
 *  - DAMARIS_REACTOR_NOT_FOUND reactor not initialized.
 *  - DAMARIS_BIND_ERROR error when trying a function as a signal.
 *  - DAMARIS_ERROR_UNKNOWN unknown error.
 */
enum {
	DAMARIS_OK = 0,
	DAMARIS_INIT_ERROR,
	DAMARIS_FINALIZE_ERROR,
	DAMARIS_CORE_IS_SERVER,
	DAMARIS_NO_SERVER,
	DAMARIS_ALLOCATION_ERROR,
	DAMARIS_CONFIG_ERROR,
	DAMARIS_ARGUMENT_ERROR,
	DAMARIS_MPI_ERROR,
	DAMARIS_DATASPACE_ERROR,
	DAMARIS_CHANNEL_ERROR,
	DAMARIS_INVALID_TAG,
	DAMARIS_NOT_INITIALIZED,
	DAMARIS_ALREADY_INITIALIZED,
	DAMARIS_UNDEFINED_ACTION,
	DAMARIS_UNDEFINED_PARAMETER,
	DAMARIS_UNDEFINED_VARIABLE,
	DAMARIS_INVALID_BLOCK,
	DAMARIS_INVALID_DIMENSIONS,
	DAMARIS_BLOCK_NOT_FOUND,
	DAMARIS_REACTOR_NOT_FOUND,
	DAMARIS_BIND_ERROR,
	DAMARIS_ERROR_UNKNOWN
};

/**
 * Function used for signals.
 */
typedef void (*signal_t)(const char*,int32_t,int32_t,const char*);

/**
 * Initializes Damaris, should be called after MPI_Init.
 * 
 * \param[in] configfile : name of the XML configuration file.
 * \param[in] comm : MPI communicator gathering all the nodes.
 */
int damaris_initialize(const char* configfile, MPI_Comm comm);

/**
 * Finalize Damaris. Should be called before MPI_Finalize. If Damaris was 
 * started (damaris_start), it should be stopped before this call.
 */
int damaris_finalize();

/**
 * Starts the server. Sets is_client to 1 if this core is a client.
 * Otherwise, this function starts the server and blocks until clients call 
 * damaris_stop, and is_client is set to 0.
 *
 * \param[out] is_client : indicates if this core is a client.
 */
int damaris_start(int* is_client);

/**
 * Stops the server. This function should only be called by client processes
 * and these processes must have called damaris_start to start the servers
 * before. When all client processes have called damaris_stop, server processes
 * blocked on damaris_start will return (with is_client set to 0).
 */
int damaris_stop();

/** 
 * Writes a variable (similar to damaris_write_block(varnale,0,data)).
 *
 * \param[in] varname : name of the variable to write.
 * \param[in] data : pointer to the data to write.
 *
 * \return DAMARIS_OK on success, other error codes on failures.
 */
int damaris_write(const char* varname, const void* data);

/**
 * Writes a block of a variable. The variable name should be the full name
 * of a variable defined in the configuration file. The block id should be
 * between 0 and the number of domains per client - 1, as defined in the
 * configuration file.
 *
 * \param[in] varname : name of the variable to write.
 * \param[in] block : id of the block to write.
 * \param[in] data : pointer to the data to write.
 *
 * \return DAMARIS_OK on success, other error codes on failures.
 */
int damaris_write_block(const char* varname, int32_t block, const void* data);

/**
 * Allocates the data required for a variable to be entirely written in memory.
 * Similar to damaris_alloc_block(varname,0,ptr).
 *
 * \param[in] varname : name of the variable to write.
 * \param[out] ptr : pointer to a pointer to the allocated memory.
 * 
 * \return DAMARIS_OK on success, other error codes on failure.
 */
int damaris_alloc(const char* varname, void** ptr);

/**
 * Allocates the data required for a block of a variable to be written 
 * in memory.
 *
 * \param[in] varname : name of the variable to write.
 * \param[in] block : block id for which to allocate memory.
 * \param[out] ptr : pointer to a pointer to the allocated memory.
 */
int damaris_alloc_block(const char* varname, int32_t block, void** ptr);

/**
 * Commits data associated to the variable on current iteration. This function
 * is equivalent to calling damaris_commit_block(varname,0).
 *
 * \param[in] varname : name of the variable to commit.
 */
int damaris_commit(const char* varname);

/**
 * Commits a specific block of variable from the current iteration. The variable
 * should be defined in the configuration file and the block id should be
 * within the range defined by the number of domains per client.
 *
 * \param[in] varname : name of the variable to commit.
 * \param[in] block : block id.
 */
int damaris_commit_block(const char* varname, int32_t block);

/**
 * Commits variable from the given iteration. This call is equivalent to
 * damaris_commit_block_iteration(varname,0,iteration).
 *
 * \param[in] varname : name of the variable to commit.
 * \param[in] iteration : iteration to commit.
 */
int damaris_commit_iteration(const char* varname, int32_t iteration);

/**
 * Commits a specific block of variable from the given iteration. The variable
 * should be defined in the configuration file and the block id should be
 * within the range defined by the number of domains per client.
 *
 * \param[in] varname : name of the variable to commit.
 * \param[in] block : block id.
 * \param[in] iteration : iteration to commit.
 */
int damaris_commit_block_iteration(const char* varname, 
	int32_t block, int32_t iteration);

/**
 * Clears the specified variable. This call is equivalent to 
 * damaris_clear_block(varname,0). Will transfer the responsibility of the data
 * to the dedicated cores.
 *
 * \param[in] varname : name of the variable to clear.
 */
int damaris_clear(const char* varname);

/**
 * Clears the block for the specified variable.
 *
 * \param[in] varname : name of the variable to clear.
 * \param[in] block : block id.
 */
int damaris_clear_block(const char* varname, int32_t block);

/**
 * Clears the specified variable at a specified iteration.
 *
 * \param[in] varname : name of the variable to clear.
 * \param[in] iteration : iteration to clear.
 */
int damaris_clear_iteration(const char* varname, int32_t iteration);

/**
 * Clears the block for the specified variable at a specified iteration.
 *
 * \param[in] varname : name of the variable to clear.
 * \param[in] iteration : iteration number.
 * \param[in] block : block id.
 */
int damaris_clear_block_iteration(const char* varname, 
	int32_t block, int32_t iteration);

/**
 * Sends a signal to the closest dedicated core.
 *
 * \param[in] signal_name : name of the signal to send, must correspond to an
 * event or a script in the configuration file.
 */
int damaris_signal(const char* signal_name);

/**
 * Associates a signal name to a function from the executable.
 *
 * \param[in] signal_name : name of the signal.
 * \param[in] sig : function to bind.
 */
int damaris_bind(const char* signal_name, signal_t sig);

/**
 * Get the current value of a parameter.
 *
 * \param[in] param_name : name of the parameter to read.
 * \param[out] buffer : buffer in which to put the value.
 * \param[in] size : maximum size (in bytes) in the buffer.
 */
int damaris_parameter_get(const char* param_name, 
	void* buffer, unsigned int size);

/**
 * Set the value of a parameter.
 *
 * \param[in] param_name : name of the parameter.
 * \param[in] buffer : buffer from which to take the value.
 * \param[in] size : size of the buffer.
 */
int damaris_parameter_set(const char* param_name, 
	const void* buffer, unsigned int size);

/**
 * Changes the position of the variable. Equivalent to a call to
 * damaris_set_block_position(var_name,0,position).
 * 
 * \param[in] var_name : name of the variable to move.
 * \param[in] position : array of new coordinates.
 */
int damaris_set_position(const char* var_name, const int64_t* position);

/**
 * Changes the position of a block of the variable.
 * 
 * \param[in] var_name : name of the variable to move.
 * \param[in] block : block id.
 * \param[in] position : array of new coordinates.
 */
int damaris_set_block_position(const char* var_name, 
	int32_t block, const int64_t* position);

/**
 * Gets the communicator that the clients must use.
 *
 * \param[out] comm : communicator gathering clients.
 */
int damaris_client_comm_get(MPI_Comm* comm);

/**
 * Ends the current iteration.
 */
int damaris_end_iteration();

/**
 * Gets the current iteration number.
 *
 * \param[out] iteration : current iteration number.
 */
int damaris_get_iteration(int* iteration);

#ifdef __cplusplus
}
#endif

#endif
