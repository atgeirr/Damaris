Bootstrap: docker
From: ubuntu:20.04
Stage: build

%help
    This container was built from the following repositpory of Singularity definition files:
        git clone https://gitlab.inria.fr/Damaris/damaris/~/build/singularity
        
    This version builds damaris with the following dependencies:
    
    |     | xerces-c | xsd   |  HDF5  | mpi           | Paraview |
    |-----|----------|-------|--------|---------------|----------|
    | src |    3.2.2 | 4.0.0 | 1.12.1 |               |   5.8.0  |
    | bin |          |       |        | OpenMPI 4.0.3 |          |
    
    
    To build a container from a definition file:
        # set the build variables in opm_stack_build_vars.sh to suite
        cp across_wp7_opmflow_scripts/singularity/ubuntu/ubuntu20_paraview58.def .
        sudo singularity build --sandbox ubuntu20_paraview58 ubuntu20_paraview58.def
        
    To build from local Dockerfile built image:
    
    1/ Build the docker image first:
        TAG=registry.gitlab.inria.fr/damaris/damaris:ubu20-paraview58
        DOCKER_BUILDKIT=1 sudo docker build -t ${TAG} \
        --build-arg INPUT_damaris_ver=v1.5.0 \
        --build-arg INPUT_repo=damaris \
         -f ./Dockerfile.ubuntu20.paraview .  
         
    2/ Now build the Singularity image from the Docker image:   
        sudo singularity build --sandbox ubuntu20_paraview58 docker-daemon://${TAG} 
        
    To get a shell into the container:
        sudo singularity shell --writable ubuntu20_paraview58
    N.B. If expected data is invisible, use the -c (containerise) flag:
        sudo singularity shell -c ubuntu20_paraview58
    
    To run a MPI example from the Damaris installation
        mpirun -np 4 singularity exec ubuntu20_paraview58  /usr/local/damaris/examples/storage/3dmesh /usr/local/damaris/examples/storage/3dmesh.xml -v -r
    And a Paraview example:    
        mpirun -np 4 singularity exec ubuntu20_paraview58  /usr/local/damaris/examples/paraview/image /usr/local/damaris/examples/paraview/image.xml
        
    N.B. The install directory for all code built from source is: /home/docker/local
        
    To locate the source repositories for Damaris and OPM software:
        cd /home/docker/local
        

%setup

%files


%environment


%post
   
   
INSTALLTMDIR=/installdir
CMAKE_BUILD_TYPE=Release
NUMCORES=4
INSTALL_PREFIX=/usr/local
export PATH=${INSTALL_PREFIX}/bin:${PATH}
export LD_LIBRARY_PATH=${INSTALL_PREFIX}/lib:${INSTALL_PREFIX}/damaris/lib:${LD_LIBRARY_PATH}

PV_VERSION=5.8.0
# ENV PYTHON_INCLUDE_DIR=/usr/include/python3.8
GL_INSTALL_PATH=/usr/lib/x86_64-linux-gnu
GL_HEADER_PATH=/usr

# These should also be supplied on the command line as --build-arg 
# ENV ENABLE_PYTHON=
# Regenerate the xml model in C using XSD
REGEN_ON_OFF=ON
SHLIBS_ON_OFF=OFF
# Build examples
EXAMPLES_ON_OFF=ON

# N.B INPUT_damaris_ver to be provided on the docker build -t registry.gitlab.inria.fr/damaris-development:${TAG}  --build-arg INPUT_damaris_ver=v1.5.0 --build-arg INPUT_repo="damaris-development" -f Dockerfile.ubuntu20 .
INPUT_damaris_ver=v1.5.0
INPUT_repo=damaris
# ARG INPUT_repo  # making this a global arge and defining before stage 1
DAMARIS_VERSION=$INPUT_damaris_ver
repo=$INPUT_repo

echo "debconf debconf/frontend select Noninteractive" | debconf-set-selections

apt-get update -y \
  && apt-get -y  --no-install-recommends  install  \
	software-properties-common \
    apt-utils \
    build-essential \
    gfortran \
    pkg-config \
    git-core \
    cmake \
    wget unzip nano \
	libhdf5-openmpi-dev \
    libboost-all-dev \
	libpython3-dev  \
	libxerces-c-dev  \
	xsdcxx \
    libcppunit-dev \
	hdf5-tools \
    cmake \
  && apt-get clean \
  && ln -s /usr/bin/xsdcxx /usr/bin/xsd 
  

apt-get -y  --no-install-recommends install  \
    libosmesa6-dev \
    mesa-common-dev \
    mesa-utils \
    freeglut3-dev \
    python3-dev \
    python3-numpy \
    ninja-build \
    libtbb-dev \
  && apt-get clean 
   
#     libgl1-mesa-dev \
#    libglu1-mesa-dev \



###### Install ParaView - 
# N.B. The version installed here must match exactly the version of Paraview used to connect to the simulation via Catalyst
# -DPARAVIEW_BUILD_EDITION=CATALYST_RENDERING includes more (for rendering screen shots), but may not be needed
# see https://www.kitware.com/paraview-catalyst-editions-what-are-they/ for some more details
mkdir -p ${INSTALLTMDIR} \
  &&   cd ${INSTALLTMDIR} \
  &&   git clone --depth 1 --branch v${PV_VERSION} https://gitlab.kitware.com/paraview/paraview.git \
  &&   cd paraview \
  &&   git submodule update --init --recursive \
  &&   mkdir -p ${INSTALLTMDIR}/build/pv \
  &&   cd ${INSTALLTMDIR}/build/pv   \
  &&   cmake -GNinja ../../paraview -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} \
       -DBUILD_TESTING=OFF \
       -DVTK_SMP_IMPLEMENTATION_TYPE=TBB \
       -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
       -DPARAVIEW_BUILD_EDITION=CATALYST_RENDERING \
       -DPARAVIEW_INSTALL_DEVELOPMENT_FILES=ON \
       -DPARAVIEW_USE_PYTHON=ON \
       -DPARAVIEW_BUILD_SHARED_LIBS=OFF \
       -DPARAVIEW_USE_MPI=ON \
       -DPARAVIEW_USE_QT=OFF \
       -DVTK_USE_X=OFF \
       -DVTK_OPENGL_HAS_OSMESA=ON \
       -DPARAVIEW_USE_FORTRAN=OFF \
       -DOSMESA_INCLUDE_DIR=$GL_HEADER_PATH/include \
       -DOSMESA_LIBRARY=$GL_INSTALL_PATH/libOSMesa.so \
  && ninja -j${NUMCORES} \
  && ninja install 
    


# may need this:  -DParaView_DIR=$CATALYSTDIR
# The first line deals with different access rights to damaris-development (private) and damaris (public) repository
cd ${INSTALLTMDIR} \
  && echo "Damaris Version: $DAMARIS_VERSION" \
  && git clone  --depth 1 --branch $DAMARIS_VERSION https://${GITLABUSERNAME}gitlab.inria.fr/Damaris/$repo.git \
  && mkdir -p ${INSTALLTMDIR}/build/$repo \
  && cd ${INSTALLTMDIR}/build/$repo \
  && cmake ../../$repo -DCMAKE_INSTALL_PREFIX:PATH=$INSTALL_PREFIX/damaris \
      -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
      -DCMAKE_CXX_COMPILER=mpicxx \
      -DCMAKE_C_COMPILER=mpicc \
      -DENABLE_TESTS=ON \
      -DENABLE_EXAMPLES=$EXAMPLES_ON_OFF \
      -DBUILD_SHARED_LIBS=$SHLIBS_ON_OFF \
      -DENABLE_PYTHON=OFF \
      -DGENERATE_MODEL=$REGEN_ON_OFF \
      -DENABLE_HDF5=ON -DHDF5_ROOT=/usr/lib/x86_64-linux-gnu/hdf5/openmpi \
      -DENABLE_CATALYST=ON -DParaView_DIR=${INSTALL_PREFIX}/lib/paraview-5.8 \
  && make -j${NUMCORES} \
  && make install 
  
 # && echo "localhost" > ${INSTALLTMDIR}/build/$repo/test/my-hostfile 
  
find ${INSTALL_PREFIX}/damaris/examples/ -type f -name *.xml  | xargs sed -i "s|<script>.*examples|<script>${INSTALL_PREFIX}/damaris/examples|"

# COPY --from=builder ${INSTALL_PREFIX}/ ${INSTALL_PREFIX}/
cp -r ${INSTALLTMDIR}/build/$repo/test/ ${INSTALL_PREFIX}/damaris/examples/test/ \
  && cp  ${INSTALLTMDIR}/build/$repo/CTestTestfile.cmake ${INSTALL_PREFIX}/damaris/examples/ \
  && sed -i "s|${INSTALLTMDIR}/build/$repo/|${INSTALL_PREFIX}/damaris/examples/|g" ${INSTALL_PREFIX}/damaris/examples/test/CTestTestfile.cmake
 
rm -fr ${INSTALLTMDIR}/*
chmod -R a+rw  ${INSTALL_PREFIX}/damaris/

export PYTHONPATH=/usr/local/lib/python3.8/site-packages/_paraview.zip:\
/usr/local/lib/python3.8/site-packages/_vtk.zip:\
/usr/local/lib/python3.8/site-packages:/usr/lib/python38.zip:/usr/lib/python3.8:\
/usr/lib/python3.8/lib-dynload:/usr/local/lib/python3.8/dist-packages:\
/usr/lib/python3/dist-packages
   
   

%runscript
    

%startscript
    

%test

%labels
    Author joshua-charles.bowden@inria.fr
    Version v0.1.0

