Bootstrap: docker
From: ubuntu:20.04
Stage: build

%help
    This container was built from the following repositpory of Singularity definition files:
        git clone https://gitlab.inria.fr/Damaris/Simulations/across_wp7_opmflow_scripts.git
        cd across_wp7_opmflow_scripts/singularity/damaris
        
    This version builds damaris with the following dependencies:
    
    |     | xerces-c | xsd   |  HDF5       |     mpi       | Paraview |
    |-----|----------|-------|-------------|---------------|----------|
    | src |          |       |             |               |          |
    | bin |  3.2.2   | 4.0.0 |  1.10.4-mpi | OpenMPI 4.0.3 |          |
    
    
    To build a container from a definition file:
        # build the container
        sudo singularity build --sandbox damaris_ubuntu damaris_ubuntu.def

        # run the example:
        mpirun -np 4 singularity exec ./damaris_ubuntu   /usr/local/examples/storage/3dmesh /usr/local/examples/storage/3dmesh.xml [-v] [-r]
       
        # -v is for verbose output (prints arrays)
        # -r prints the mpi rank that will write the array data
        
        # edit the file: /usr/local/examples/storage/3dmesh.xml to change the <parameter name="whd_layout" ...> value to change the layout used to write the data in memory        
    To get a shell into the container:
        sudo singularity shell --writable damaris_ubuntu
        nano /usr/local/examples/storage/3dmesh.xml
        exit
        
    N.B. The install directory for all code built from source is: /usr/local        
    To locate the source repositories for Damaris and OPM software:
        cd /installdir
%setup

%files


%environment
    export LC_ALL=C
    export DEBIAN_FRONTEND=noninteractive   
    export INSTALL_PREFIX=/usr/local
    export PATH=$INSTALL_PREFIX/bin:$INSTALL_PREFIX/examples/storage:$PATH
    export LD_LIBRARY_PATH=$INSTALL_PREFIX/lib:$LD_LIBRARY_PATH
    export LD_LIBRARY_PATH=$INSTALL_PREFIX/lib64:$LD_LIBRARY_PATH

%post
    ###########
    # Install paths variables and software versions

    export INSTALL_PREFIX=/usr/local
    export PATH=$INSTALL_PREFIX/bin:$PATH
    export PATH=${MPI_BINDIR}:$PATH
    export LD_LIBRARY_PATH=$INSTALL_PREFIX/lib:$INSTALL_PREFIX/lib64:$MPI_LIBDIR:$LD_LIBRARY_PATH

    # Build with this many cores
    NUMCORES=4

    # Update cmake 
    CMAKE_VERSION=3.20
    CMAKE_VERSION_FULL=${CMAKE_VERSION}.0

    DAMARIS_VERSION=1.5.0
    # Build damaris as shared library (N.B. static library build has problems)    
    SHLIBS_ON_OFF=ON
    # Build examples
    EXAMPLES_ON_OFF=ON
    # Regenerate the xml model in C using XSD
    REGEN_ON_OFF=ON


    ############
    ## Where to build from
    
    INSTALLTMDIR=/installdir
    mkdir $INSTALLTMDIR


    ###########
    ## Update and install packages
    apt-get update -y
    apt-get install -y software-properties-common

    echo "debconf debconf/frontend select Noninteractive" | debconf-set-selections 


      
    apt-get -y install libpython3-dev libboost-python-dev libboost-numpy-dev
    apt-get -y install unzip nano 
    apt-get -y install apt-utils build-essential gfortran \
        pkg-config \
        git-core wget 
    apt-get -y install libhdf5-openmpi-dev
    # apt-get -y install libhdf5-mpich-dev
     
    apt-get -y install libboost-dev libboost-regex-dev libboost-date-time-dev  libboost-log-dev libboost-system-dev libboost-filesystem-dev libboost-thread-dev libopenmpi-dev libxerces-c-dev    hdf5-tools
    apt-get -y install xsdcxx
    ln -s /usr/bin/xsdcxx /usr/bin/xsd
    

    ###########
    ##  install binary libraries
    # cd ${INSTALLTMDIR}
    # wget https://www.codesynthesis.com/download/xsd/4.0/linux-gnu/x86_64/xsd_4.0.0-1_amd64.deb
    # dpkg -i xsd_4.0.0-1_amd64.deb
  
    # CMAKE_VERSION=3.20
    # CMAKE_VERSION_FULL=${CMAKE_VERSION}.3
    cd ${INSTALLTMDIR}
    ###### Install CMake - from binary (fast)
    echo "CMake Version: ${CMAKE_VERSION_FULL}"
    wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION_FULL}/cmake-${CMAKE_VERSION_FULL}-linux-x86_64.tar.gz
    tar -xf cmake-${CMAKE_VERSION_FULL}-linux-x86_64.tar.gz
    rm cmake-${CMAKE_VERSION_FULL}-linux-x86_64.tar.gz
    cp -r cmake-${CMAKE_VERSION_FULL}-linux-x86_64/bin /usr/local
    cp -r cmake-${CMAKE_VERSION_FULL}-linux-x86_64/share/cmake-${CMAKE_VERSION} /usr/local/share
    PATH=/usr/local/bin:$PATH

    
    ##############
    ## Install Damaris
    
    cd ${INSTALLTMDIR}
    ###### Install Damaris
    echo "Damaris Version: ${DAMARIS_VERSION}"
    repo=damaris
    git clone  --depth 1 --branch v${DAMARIS_VERSION}  https://gitlab.inria.fr/Damaris/damaris.git
    mkdir -p ${INSTALLTMDIR}/build/damaris
    cd ${INSTALLTMDIR}/build/damaris

    # -DENABLE_CATALYST=OFF -DParaView_DIR=$CATALYSTDIR \
    # -DENABLE_HDF5=ON -DHDF5_ROOT=$install_path
    
    cmake ../../$repo -DCMAKE_INSTALL_PREFIX:PATH=$INSTALL_PREFIX \
      -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
      -DCMAKE_CXX_COMPILER=mpicxx \
      -DCMAKE_C_COMPILER=mpicc \
      -DENABLE_TESTS=OFF \
      -DENABLE_EXAMPLES=$EXAMPLES_ON_OFF \
      -DBUILD_SHARED_LIBS=$SHLIBS_ON_OFF \
      -DENABLE_CATALYST=OFF \
      -DGENERATE_MODEL=$REGEN_ON_OFF \
      -DENABLE_HDF5=ON -DHDF5_ROOT=/usr/lib/x86_64-linux-gnu/hdf5/openmpi
      
    make -j${NUMCORES}
    make install
    
    find ${INSTALL_PREFIX}/examples/ -type f -name *.xml  | xargs sed -i "s|<script>.*examples|<script>${INSTALL_PREFIX}/examples|"
   
   
  
%test    
 

%runscript

    
%startscript
    


%labels
    Author joshua-charles.bowden@inria.fr
    Version v0.0.1
