# syntax=docker/dockerfile:1

## Usage of this file (standalone or automated via gitlab CI): 
# The gitlab.inria.fr/Damaris/damaris repo should build without the secret setup.
# 
# To build the damaris repo (no password needed):
# export TAG=v1.5.0
# sudo  DOCKER_BUILDKIT=1 docker build -t \
#            registry.gitlab.inria.fr/damaris/damaris:${TAG}-visit \
#            --build-arg INPUT_damaris_ver=${TAG} \
#            --build-arg INPUT_repo=damaris \
#            --build-arg INPUT_visit=3.2.0  \
#                -f ./Dockerfile.ubuntu20.visit


# This is a global arg that can be used in all stages of the build
ARG INPUT_repo

########################################
## Stage 1 of build
########################################
FROM ubuntu:20.04 AS builder
SHELL ["/bin/bash", "-c"]

USER root

RUN useradd docker \
    && mkdir /home/docker \
    && chown docker:docker /home/docker \
    && addgroup docker staff
    
    
ENV INSTALLTMDIR=/home/docker/installdir
ENV NUMCORES=4
## Install build tools and dependencies for Damaris
ENV INSTALL_PREFIX=/home/docker/local

ENV PATH=${INSTALL_PREFIX}/bin:$PATH
ENV LD_LIBRARY_PATH=${INSTALL_PREFIX}/lib:${INSTALL_PREFIX}/lib64:$LD_LIBRARY_PATH




# ENV PV_VERSION=5.8.0
# ENV PYTHON_INCLUDE_DIR=/usr/include/python3.8
# ENV GL_INSTALL_PATH=/usr/lib/x86_64-linux-gnu
# ENV GL_HEADER_PATH=/usr

###### Install VisIt  - from binary package
# RUN   mkdir -p ${INSTALLTMDIR} \
  # &&  cd ${INSTALLTMDIR} \
  # &&  wget  https://github.com/visit-dav/visit/releases/download/v${VISIT_VERSION}/visit${VISIT_VER_UNDERSCORE}.linux-x86_64-ubuntu20.tar.gz \
  # &&  wget  https://github.com/visit-dav/visit/releases/download/v${VISIT_VERSION}/visit-install${VISIT_VER_UNDERSCORE} \
  # && chmod +x visit-install${VISIT_VER_UNDERSCORE} \
  # && echo "1" | visit-install${VISIT_VER_UNDERSCORE} linux-x86_64-ubuntu20 /home/docker/visit 
  
USER root
  
RUN apt-get update -y \
  && echo "debconf debconf/frontend select Noninteractive" | debconf-set-selections \
  && apt-get install -y --no-install-recommends \ 
    software-properties-common \
    apt-utils \
    build-essential \
    gfortran \
    pkg-config \
    git-core \
    cmake \
    wget unzip nano \
    libhdf5-openmpi-dev \
    libboost-all-dev \
    libxerces-c-dev  \
    xsdcxx \
    libcppunit-dev \
    hdf5-tools \
    cmake \
  && apt-get clean \
  && ln -s /usr/bin/xsdcxx /usr/bin/xsd 
  


USER docker
ARG INPUT_visit=3.2.1
ENV VISIT_VERSION=$INPUT_visit
ENV VISIT_VER_UNDERSCORE=$(echo $VISIT_VERSION  | tr '.' '_')
# This is for building from source: ./build_visit2_13_2 --server-components-only --mesa --system-cmake --parallel --prefix $INSTALL_PREFIX/visit
RUN mkdir -p ${INSTALLTMDIR} \
    && cd ${INSTALLTMDIR} \
    && mkdir ./third_party \
    && wget  https://github.com/visit-dav/visit/releases/download/v${VISIT_VERSION}/build_visit${VISIT_VER_UNDERSCORE} \
    && export PAR_COMPILER=$(which mpicc) \
    && export PAR_COMPILER_CXX=$(which mpicxx) \
    && export PAR_INCLUDE="\"$(mpicc  --showme:compile)\"" \
    && export PAR_LIBS="\"$(mpicc  --showme:link)\""  \
    && ./build_visit${VISIT_VER_UNDERSCORE} --server-components-only --osmesa --llvm --system-python --system-cmake --parallel --download-only --prefix $INSTALL_PREFIX/visit

RUN  cd ${INSTALLTMDIR} \
    && export PAR_COMPILER=$(which mpicc) \
    && export PAR_COMPILER_CXX=$(which mpicxx) \
    && export PAR_INCLUDE="\"$(mpicc  --showme:compile)\"" \
    && export PAR_LIBS="\"$(mpicc  --showme:link)\""  \
    && ./build_visit${VISIT_VER_UNDERSCORE} --server-components-only --osmesa --llvm --system-python --system-cmake --parallel --prefix $INSTALL_PREFIX/visit
  
  


WORKDIR /home/docker/local/examples
CMD ["/bin/bash"]
