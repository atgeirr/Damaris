# syntax=docker/dockerfile:1

## Usage of this file (standalone or automated via gitlab CI): 
# The gitlab.inria.fr/Damaris/damaris repo should build without the secret setup.
# 
# To build the damaris repo (no password needed):
# export TAG=v1.5.0
# export VISIT_VER=3.2.1
# sudo  DOCKER_BUILDKIT=1 docker build --progress=plain  -t \
#            registry.gitlab.inria.fr/damaris/damaris:${TAG}-centos8-visit${VISIT_VER} \
#            --build-arg INPUT_damaris_ver=${TAG} \
#            --build-arg INPUT_repo=damaris \
#            --build-arg INPUT_visit_ver=${VISIT_VER} \
#                -f ./Dockerfile.centos8.visit .


# This is a global arg that can be used in all stages of the build
ARG INPUT_repo

########################################
## Stage 1 of build
########################################
FROM ubuntu:20.04 AS builder
SHELL ["/bin/bash", "-c"]

USER root

RUN useradd docker \
    && mkdir /home/docker \
    && chown docker:docker /home/docker \
    && addgroup docker staff
    
# RUN yes docker | passwd --stdin root
RUN echo 'root:docker' | chpasswd

RUN apt-get update -y \
  && echo "debconf debconf/frontend select Noninteractive" | debconf-set-selections \
  && apt-get install -y --no-install-recommends \
    apt-utils \
    pkg-config \
    git-core \
    cmake \
    wget unzip nano \
	libhdf5-openmpi-dev \
    libboost-all-dev \
	libpython3-dev  \
	libxerces-c-dev  \
	xsdcxx \
    libcppunit-dev \
	hdf5-tools \
  && apt-get clean \
  && ln -s /usr/bin/xsdcxx /usr/bin/xsd \


RUN apt-get update -y \
  && apt-get install -y --no-install-recommends \
	software-properties-common \
    build-essential \
    gfortran \
  && apt-get clean



# Extras for visit install
RUN apt-get update -y \
  && hostname patch \
    x11proto-dev   \
    xz-utils libtool m4 automake \
    libx11-dev xorg-dev  libx11-xcb-dev libxcb-dri2-0-dev  \
    libxcb-xfixes0-dev \
    libffi-dev \
  && apt-get clean




ENV INSTALL_PREFIX=/home/docker/local
ENV PATH=${INSTALL_PREFIX}/bin:${PATH}
ENV LD_LIBRARY_PATH=${INSTALL_PREFIX}/lib:${INSTALL_PREFIX}/lib64:${LD_LIBRARY_PATH}

ENV INSTALLTMDIR=/home/docker/installdir
ENV CMAKE_BUILD_TYPE=Release
ENV NUMCORES=4

# N.B. MPI_ROOT=/usr/lib64/openmpi/bin has to be on the PATH
ENV MPI_ROOT=/usr
ENV MPICXX=$MPI_ROOT/bin/mpicxx
ENV MPICC=$MPI_ROOT/bin/mpicc
ENV MPIFORT=$MPI_ROOT/bin/mpifort

ENV GCC=/usr/bin/gcc
ENV GPP=/usr/bin/g++


USER docker


# cp build_visit${VISIT_VER_UNDERSCORE} build_visit${VISIT_VER_UNDERSCORE}.cpy
# The following is eeded to fix how the build_visit script finds Python on Ubuntu 20
# sed -i 's|error "python library was not found, cannot configure python"|PYTHON_LIBRARY=$(pkg-config --libs python3-embed);  PYTHON_LIBRARY="lib${PYTHON_LIBRARY:2}.so" ; if [ ! -e "${PYTHON_LIBRARY_DIR}/${PYTHON_LIBRARY}" ] ; then  error "python library was not found, cannot configure python" ; fi|g' ./build_visit${VISIT_VER_UNDERSCORE}.cpy

# Define INPUT_visit_ver with a default
ARG INPUT_visit_ver
ENV VISIT_VERSION=$INPUT_visit_ver

# This is for building from source: ./build_visit2_13_2 --server-components-only --mesa --system-cmake --parallel --prefix $INSTALL_PREFIX/visit
RUN VISIT_VER_UNDERSCORE=${VISIT_VERSION//./_} \
    && mkdir -p ${INSTALLTMDIR} \
    && cd ${INSTALLTMDIR} \
    && mkdir ./third_party \
    && wget  https://github.com/visit-dav/visit/releases/download/v${VISIT_VERSION}/build_visit${VISIT_VER_UNDERSCORE} \
    && chmod +x build_visit${VISIT_VER_UNDERSCORE} \
    && export PAR_COMPILER=${MPICC} \
    && export PAR_COMPILER_CXX=${MPICXX} \
    && sed -i 's|error "python library was not found, cannot configure python"|PYTHON_LIBRARY=$(pkg-config --libs python3-embed);  PYTHON_LIBRARY="lib${PYTHON_LIBRARY:2}.so" ; if [ ! -e "${PYTHON_LIBRARY_DIR}/${PYTHON_LIBRARY}" ] ; then  error "python library was not found, cannot configure python" ; fi|g' ./build_visit${VISIT_VER_UNDERSCORE} \
    && sed -i 's|vopts="${vopts} -DPYTHON_EXTRA_LIBS:STRING=${VTK_PY_LIBS}"|vopts="${vopts} -DPYTHON_EXTRA_LIBS:STRING=\\\"${VTK_PY_LIBS}\\\""|g' ./build_visit${VISIT_VER_UNDERSCORE} \
    && yes yes | ./build_visit${VISIT_VER_UNDERSCORE}  --download-only --system-python --thirdparty-path ${INSTALL_PREFIX} --mesagl  --llvm --server-components-only  --cc ${GCC} --cxx ${GPP}  --cflags "-I${INSTALL_PREFIX}/include" --cxxflags "-I${INSTALL_PREFIX}/include"  --system-cmake --parallel --prefix $INSTALL_PREFIX/visit
# --system-python

# RUN cd ${INSTALLTMDIR} \
#     && cat build_visit${VISIT_VER_UNDERSCORE} |  > build_visit${VISIT_VER_UNDERSCORE}_patched \
#    && chmod +x build_visit${VISIT_VER_UNDERSCORE}_patched


# --cflags "-I/home/docker/local/include" --cxxflags "-I/home/docker/local/include"


RUN VISIT_VER_UNDERSCORE=${VISIT_VERSION//./_} \
    && cd ${INSTALLTMDIR} \
    && export PAR_COMPILER=${MPICC} \
    && export PAR_COMPILER_CXX=${MPICXX}  \
    && yes yes | ./build_visit${VISIT_VER_UNDERSCORE} --no-visit --system-python --thirdparty-path ${INSTALL_PREFIX} --mesagl --llvm --server-components-only --stdout  --cc ${GCC}  --cxx ${GPP}  --cflags "-I${INSTALL_PREFIX}/include" --cxxflags "-I${INSTALL_PREFIX}/include"  --makeflags -j${NUMCORES} --system-cmake --cxxflag "-Wno-class-memaccess -Wno-cast-function-type" --parallel --prefix $INSTALL_PREFIX/visit

    # --system-python  /usr/lib/x86_64-linux-gnu


RUN VISIT_VER_UNDERSCORE=${VISIT_VERSION//./_} \
    && cd ${INSTALLTMDIR} \
    && export PAR_COMPILER=${MPICC} \
    && export PAR_COMPILER_CXX=${MPICXX}  \
    && yes yes | ./build_visit${VISIT_VER_UNDERSCORE} --system-python --thirdparty-path ${INSTALL_PREFIX} --mesagl --llvm --server-components-only --stdout  --cc ${GCC}  --cxx ${GPP}  --cflags "-I${INSTALL_PREFIX}/include" --cxxflags "-I${INSTALL_PREFIX}/include"  --makeflags -j${NUMCORES} --system-cmake --cxxflag "-Wno-class-memaccess -Wno-cast-function-type" --parallel --prefix $INSTALL_PREFIX/visit  || echo "We will try again"
#

RUN rm -fr ${INSTALLTMDIR}/visit${VISIT_VERSION}/build \
  && mkdir ${INSTALLTMDIR}/visit${VISIT_VERSION}/build \
  && cd ${INSTALLTMDIR}/visit${VISIT_VERSION}/build \
  && /usr/bin/cmake -DVISIT_CONFIG_SITE:FILEPATH=/home/docker/installdir/buildkitsandbox.cmake -DVISIT_INSTALL_THIRD_PARTY:BOOL=ON -DVISIT_PARALLEL:BOOL=ON -DCMAKE_BUILD_TYPE:STRING=Release -DVISIT_C_COMPILER:FILEPATH=mpicc -DVISIT_CXX_COMPILER:FILEPATH=${MPICXX}  -DVISIT_C_FLAGS:STRING=" -m64 -fPIC -I${INSTALL_PREFIX}/include" -DVISIT_CXX_FLAGS:STRING=" -m64 -fPIC -I${INSTALL_PREFIX}/include -Wno-class-memaccess -Wno-cast-function-type" -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PREFIX}/visit -DCPACK_INSTALL_PREFIX:PATH=${INSTALL_PREFIX}/visit -DCPACK_PACKAGING_INSTALL_PREFIX:PATH=${INSTALL_PREFIX}/visit -DVISIT_SERVER_COMPONENTS_ONLY:BOOL=ON ../src  \
  && make -j${NUMCORES} \
  && make install


ENV REGEN_ON_OFF=ON
ENV SHLIBS_ON_OFF=ON
# Build examples
ENV EXAMPLES_ON_OFF=ON


# N.B INPUT_damaris_ver to be provided on the docker build -t registry.gitlab.inria.fr/damaris-development:${TAG}  --build-arg INPUT_damaris_ver=v1.5.0 --build-arg INPUT_repo="damaris-development" -f Dockerfile.ubuntu20 .
ARG INPUT_damaris_ver
ARG INPUT_repo
# ARG INPUT_repo  # making this a global arge and defining before stage 1
ENV DAMARIS_VERSION=$INPUT_damaris_ver
ENV repo=$INPUT_repo


# may need this:  -DParaView_DIR=$CATALYSTDIR
# The first line deals with different access rights to damaris-development (private) and damaris (public) repository
RUN --mount=type=secret,id=thepassword if [ "$repo" == "damaris-development" ] ; then export GITLABUSERNAME="gitlab-read-repo:$(cat /run/secrets/thepassword)@";  fi \
  && export PV_VERSION_SHORT=${PV_VERSION:1:-2} \
  && mkdir -p ${INSTALLTMDIR} \
  && cd ${INSTALLTMDIR} \
  && echo "Damaris Version: $DAMARIS_VERSION" \
  && git clone  --depth 1 --branch $DAMARIS_VERSION https://${GITLABUSERNAME}gitlab.inria.fr/Damaris/$repo.git \
  && mkdir -p ${INSTALLTMDIR}/build/$repo \
  && cd ${INSTALLTMDIR}/build/$repo \
  && cmake ../../$repo -DCMAKE_INSTALL_PREFIX:PATH=$INSTALL_PREFIX \
      -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
      -DCMAKE_CXX_COMPILER=${MPICXX}  \
      -DCMAKE_C_COMPILER=${MPICC} \
      -DCMAKE_Fortran_COMPILER=${MPIFORT} \
      -DENABLE_FORTRAN=ON \
      -DENABLE_TESTS=ON \
      -DENABLE_EXAMPLES=$EXAMPLES_ON_OFF \
      -DBUILD_SHARED_LIBS=$SHLIBS_ON_OFF \
      -DENABLE_PYTHON=OFF \
      -DGENERATE_MODEL=$REGEN_ON_OFF \
      -DENABLE_HDF5=ON \
      -DENABLE_VISIT=ON -DVisIt_ROOT=${INSTALL_PREFIX}/visit/${VISIT_VERSION}/linux-x86_64/libsim/V2 \
      -DENABLE_CATALYST=OFF -DParaView_DIR=${INSTALL_PREFIX}/lib/cmake/paraview-${PV_VERSION_SHORT} \
  && make -j${NUMCORES} \
  && make install


RUN find ${INSTALL_PREFIX}/examples/damaris/ -type f -name *.xml  | xargs sed -i "s|<script>.*examples|<script>${INSTALL_PREFIX}/examples/damaris|"

RUN  cp -r ${INSTALLTMDIR}/build/$repo/test/ ${INSTALL_PREFIX}/examples/damaris/test/ \
 && cp  ${INSTALLTMDIR}/build/$repo/CTestTestfile.cmake ${INSTALL_PREFIX}/examples/damaris/ \
 && sed -i "s|${INSTALLTMDIR}/build/$repo/|${INSTALL_PREFIX}/examples/damaris/|g" ${INSTALL_PREFIX}/examples/damaris/test/CTestTestfile.cmake


RUN rm -fr ${INSTALLTMDIR}/

RUN chown -R docker:docker /home/docker

USER docker
ENV PATH=/usr/local/bin:${PATH}
ENV LD_LIBRARY_PATH=/usr/local/bin:${LD_LIBRARY_PATH}
ENV PYTHONPATH=/usr/local/lib/python3.8/site-packages/_paraview.zip:/usr/local/lib/python3.8/site-packages/_vtk.zip:/usr/local/lib/python3.8/site-packages:/usr/lib/python38.zip:/usr/lib/python3.8:/usr/lib/python3.8/lib-dynload:/usr/local/lib/python3.8/dist-packages:/usr/lib/python3/dist-packages


WORKDIR ${INSTALL_PREFIX}/examples/damaris


CMD ["/bin/bash"]
