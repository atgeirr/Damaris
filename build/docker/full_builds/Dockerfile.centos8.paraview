# syntax=docker/dockerfile:1

##################
# Author: Josh Bowden
# Company: Inria
# Date: 25/01/2022
#
# This Dockerfile file can be built by gitlab on push to the 
# damaris-development repository. It works in concert with the .gitlab-ci.yml 
# file and a required gitlab-runner process that is currently running somewhere.
#
##################
##################
#
## Usage of this file (standalone or automated via gitlab CI): 
# The gitlab.inria.fr/Damaris/damaris repo should build without the secret setup.
# 
# To build the damaris repo (no password needed):
# export TAG=v1.5.0
# export PV_VER=v5.9.0
# export PVSHORT=${PV_VERSION//./})
# sudo  DOCKER_BUILDKIT=1 docker build -t \
#            registry.gitlab.inria.fr/damaris/damaris:${TAG}-centos8-p${PVSHORT} \
#            --build-arg INPUT_damaris_ver=${TAG} \
#            --build-arg INPUT_repo=damaris \
#            --build-arg INPUT_pv_ver=${PV_VER} \
#                -f ./Dockerfile.centos8.paraview .
#
#
###################
#
## To test the created docker image:
# 1/ Log in to the gitlab repository 
# N.B. You may need a ~/.docker/config.json file configured with an access token
# > docker login registry.gitlab.inria.fr
# 
# 2/ Use docker run as it does not leave the container running on exit and run Damaris tests:
#    Map the shared memory filesystem and the Paraview Catalyst port
# 
# > docker run --rm -v /dev/shm:/dev/shm -p 22222:22222 -it registry.gitlab.inria.fr/damaris/damaris:<branch>-<OS>-<Paraview_version> /bin/bash
# <container prompt> ctest
#
# > sudo docker run --rm -v /dev/shm:/dev/shm -p 22222:22222 -it registry.gitlab.inria.fr/damaris/damaris:v1.5.0-centos8-pv5100 /bin/bash
# > cd /home/docker/local/examples/storage/
# > mpirun -np 4 ./3dmesh 3dmesh.xml
######################################################################################


# This is a global arg that can be used in all stages of the build
ARG INPUT_repo

########################################
## Stage 1 of build
########################################
FROM quay.io/centos/centos:stream8 AS builder
SHELL ["/bin/bash", "-c"]



RUN useradd docker \
	&& chown docker:docker /home/docker \
	&& groupadd staff \
    && usermod -a -G staff docker

ENV INSTALL_PREFIX=/home/docker/local
ENV MPI_BINDIR=/usr/lib64/openmpi/bin 
ENV PATH=$INSTALL_PREFIX/bin:${MPI_BINDIR}:$PATH  
ENV LD_LIBRARY_PATH=$INSTALL_PREFIX/lib:$INSTALL_PREFIX/lib64:$MPI_LIBDIR:$LD_LIBRARY_PATH
ENV PATH=${INSTALL_PREFIX}/bin:${PATH}
ENV LD_LIBRARY_PATH=${INSTALL_PREFIX}/lib:${INSTALL_PREFIX}/lib64:${LD_LIBRARY_PATH}


# N.B. MPI_BINDIR=/usr/lib64/openmpi/bin has to be on the PATH
ENV MPICXX_PATH=$MPI_BINDIR/mpicxx
ENV MPICC_PATH=$MPI_BINDIR/mpicc
ENV MPIFORT_PATH=$MPI_BINDIR/mpifort

ENV INSTALLTMDIR=/home/docker/installdir
ENV CMAKE_BUILD_TYPE=Release
ENV NUMCORES=4

ENV GL_INSTALL_PATH=/usr/lib64
ENV GL_HEADER_PATH=/usr/include



## Good to look at: https://centos.pkgs.org/

## Install build tools and dependencies for Damaris
RUN dnf -y install dnf-plugins-core \
   && dnf config-manager --set-enabled powertools \
   &&  dnf makecache --refresh \
   &&  dnf update -y \
   &&  dnf install -y epel-release \
   &&  dnf install -y xerces-c-devel \
   &&  dnf install -y xsd \
   &&  dnf -y --enablerepo=powertools install cppunit-devel \
   &&  dnf -y install redhat-rpm-config \
   &&  dnf -y install hdf5-openmpi-devel \
   hdf5-openmpi-static \
   boost-devel \
   git \
   gcc-gfortran \
   gcc-c++ \
   openssl-devel \
   libcurl-devel \
   xz-devel \
   nano \
   wget \
   cmake \
   && cp /usr/bin/xsdcxx /usr/bin/xsd

## For Paraview
RUN dnf install -y --enablerepo=powertools mesa-libOSMesa-devel \
    freeglut-devel \
    ninja-build \
    tbb-devel 

RUN  dnf -y --enablerepo=powertools install python3 platform-python-devel boost-python3-devel  

USER docker

# openmpi comes with hdf-openmpi
# paraview-devel is ~3GB in size, I have not yet tested it with Damaris
# dnf -y install paraview-devel

# Check what is installed and where: 
# e.g. >rmp -ql  hdf-openmpi-devel
# redhat-rpm-config is needed for cmake to detect hdf5 as h5pcc compiler wrapper uses redhat-hardened-cc1
 

RUN   mkdir -p ${INSTALLTMDIR} \
  &&   cd ${INSTALLTMDIR} \
  &&   git clone  https://gitlab.kitware.com/paraview/paraview.git \
  &&   cd ${INSTALLTMDIR}/paraview   \
  &&   git fetch --all 

ARG INPUT_pv_ver=v5.8.0
ENV PV_VERSION=$INPUT_pv_ver
  
RUN   cd ${INSTALLTMDIR}/paraview   \
  &&   git checkout ${PV_VERSION}  \
  &&   git submodule update --init --recursive \
  &&   mkdir -p ${INSTALLTMDIR}/build/pv \
  &&   cd ${INSTALLTMDIR}/build/pv   \
  &&   cmake -GNinja ../../paraview -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} \
       -DBUILD_TESTING=OFF \
       -DVTK_SMP_IMPLEMENTATION_TYPE=TBB \
       -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
       -DPARAVIEW_BUILD_EDITION=CATALYST \
       -DPARAVIEW_INSTALL_DEVELOPMENT_FILES=ON \
       -DPARAVIEW_USE_PYTHON=ON \
       -DPARAVIEW_BUILD_SHARED_LIBS=ON \
       -DPARAVIEW_USE_MPI=ON \
       -DPARAVIEW_USE_QT=OFF \
       -DVTK_USE_X=OFF \
       -DVTK_OPENGL_HAS_OSMESA=ON \
       -DPARAVIEW_USE_FORTRAN=OFF \
       -DOSMESA_INCLUDE_DIR=$GL_HEADER_PATH/include \
       -DOSMESA_LIBRARY=$GL_INSTALL_PATH/libOSMesa.so 
       
RUN   cd ${INSTALLTMDIR}/build/pv  \
  && ninja -j${NUMCORES} \
  && ninja install 
    
 
# These should also be supplied on the command line as --build-arg 
# ENV ENABLE_PYTHON=
# Regenerate the xml model in C using XSD
ENV REGEN_ON_OFF=ON
ENV SHLIBS_ON_OFF=ON
# Build examples
ENV EXAMPLES_ON_OFF=ON

# N.B INPUT_damaris_ver to be provided on the docker build -t registry.gitlab.inria.fr/damaris-development:${TAG}  --build-arg INPUT_damaris_ver=v1.5.0 --build-arg INPUT_repo="damaris-development" -f Dockerfile.ubuntu20 .
ARG INPUT_damaris_ver
ARG INPUT_repo
# ARG INPUT_repo  # making this a global arge and defining before stage 1
ENV DAMARIS_VERSION=$INPUT_damaris_ver
ENV repo=$INPUT_repo


USER root
RUN --mount=type=secret,id=thepassword if [ "$repo" == "damaris-development" ] ; then export GITLABUSERNAME="gitlab-read-repo:$(cat /run/secrets/thepassword)@";  fi \
  && mkdir -p ${INSTALLTMDIR} \
  && cd ${INSTALLTMDIR} \
  && echo "Damaris Version: $DAMARIS_VERSION" \
  && git clone  --depth 1 --branch $DAMARIS_VERSION https://${GITLABUSERNAME}gitlab.inria.fr/Damaris/$repo.git \
  && chown -R docker:docker ${INSTALLTMDIR}

USER docker
RUN export PV_VERSION_SHORT=${PV_VERSION:1:-2} \
  && mkdir -p ${INSTALLTMDIR}/build/$repo \
  && cd ${INSTALLTMDIR}/build/$repo \
  && cmake ../../$repo -DCMAKE_INSTALL_PREFIX:PATH=$INSTALL_PREFIX \
      -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
      -DCMAKE_CXX_COMPILER=mpicxx \
      -DCMAKE_C_COMPILER=mpicc \
      -DENABLE_TESTS=ON \
      -DENABLE_EXAMPLES=$EXAMPLES_ON_OFF \
      -DBUILD_SHARED_LIBS=$SHLIBS_ON_OFF \
      -DENABLE_PYTHON=OFF \
      -DGENERATE_MODEL=$REGEN_ON_OFF \
      -DENABLE_HDF5=ON  \
      -DENABLE_CATALYST=ON -DParaView_DIR=${INSTALL_PREFIX}/lib64/cmake/paraview-${PV_VERSION_SHORT} \
  && make -j${NUMCORES} \
  && make install 
  
  
RUN find ${INSTALL_PREFIX}/examples/ -type f -name *.xml  | xargs sed -i "s|<script>.*examples|<script>${INSTALL_PREFIX}/examples|"
 

RUN  cp -r ${INSTALLTMDIR}/build/$repo/test/ ${INSTALL_PREFIX}/examples/test/ \
 && cp  ${INSTALLTMDIR}/build/$repo/CTestTestfile.cmake ${INSTALL_PREFIX}/examples/ \
 && sed -i "s|${INSTALLTMDIR}/build/$repo/|${INSTALL_PREFIX}/examples/|g" ${INSTALL_PREFIX}/examples/test/CTestTestfile.cmake
 
RUN rm -fr ${INSTALLTMDIR}/

ENV PYTHONPATH=/usr/local/lib/python3.8/site-packages/_paraview.zip:/usr/local/lib/python3.8/site-packages/_vtk.zip:/usr/local/lib/python3.8/site-packages:/usr/lib/python38.zip:/usr/lib/python3.8:/usr/lib/python3.8/lib-dynload:/usr/local/lib/python3.8/dist-packages:/usr/lib/python3/dist-packages
WORKDIR ${INSTALL_PREFIX}/examples


# ########################################
# ## Stage 2 of build
# ########################################
# FROM quay.io/centos/centos:stream8 AS testing  

# RUN useradd docker \
	# && chown docker:docker /home/docker \
	# && groupadd staff \
    # && usermod -a -G staff docker
    


# # INPUT_repo is a global argument
# ARG INPUT_repo
# ENV repo=$INPUT_repo
# ENV INSTALLTMDIR=/home/docker/installdir

# RUN dnf -y install dnf-plugins-core \
   # && dnf config-manager --set-enabled powertools \
   # &&  dnf makecache --refresh \
   # &&  dnf update -y \
   # &&  dnf install -y epel-release \
   # &&  dnf install -y xerces-c-devel \
   # &&  dnf install -y xsd \
   # &&  dnf -y --enablerepo=powertools install cppunit-devel \
   # &&  dnf -y install redhat-rpm-config \
   # &&  dnf -y install hdf5-openmpi-devel \
   # hdf5-openmpi-static \
   # boost-devel \
   # git \
   # gcc-gfortran \
   # gcc-c++ \
   # openssl-devel \
   # libcurl-devel \
   # xz-devel \
   # nano \
   # wget \
   # cmake \
   # && cp /usr/bin/xsdcxx /usr/bin/xsd
  
# RUN dnf install -y mesa-libOSMesa-devel \
    # freeglut-devel \
    # ninja-build \
    # tbb-devel 
  
# # RUN apt-get install -y --no-install-recommends \ 
# #  	libpython3-dev \
# #   libpython3-dev libboost-python-dev libboost-numpy-dev \

# ENV INSTALL_PREFIX=/home/docker/local
# ENV MPI_BINDIR=/usr/lib64/openmpi/bin 
# ENV PATH=$INSTALL_PREFIX/bin:${MPI_BINDIR}:$PATH  
# ENV LD_LIBRARY_PATH=$INSTALL_PREFIX/lib:$INSTALL_PREFIX/lib64:$MPI_LIBDIR:$LD_LIBRARY_PATH


# COPY --from=builder /home/docker/local/ /home/docker/local/
# COPY --from=builder ${INSTALLTMDIR}/build/$repo/test/ /home/docker/local/examples/test/
# COPY --from=builder ${INSTALLTMDIR}/build/$repo/CTestTestfile.cmake /home/docker/local/examples/

# # Change the paths in the ctest unit test runner (CTestTestfile.cmake)
# RUN sed -i "s|${INSTALLTMDIR}/build/$repo/|/home/docker/local/examples/|g" /home/docker/local/examples/test/CTestTestfile.cmake

# RUN chown -R docker:docker /home/docker
# USER docker

# WORKDIR /home/docker/local/examples
 
CMD ["/bin/bash"]