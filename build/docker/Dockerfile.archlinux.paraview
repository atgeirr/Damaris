# syntax=docker/dockerfile:1

##################
# Author: Josh Bowden
# Company: Inria
# Date: 25/01/2022
#
# 
##################
#
## Usage of this file (standalone or automated via gitlab CI): 
# The gitlab.inria.fr/Damaris/damaris repo should build without the secret setup.
# 
# To build the damaris repo (no password needed):
# sudo TAG=v1.5.0 DOCKER_BUILDKIT=1 docker build -t \
#            registry.gitlab.inria.fr/damaris:${TAG} \
#            --build-arg INPUT_damaris_ver=${TAG} \
#            --build-arg INPUT_repo=damaris \
#                -f ./Dockerfile.ubuntu20
#
#
# N.B. MY_CI_READ_REPO_PWD is the filename that contains the token for user 'gitlab-read-repo' 
# User 'gitlab-read-repo' is created in the 
# Settings -> Access tokens page
# and MY_CI_READ_REPO_PWD is a gitlab CI 'file' variable that contains a gitlab token
# just created and the variable is created in the 
# Settings -> CI/CD -> Variables page
#
###################
#
## To test the created docker image:
# 1/ Log in to the gitlab repository 
# N.B. You may need a ~/.docker/config.json file configured with an access token
# > docker login registry.gitlab.inria.fr
# 
# 2/ Use docker run as it does not leave the container running on exit and run Damaris tests:
#
# > docker run --rm -it registry.gitlab.inria.fr/damaris-development:<branch> /bin/bash
# <container prompt> ctest
#
######################################################################################


# This is a global arg that can be used in all stages of the build
ARG INPUT_repo

########################################
## Stage 1 of build
########################################
FROM centos:8 AS builder
SHELL ["/bin/bash", "-c"]



RUN useradd docker \
	&& chown docker:docker /home/docker \
	&& groupadd staff \
    && usermod -a -G staff docker

ENV INSTALL_PREFIX=/home/docker/local
ENV MPI_BINDIR=/usr/bin 
ENV PATH=$INSTALL_PREFIX/bin:${MPI_BINDIR}:$PATH  
ENV LD_LIBRARY_PATH=$INSTALL_PREFIX/lib:$INSTALL_PREFIX/lib64:$MPI_LIBDIR:$LD_LIBRARY_PATH
ENV PATH=${INSTALL_PREFIX}/bin:${PATH}
ENV LD_LIBRARY_PATH=${INSTALL_PREFIX}/lib:${INSTALL_PREFIX}/lib64:${LD_LIBRARY_PATH}


# N.B. MPI_BINDIR=/usr/lib64/openmpi/bin has to be on the PATH
ENV MPICXX_PATH=$MPI_BINDIR/mpicxx
ENV MPICC_PATH=$MPI_BINDIR/mpicc
ENV MPIFORT_PATH=$MPI_BINDIR/mpifort

ENV INSTALLTMDIR=/home/docker/installdir
ENV CMAKE_BUILD_TYPE=Release
ENV NUMCORES=4


ENV PV_VERSION=5.8.0
ENV GL_INSTALL_PATH=/usr/lib
ENV GL_HEADER_PATH=/usr/include
# ENV PYTHON_INCLUDE_DIR=/usr/include/python3.8
# ENV GL_INSTALL_PATH=/usr/lib/x86_64-linux-gnu
# ENV GL_HEADER_PATH=/usr

# These should also be supplied on the command line as --build-arg 
# ENV ENABLE_PYTHON=
# Regenerate the xml model in C using XSD
ENV REGEN_ON_OFF=ON
ENV SHLIBS_ON_OFF=ON
# Build examples
ENV EXAMPLES_ON_OFF=ON

# N.B INPUT_damaris_ver to be provided on the docker build -t registry.gitlab.inria.fr/damaris-development:${TAG}  --build-arg INPUT_damaris_ver=v1.5.0 --build-arg INPUT_repo="damaris-development" -f Dockerfile.ubuntu20 .
ARG INPUT_damaris_ver
ARG INPUT_repo
# ARG INPUT_repo  # making this a global arge and defining before stage 1
ENV DAMARIS_VERSION=$INPUT_damaris_ver
ENV repo=$INPUT_repo


# [core]
# Include = /etc/pacman.d/mirrorlist
# Install python zst package:
# pacman -Syu python

## Good to look at: https://centos.pkgs.org/

## Install build tools and dependencies for Damaris
RUN pacman -Syyu \
   &&  pacman -Syu xerces-c xsd cppunit \
   &&  dpacman -Syu hdf5-openmpi \
   boost-libs \
   git \
   openssl \
   curl \
   xz \
   nano \
   wget \
   cmake \
   && cp /usr/bin/xsdcxx /usr/bin/xsd

# Archlinux: https://archlinux.org/packages/community/x86_64/paraview/
## For Paraview
RUN pacman -Syu mesa \
    freeglut \
    ninja \
    tbb \
    libpng \
    cgns \
    libtiff \
    lz4 \
    libjpeg-turbo \
    jsoncpp \
    protobuf \
    zlib \
    double-conversion
    

RUN  pacman -Syu python python-mpi4py python-numpy

USER docker


RUN   mkdir -p ${INSTALLTMDIR} \
  &&   cd ${INSTALLTMDIR} \
  &&   git clone --depth 1 --branch v${PV_VERSION} https://gitlab.kitware.com/paraview/paraview.git \
  &&   cd paraview \
  &&   git submodule update --init --recursive \
  &&   mkdir -p ${INSTALLTMDIR}/build/pv \
  &&   cd ${INSTALLTMDIR}/build/pv   \
  &&   cmake -GNinja ../../paraview -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} \
       -DBUILD_TESTING=OFF \
       -DVTK_SMP_IMPLEMENTATION_TYPE=TBB \
       -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
       -DPARAVIEW_BUILD_EDITION=CATALYST \
       -DPARAVIEW_INSTALL_DEVELOPMENT_FILES=ON \
       -DPARAVIEW_USE_PYTHON=ON \
       -DPARAVIEW_BUILD_SHARED_LIBS=ON \
       -DPARAVIEW_USE_MPI=ON \
       -DPARAVIEW_USE_QT=OFF \
       -DVTK_USE_X=OFF \
       -DVTK_OPENGL_HAS_OSMESA=ON \
       -DPARAVIEW_USE_FORTRAN=OFF \
       -DOSMESA_INCLUDE_DIR=$GL_HEADER_PATH/include \
       -DOSMESA_LIBRARY=$GL_INSTALL_PATH/libOSMesa.so \
  && ninja -j${NUMCORES} \
  && ninja install 
    


# The first line deals with different access rights to damaris-development (private) and damaris (public) repository
RUN --mount=type=secret,id=thepassword if [ "$repo" == "damaris-development" ] ; then export GITLABUSERNAME="gitlab-read-repo:$(cat /run/secrets/thepassword)@";  fi \
  && mkdir -p ${INSTALLTMDIR} \
  && cd ${INSTALLTMDIR} \
  && echo "Damaris Version: $DAMARIS_VERSION" \
  && git clone  --depth 1 --branch $DAMARIS_VERSION https://${GITLABUSERNAME}gitlab.inria.fr/Damaris/$repo.git \
  && mkdir -p ${INSTALLTMDIR}/build/$repo \
  && cd ${INSTALLTMDIR}/build/$repo \
  && cmake ../../$repo -DCMAKE_INSTALL_PREFIX:PATH=$INSTALL_PREFIX \
      -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
      -DCMAKE_CXX_COMPILER=${MPICXX_PATH} \
      -DCMAKE_C_COMPILER=${MPICC_PATH} \
      -DCMAKE_Fortran_COMPILER=${MPIFORT_PATH} \
      -DENABLE_TESTS=ON \
      -DENABLE_EXAMPLES=$EXAMPLES_ON_OFF \
      -DBUILD_SHARED_LIBS=$SHLIBS_ON_OFF \
      -DENABLE_PYTHON=OFF \
      -DENABLE_FORTRAN=ON \
      -DENABLE_CATALYST=OFF \
      -DGENERATE_MODEL=$REGEN_ON_OFF \
      -DENABLE_HDF5=ON  \
  && make -j${NUMCORES} \
  && make install 
  
RUN find ${INSTALL_PREFIX}/examples/ -type f -name *.xml  | xargs sed -i "s|<script>.*examples|<script>${INSTALL_PREFIX}/examples|"

# COPY --from=builder ${INSTALL_PREFIX}/ ${INSTALL_PREFIX}/
RUN  cp -r ${INSTALLTMDIR}/build/$repo/test/ ${INSTALL_PREFIX}/examples/test/ \
 && cp  ${INSTALLTMDIR}/build/$repo/CTestTestfile.cmake ${INSTALL_PREFIX}/examples/ \
 && sed -i "s|${INSTALLTMDIR}/build/$repo/|${INSTALL_PREFIX}/examples/|g" ${INSTALL_PREFIX}/examples/test/CTestTestfile.cmake
 
RUN rm -fr ${INSTALLTMDIR}

RUN chown -R docker:docker /home/docker


ENV PATH=/usr/local/bin:${PATH}
ENV LD_LIBRARY_PATH=/usr/local/bin:${LD_LIBRARY_PATH}
ENV PYTHONPATH=/usr/local/lib/python3.8/site-packages/_paraview.zip:/usr/local/lib/python3.8/site-packages/_vtk.zip:/usr/local/lib/python3.8/site-packages:/usr/lib/python38.zip:/usr/lib/python3.8:/usr/lib/python3.8/lib-dynload:/usr/local/lib/python3.8/dist-packages:/usr/lib/python3/dist-packages



# ########################################
# ## Stage 2 of build
# ########################################
# FROM centos:8 AS testing  

# RUN useradd docker \
	# && chown docker:docker /home/docker \
	# && groupadd staff \
    # && usermod -a -G staff docker
    


# # INPUT_repo is a global argument
# ARG INPUT_repo
# ENV repo=$INPUT_repo
# ENV INSTALLTMDIR=/home/docker/installdir

# RUN dnf -y install dnf-plugins-core \
   # && dnf config-manager --set-enabled powertools \
   # &&  dnf makecache --refresh \
   # &&  dnf update -y \
   # &&  dnf install -y epel-release \
   # &&  dnf install -y xerces-c-devel \
   # &&  dnf install -y xsd \
   # &&  dnf -y --enablerepo=powertools install cppunit-devel \
   # &&  dnf -y install redhat-rpm-config \
   # &&  dnf -y install hdf5-openmpi-devel \
   # hdf5-openmpi-static \
   # boost-devel \
   # git \
   # gcc-gfortran \
   # gcc-c++ \
   # openssl-devel \
   # libcurl-devel \
   # xz-devel \
   # nano \
   # wget \
   # cmake \
   # && cp /usr/bin/xsdcxx /usr/bin/xsd
  
# RUN dnf install -y mesa-libOSMesa-devel \
    # freeglut-devel \
    # ninja-build \
    # tbb-devel 
  
# # RUN apt-get install -y --no-install-recommends \ 
# #  	libpython3-dev \
# #   libpython3-dev libboost-python-dev libboost-numpy-dev \

# ENV INSTALL_PREFIX=/home/docker/local
# ENV MPI_BINDIR=/usr/lib64/openmpi/bin 
# ENV PATH=$INSTALL_PREFIX/bin:${MPI_BINDIR}:$PATH  
# ENV LD_LIBRARY_PATH=$INSTALL_PREFIX/lib:$INSTALL_PREFIX/lib64:$MPI_LIBDIR:$LD_LIBRARY_PATH


# COPY --from=builder /home/docker/local/ /home/docker/local/
# COPY --from=builder ${INSTALLTMDIR}/build/$repo/test/ /home/docker/local/examples/test/
# COPY --from=builder ${INSTALLTMDIR}/build/$repo/CTestTestfile.cmake /home/docker/local/examples/

# # Change the paths in the ctest unit test runner (CTestTestfile.cmake)
# RUN sed -i "s|${INSTALLTMDIR}/build/$repo/|/home/docker/local/examples/|g" /home/docker/local/examples/test/CTestTestfile.cmake

# RUN chown -R docker:docker /home/docker
# USER docker

# WORKDIR /home/docker/local/examples
 
CMD ["/bin/bash"]