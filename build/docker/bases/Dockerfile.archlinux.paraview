# syntax=docker/dockerfile:1

##################
# Author: Josh Bowden
# Company: Inria
# Date: 25/01/2022
#
# 
##################
#
## Usage of this file (standalone or automated via gitlab CI): 
# The gitlab.inria.fr/Damaris/damaris repo should build without the secret setup.
# 
# To build the damaris repo (no password needed):
# export TAG=v1.5.0
# export PV_VERSION=v5.9.1
# export PVSHORT=${PV_VERSION//./}
# sudo  DOCKER_BUILDKIT=1 docker build -t \
#            registry.gitlab.inria.fr/damaris/damaris:${TAG}-archlinux-p${PVSHORT} \
#            --build-arg INPUT_pv_ver=${PV_VERSION} \
#                -f ./Dockerfile.archlinux.paraview
#
#
# N.B. MY_CI_READ_REPO_PWD is the filename that contains the token for user 'gitlab-read-repo' 
# User 'gitlab-read-repo' is created in the 
# Settings -> Access tokens page
# and MY_CI_READ_REPO_PWD is a gitlab CI 'file' variable that contains a gitlab token
# just created and the variable is created in the 
# Settings -> CI/CD -> Variables page
#
###################
#
## To test the created docker image:
# 1/ Log in to the gitlab repository 
# N.B. You may need a ~/.docker/config.json file configured with an access token
# > docker login registry.gitlab.inria.fr
# 
# 2/ Use docker run as it does not leave the container running on exit and run Damaris tests:
#    Map the shared memory filesystem and the Paraview Catalyst port
# 
# > docker run --rm -v /dev/shm:/dev/shm -p 22222:22222 -it registry.gitlab.inria.fr/damaris/damaris:<branch>-<OS>-<Paraview_version> /bin/bash
# <container prompt> ctest
#
# > sudo docker run --rm -v /dev/shm:/dev/shm -p 22222:22222 -it registry.gitlab.inria.fr/damaris/damaris:v1.5.0-archlinux-pvv5100 /bin/bash
# > cd /home/docker/local/examples/storage/
# > mpirun -np 4 ./3dmesh 3dmesh.xml
######################################################################################


# This is a global arg that can be used in all stages of the build


########################################
## Stage 1 of build
########################################
FROM archlinux:base-devel AS builder
SHELL ["/bin/bash", "-c"]



RUN useradd -m --create-home -s /bin/bash docker \
	&& chown docker:docker /home/docker \
	&& groupadd staff \
    && usermod -a -G staff docker

RUN echo 'root:docker' | chpasswd
#RUN yes docker | passwd --stdin root

# Archlinux: https://archlinux.org/packages/community/x86_64/
# Dependencies for Damaris
RUN  yes | pacman -Syu xerces-c \
    xsd \
    cppunit \
    hdf5-openmpi \
    boost \
    boost-libs \
    git \
    openssl \
    curl \
    xz \
    nano \
    wget \
    cmake \
    python \
    python-mpi4py \
    python-numpy \
  && cp /usr/bin/xsdcxx /usr/bin/xsd \
  && yes | pacman -Scc


# Compile-time dependencies
# freeglut-devel is just for OpenGL headers,
# that should be found in the mesa install of Visit,
# but are not.
RUN yes | pacman -Syu   gcc gcc-fortran  \
       libtool m4 automake   \
       freeglut \
  && yes | pacman -Scc


# Archlinux: https://archlinux.org/packages/community/x86_64/paraview/
## For Paraview
RUN yes | pacman -Syu mesa \
    freeglut \
    ninja \
    tbb \
    libpng \
    cgns \
    libtiff \
    lz4 \
    libjpeg-turbo \
    jsoncpp \
    protobuf \
    zlib \
    double-conversion \
    gcc-fortran


RUN yes | pacman -Syu python python-mpi4py python-numpy



ENV INSTALL_PREFIX=/home/docker/local
# ENV MPI_BINDIR=/usr/bin
# ENV PATH=$INSTALL_PREFIX/bin:${MPI_BINDIR}:$PATH
ENV PATH=${INSTALL_PREFIX}/bin:${PATH}
ENV LD_LIBRARY_PATH=${INSTALL_PREFIX}/lib:${INSTALL_PREFIX}/lib64:${LD_LIBRARY_PATH}

ENV INSTALLTMDIR=/home/docker/installdir
ENV CMAKE_BUILD_TYPE=Release
ENV NUMCORES=4


ENV GL_INSTALL_PATH=/usr/lib
ENV GL_HEADER_PATH=/usr/include

ENV MPI_BINDIR=/usr/bin
ENV PATH=$INSTALL_PREFIX/bin:${MPI_BINDIR}:$PATH
# N.B. MPI_BINDIR=/usr/lib64/openmpi/bin has to be on the PATH
ENV MPICXX=$MPI_BINDIR/mpicxx
ENV MPICC=$MPI_BINDIR/mpicc
ENV MPIFORT=$MPI_BINDIR/mpifort

ENV GCC=/usr/bin/gcc
ENV GPP=/usr/bin/g++



USER docker



RUN   mkdir -p ${INSTALLTMDIR} \
  &&   cd ${INSTALLTMDIR} \
  &&   git clone  https://gitlab.kitware.com/paraview/paraview.git \
  &&   cd ${INSTALLTMDIR}/paraview   \
  &&   git fetch --all

ARG INPUT_pv_ver=v5.8.0
ENV PV_VERSION=$INPUT_pv_ver

RUN   cd ${INSTALLTMDIR}/paraview   \
  &&   git checkout ${PV_VERSION}  \
  &&   git submodule update --init --recursive \
  &&   mkdir -p ${INSTALLTMDIR}/build/pv \
  &&   cd ${INSTALLTMDIR}/build/pv   \
  &&   cmake -GNinja ../../paraview -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} \
       -DBUILD_TESTING=OFF \
       -DVTK_SMP_IMPLEMENTATION_TYPE=openmp \
       -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
       -DPARAVIEW_BUILD_EDITION=CATALYST \
       -DPARAVIEW_INSTALL_DEVELOPMENT_FILES=ON \
       -DPARAVIEW_USE_PYTHON=ON \
       -DPARAVIEW_BUILD_SHARED_LIBS=ON \
       -DPARAVIEW_USE_MPI=ON \
       -DPARAVIEW_USE_QT=OFF \
       -DVTK_USE_X=OFF \
       -DVTK_OPENGL_HAS_OSMESA=ON \
       -DPARAVIEW_USE_FORTRAN=OFF \
       -DOSMESA_INCLUDE_DIR=$GL_HEADER_PATH/include \
       -DOSMESA_LIBRARY=$GL_INSTALL_PATH/libOSMesa.so \
       || cat /home/docker/installdir/build/pv/CMakeFiles/*.log

RUN   cd ${INSTALLTMDIR}/build/pv  \
  && ninja -j${NUMCORES} \
  && ninja install \
  && rm -fr ${INSTALLTMDIR}
    
 
CMD ["/bin/bash"]
