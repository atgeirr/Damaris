# syntax=docker/dockerfile:1

##################
# Author: Josh Bowden
# Company: Inria
# Date: 25/01/2022
#
# This Dockerfile file can be built by gitlab on push to the 
# damaris-development repository. It works in concert with the .gitlab-ci.yml 
# file and a required gitlab-runner process that is currently running somewhere.
#
##################
##################
#
## Usage of this file (standalone or automated via gitlab CI): 
# The gitlab.inria.fr/Damaris/damaris repo should build without the secret setup.
# 
# To build the damaris repo (no password needed):
# export TAG=v1.5.0
# export PV_VERSION=v5.9.1
# export PVSHORT=${PV_VERSION//./}
# sudo  DOCKER_BUILDKIT=1 docker build -t \
#            registry.gitlab.inria.fr/damaris/damaris:${TAG}-opensuse-p${PVSHORT} \
#            --build-arg INPUT_pv_ver=${PV_VERSION} \
#                -f ./Dockerfile.opensuse.paraview .
#
#
###################
#
## To test the created docker image:
# 1/ Log in to the gitlab repository 
# N.B. You may need a ~/.docker/config.json file configured with an access token
# > docker login registry.gitlab.inria.fr
# 
# 2/ Use docker run as it does not leave the container running on exit and run Damaris tests:
#    Map the shared memory filesystem and the Paraview Catalyst port
# 
# > docker run --rm -v /dev/shm:/dev/shm -p 22222:22222 -it registry.gitlab.inria.fr/damaris/damaris:<branch>-<OS>-<Paraview_version> /bin/bash
# <container prompt> ctest
#
# > sudo docker run --rm -v /dev/shm:/dev/shm -p 22222:22222 -it registry.gitlab.inria.fr/damaris/damaris:v1.5.0-opensuse-pv5100 /bin/bash
# > cd /home/docker/local/examples/storage/
# > mpirun -np 4 ./3dmesh 3dmesh.xml
######################################################################################

########################################
## Stage 1 of build
########################################
FROM opensuse/leap:15.3 AS builder
SHELL ["/bin/bash", "-c"]


RUN useradd -m --create-home -s /bin/bash docker \
	&& groupadd staff \
    && groupadd docker \
    && usermod -a -G staff docker \
    && mkdir -p  /home/docker \
    && chown docker:docker /home/docker


# opensuse:hdf5-openmpi4-devel
# /usr/lib64/mpi/gcc/openmpi4/lib64/libhdf5.so
# /usr/lib64/mpi/gcc/openmpi4/bin/h5c++
# 


ENV INSTALL_PREFIX=/home/docker/local
ENV MPI_BINDIR=/usr/lib64/mpi/gcc/openmpi4/bin
ENV PATH=$INSTALL_PREFIX/bin:${MPI_BINDIR}:$PATH  
ENV LD_LIBRARY_PATH=$INSTALL_PREFIX/lib:$INSTALL_PREFIX/lib64:$MPI_LIBDIR:$LD_LIBRARY_PATH
ENV PATH=${INSTALL_PREFIX}/bin:${PATH}
ENV LD_LIBRARY_PATH=${INSTALL_PREFIX}/lib:${INSTALL_PREFIX}/lib64:${LD_LIBRARY_PATH}


# N.B. MPI_BINDIR=/usr/lib64/openmpi/bin has to be on the PATH
ENV MPICXX_PATH=$MPI_BINDIR/mpicxx
ENV MPICC_PATH=$MPI_BINDIR/mpicc
ENV MPIFORT_PATH=$MPI_BINDIR/mpifort

ENV INSTALLTMDIR=/home/docker/installdir
ENV CMAKE_BUILD_TYPE=Release
ENV NUMCORES=4

# ARG INPUT_pv_ver=5.8.0
# ENV PV_VERSION=$INPUT_pv_ver
# ENV PYTHON_INCLUDE_DIR=/usr/include/python3.8
ENV GL_INSTALL_PATH=/usr/lib
ENV GL_HEADER_PATH=/usr/include
# ENV PYTHON_INCLUDE_DIR=/usr/include/python3.8
# ENV GL_INSTALL_PATH=/usr/lib/x86_64-linux-gnu
# ENV GL_HEADER_PATH=/usr


# /usr/lib64/mpi/gcc/openmpi4/lib64/
# /usr/lib64/mpi/gcc/openmpi4/bin
# /usr/lib64/mpi/gcc/openmpi4/bin/mpicxx
# /usr/lib64/mpi/gcc/openmpi4/lib64/libmpi.so

## Good to look at: https://centos.pkgs.org/

## Install build tools and dependencies for Damaris
RUN zypper --non-interactive install libxerces-c-devel \
   &&  zypper -n install libxerces-c-devel \
   &&  zypper -n install -y xsd \
   &&  zypper -n install cppunit-devel \
   &&  zypper -n install gcc-fortran libboost*_75_0-devel \
   &&  zypper -n install openmpi4-devel \
   &&  zypper -n install hdf5-openmpi4-devel \
   &&  zypper -n install boost-gnu-openmpi4-hpc-python3 boost-gnu-openmpi4-hpc-devel \
   libgfortran5 \
   git-core \
   openssl-devel \
   libcurl-devel \
   xz-devel \
   nano \
   wget \
   cmake \
   && cp /usr/bin/xsdcxx /usr/bin/xsd

## For Paraview
RUN zypper --non-interactive install libOSMesa-devel \
    freeglut-devel \
    ninja \
    tbb-devel 

RUN zypper --non-interactive install python3-devel  

USER docker

 
RUN   mkdir -p ${INSTALLTMDIR} \
  &&   cd ${INSTALLTMDIR} \
  &&   git clone  https://gitlab.kitware.com/paraview/paraview.git \
  &&   cd ${INSTALLTMDIR}/paraview   \
  &&   git fetch --all 

ARG INPUT_pv_ver=v5.8.0
ENV PV_VERSION=$INPUT_pv_ver
  
RUN   cd ${INSTALLTMDIR}/paraview   \
  &&   git checkout ${PV_VERSION}  \
  &&   git submodule update --init --recursive \
  &&   mkdir -p ${INSTALLTMDIR}/build/pv \
  &&   cd ${INSTALLTMDIR}/build/pv   \
  &&   cmake -GNinja ../../paraview -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} \
       -DBUILD_TESTING=OFF \
       -DVTK_SMP_IMPLEMENTATION_TYPE=TBB \
       -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
       -DPARAVIEW_BUILD_EDITION=CATALYST \
       -DPARAVIEW_INSTALL_DEVELOPMENT_FILES=ON \
       -DPARAVIEW_USE_PYTHON=ON \
       -DPARAVIEW_BUILD_SHARED_LIBS=ON \
       -DPARAVIEW_USE_MPI=ON \
       -DPARAVIEW_USE_QT=OFF \
       -DVTK_USE_X=OFF \
       -DVTK_OPENGL_HAS_OSMESA=ON \
       -DPARAVIEW_USE_FORTRAN=OFF \
       -DOSMESA_INCLUDE_DIR=$GL_HEADER_PATH \
       -DOSMESA_LIBRARY=$GL_INSTALL_PATH/libOSMesa.so 
       
RUN   cd ${INSTALLTMDIR}/build/pv  \
  && ninja -j${NUMCORES} \
  && ninja install \
  && rm -fr ${INSTALLTMDIR}
  
 
CMD ["/bin/bash"]