# syntax=docker/dockerfile:1

##################
# Author: Josh Bowden
# Company: Inria
# Date: 25/01/2022
#
# This Dockerfile file can be built by gitlab on push to the 
# damaris-development repository. It works in concert with the .gitlab-ci.yml 
# file and a required gitlab-runner process that is currently running somewhere.
#
##################
##################
#
## Usage of this file (standalone or automated via gitlab CI): 
# The gitlab.inria.fr/Damaris/damaris repo should build without the secret setup.
# 
# To build the damaris repo (no password needed):
# export TAG=v1.5.0
# export PV_VERSION=v5.9.1
# export PVSHORT=${PV_VERSION//./}
# sudo  DOCKER_BUILDKIT=1 docker build -t \
#            registry.gitlab.inria.fr/damaris/damaris:${TAG}-opensuse-p${PVSHORT} \
#            --build-arg INPUT_pv_ver=${PV_VERSION} \
#                -f ./Dockerfile.opensuse.paraview .
#
#
###################
#
## To test the created docker image:
# 1/ Log in to the gitlab repository 
# N.B. You may need a ~/.docker/config.json file configured with an access token
# > docker login registry.gitlab.inria.fr
# 
# 2/ Use docker run as it does not leave the container running on exit and run Damaris tests:
#    Map the shared memory filesystem and the Paraview Catalyst port
#
# > sudo docker run --rm -v /dev/shm:/dev/shm -p 22222:22222 -it registry.gitlab.inria.fr/damaris/damaris:v1.5.0-opensuse-pv5100 /bin/bash
# > cd /home/docker/local/examples/storage/
# > mpirun -np 4 ./3dmesh 3dmesh.xml
######################################################################################

########################################
## Stage 1 of build
########################################
FROM opensuse/leap:15.3 AS builder
SHELL ["/bin/bash", "-c"]


RUN useradd -m --create-home -s /bin/bash docker \
    && groupadd staff \
    && groupadd docker \
    && usermod -a -G staff docker \
    && mkdir -p  /home/docker \
    && chown docker:docker /home/docker

RUN echo 'root:docker' | chpasswd
#RUN yes docker | passwd --stdin root



## Install build tools and dependencies for Damaris
RUN zypper --non-interactive install libxerces-c-devel \
   &&  zypper -n install -y xsd \
   &&  zypper -n install cppunit-devel \
   &&  zypper -n install libboost*_75_0-devel \
   &&  zypper -n install openmpi4-devel \
   &&  zypper -n install hdf5-openmpi4-devel \
   &&  zypper -n install boost-gnu-openmpi4-hpc-python3 boost-gnu-openmpi4-hpc-devel \
   libgfortran5 \
   git-core \
   openssl-devel \
   libcurl-devel \
   xz-devel \
   nano \
   wget \
   cmake \
   && cp /usr/bin/xsdcxx /usr/bin/xsd \
   && zypper clean --all

RUN zypper --non-interactive install python3-devel   \
   && zypper clean --all

# Compile-time dependencies
# freeglut-devel is just for OpenGL headers,
# that should be found in the mesa install of Visit,
# but are not.
RUN zypper --non-interactive install  gcc-c++ gcc-fortran  \
       libtool m4 automake   \
       freeglut-devel \
   && zypper clean --all

## For Visit
RUN zypper --non-interactive install hostname \
    libX11-devel libffi-devel libX11-xcb1 libxcb-dri2-0 libxcb-xfixes0 patch xz unzip glproto-devel libXext-devel libexpat-devel libXt-devel \
   && zypper clean --all


ENV INSTALL_PREFIX=/home/docker/local
ENV MPI_ROOT=/usr/lib64/mpi/gcc/openmpi4
ENV HDF5_ROOT=${MPI_ROOT}
# ENV MPI_BINDIR=/usr/lib64/openmpi/bin
ENV PATH=$INSTALL_PREFIX/bin:${MPI_ROOT}/bin:$INSTALL_PREFIX/visit/bin:$PATH
ENV LD_LIBRARY_PATH=$INSTALL_PREFIX/lib:$INSTALL_PREFIX/lib64:$MPI_ROOT/lib:$MPI_ROOT/lib64:$LD_LIBRARY_PATH
ENV PATH=${INSTALL_PREFIX}/bin:${PATH}
ENV LD_LIBRARY_PATH=${INSTALL_PREFIX}/lib:${INSTALL_PREFIX}/lib64:${LD_LIBRARY_PATH}


# N.B. MPI_ROOT=/usr/lib64/openmpi/bin has to be on the PATH
ENV MPICXX=$MPI_ROOT/bin/mpicxx
ENV MPICC=$MPI_ROOT/bin/mpicc
ENV MPIFORT=$MPI_ROOT/bin/mpifort

ENV GCC=/usr/bin/gcc
ENV GPP=/usr/bin/g++

ENV INSTALLTMDIR=/home/docker/installdir
ENV CMAKE_BUILD_TYPE=Release
ENV NUMCORES=4


ENV GL_INSTALL_PATH=/usr/lib
ENV GL_HEADER_PATH=/usr/include


USER docker


COPY --chown=docker:docker *.tar.gz ${INSTALLTMDIR}/
COPY --chown=docker:docker *.tar.xz ${INSTALLTMDIR}/
COPY --chown=docker:docker *.tgz ${INSTALLTMDIR}/
COPY --chown=docker:docker build_visit* ${INSTALLTMDIR}/



# Define INPUT_visit_ver with a default
ARG INPUT_visit_ver
ENV VISIT_VERSION=$INPUT_visit_ver


RUN VISIT_VER_UNDERSCORE=${VISIT_VERSION//./_} \
    && cd ${INSTALLTMDIR} \
    && mkdir ./third_party \
    && chmod +x build_visit${VISIT_VER_UNDERSCORE} \
    && sed -i 's|error "python library was not found, cannot configure python"|PYTHON_LIBRARY=$(pkg-config --libs python3-embed);  PYTHON_LIBRARY="lib${PYTHON_LIBRARY:2}.so" ; if [ ! -e "${PYTHON_LIBRARY_DIR}/${PYTHON_LIBRARY}" ] ; then  error "python library was not found, cannot configure python" ; fi|g' ./build_visit${VISIT_VER_UNDERSCORE} \
    && sed -i 's|vopts="${vopts} -DPYTHON_EXTRA_LIBS:STRING=${VTK_PY_LIBS}"|vopts="${vopts} -DPYTHON_EXTRA_LIBS:STRING=\\\"${VTK_PY_LIBS}\\\""|g' ./build_visit${VISIT_VER_UNDERSCORE} 


# N.B. cxxflag "-fpermissive" needed due to issue in VTK with Python3.7 and passing  char* when const char * is expected.
# No Visit, just dependencies
# This fails during VTK build as python is only available as python3
RUN VISIT_VER_UNDERSCORE=${VISIT_VERSION//./_} \
    && cd ${INSTALLTMDIR} \
    && export PAR_COMPILER=${MPICC} \
    && export PAR_COMPILER_CXX=${MPICXX} \
    && yes yes | ./build_visit${VISIT_VER_UNDERSCORE} --no-visit  --thirdparty-path ${INSTALL_PREFIX} --mesagl --llvm --server-components-only --stdout  --cc ${GCC} --cxx ${GPP} --cflags "-I${INSTALL_PREFIX}/include" --cxxflag "-Wno-class-memaccess -Wno-cast-function-type -fpermissive"  --makeflags -j${NUMCORES} --system-cmake --parallel --prefix $INSTALL_PREFIX/visit \
    || echo "We will try again 1"


################## N.B. The GCC version is hard codes #####################
ENV VISIT_PYTHON3=${INSTALL_PREFIX}/python/3.7.7/linux-x86_64_gcc-7.5
RUN ln -s ${VISIT_PYTHON3}/bin/python3 ${VISIT_PYTHON3}/bin/python
ENV PATH=${VISIT_PYTHON3}/bin:${PATH}
ENV LD_LIBRARY_PATH=${VISIT_PYTHON3}/lib:${VISIT_PYTHON3}/lib64:${LD_LIBRARY_PATH}

# Now finish dependencies and thentry to configure VisIt, and fail due to -fPic or some other flag
RUN VISIT_VER_UNDERSCORE=${VISIT_VERSION//./_} \
    && cd ${INSTALLTMDIR} \
    && export PAR_COMPILER=${MPICC} \
    && export PAR_COMPILER_CXX=${MPICXX} \
    && yes yes | ./build_visit${VISIT_VER_UNDERSCORE} --thirdparty-path ${INSTALL_PREFIX} --mesagl --llvm --server-components-only --stdout  --cc ${GCC} --cxx ${GPP}  --cflags "-I${INSTALL_PREFIX}/include" --cxxflags "-Wno-class-memaccess -Wno-cast-function-type "  --system-cmake --parallel --makeflags -j${NUMCORES}  --prefix $INSTALL_PREFIX/visit \
    || echo "We will try again 2b"

ENV HOSTNAME_DOCKER=buildkitsandbox

# buildkitsandbox.cmake
RUN rm -fr ${INSTALLTMDIR}/visit${VISIT_VERSION}/build \
  && mkdir -p ${INSTALLTMDIR}/visit${VISIT_VERSION}/build \
  && cd ${INSTALLTMDIR}/visit${VISIT_VERSION}/build \
  && sed -i "s|VISIT_OPTION_DEFAULT(VISIT_C_COMPILER ${GCC}|VISIT_OPTION_DEFAULT(VISIT_C_COMPILER ${MPICC}|g" ${INSTALLTMDIR}/$HOSTNAME_DOCKER.cmake \
  && sed -i "s|VISIT_OPTION_DEFAULT(VISIT_CXX_COMPILER ${GPP}|VISIT_OPTION_DEFAULT(VISIT_CXX_COMPILER ${MPICXX}|g" ${INSTALLTMDIR}/$HOSTNAME_DOCKER.cmake \
  && /usr/bin/cmake -DVISIT_CONFIG_SITE:FILEPATH=${INSTALLTMDIR}/$HOSTNAME_DOCKER.cmake -DVISIT_INSTALL_THIRD_PARTY:BOOL=ON -DVISIT_PARALLEL:BOOL=ON -DCMAKE_BUILD_TYPE:STRING=Release -DVISIT_C_COMPILER:FILEPATH=${MPICC_PATH} -DVISIT_CXX_COMPILER:FILEPATH=${MPICXX_PATH} -DVISIT_C_FLAGS:STRING=" -m64 -fPIC -I${INSTALL_PREFIX}/mesagl/17.3.9/linux-x86_64_gcc-7.5/include" -DVISIT_CXX_FLAGS:STRING=" -m64 -fPIC -I${INSTALL_PREFIX}/mesagl/17.3.9/linux-x86_64_gcc-7.5/include -Wno-class-memaccess -Wno-cast-function-type" -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PREFIX}/visit -DCPACK_INSTALL_PREFIX:PATH=${INSTALL_PREFIX}/visit -DCPACK_PACKAGING_INSTALL_PREFIX:PATH=${INSTALL_PREFIX}/visit -DVISIT_SERVER_COMPONENTS_ONLY:BOOL=ON ../src  \
  && make -j${NUMCORES} \
  && touch ./resources/help/en_US/manual \
  && make install

 
CMD ["/bin/bash"]
