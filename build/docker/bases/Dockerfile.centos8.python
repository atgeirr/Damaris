# syntax=docker/dockerfile:1

##################
# Author: Josh Bowden
# Company: Inria
# Date: 25/01/2022
#
# This Dockerfile file can be built by gitlab on push to the 
# damaris-development repository. It works in concert with the .gitlab-ci.yml 
# file and a required gitlab-runner process that is currently running somewhere.
#
##################
##################
#
## Usage of this file (standalone or automated via gitlab CI): 
# The gitlab.inria.fr/Damaris/damaris repo should build without the secret setup.
# 
# To build the damaris repo (no password needed):
# export TAG=v1.5.0
# export PV_VER=v5.9.0
# export PVSHORT=${PV_VERSION//./})
# sudo  DOCKER_BUILDKIT=1 docker build -t \
#            registry.gitlab.inria.fr/damaris/damaris:${TAG}-centos8-p${PVSHORT} \
#            --build-arg INPUT_pv_ver=${PV_VER} \
#                -f ./Dockerfile.centos8.paraview .
#
#
###################
#
## To test the created docker image:
# 1/ Log in to the gitlab repository 
# N.B. You may need a ~/.docker/config.json file configured with an access token
# > docker login registry.gitlab.inria.fr
# 
# 2/ Use docker run as it does not leave the container running on exit and run Damaris tests:
#    Map the shared memory filesystem and the Paraview Catalyst port
# 
# > docker run --rm -v /dev/shm:/dev/shm -p 22222:22222 -it registry.gitlab.inria.fr/damaris/damaris:<branch>-<OS>-<Paraview_version> /bin/bash
# <container prompt> ctest
#
# > sudo docker run --rm -v /dev/shm:/dev/shm -p 22222:22222 -it registry.gitlab.inria.fr/damaris/damaris:v1.5.0-centos8-pv5100 /bin/bash
# > cd /home/docker/local/examples/damaris/storage/
# > mpirun -np 4 ./3dmesh 3dmesh.xml
######################################################################################

########################################
## Stage 1 of build
########################################
FROM quay.io/centos/centos:stream8 AS builder
SHELL ["/bin/bash", "-c"]



RUN useradd docker \
	&& chown docker:docker /home/docker \
	&& groupadd staff \
    && usermod -a -G staff docker

## Good to look at: https://centos.pkgs.org/
RUN echo 'docker' | passwd --stdin root

## Install build tools and dependencies for Damaris
RUN dnf -y install dnf-plugins-core \
   && dnf config-manager --set-enabled powertools \
   &&  dnf makecache --refresh \
   &&  dnf update -y \
   &&  dnf install -y epel-release \
   &&  dnf install -y xerces-c-devel \
   &&  dnf install -y xsd \
   &&  dnf -y --enablerepo=powertools install cppunit-devel \
   &&  dnf -y install redhat-rpm-config \
   openmpi-devel \
   boost-devel \
   git \
   openssl-devel \
   libcurl-devel \
   xz-devel \
   nano \
   wget \
   cmake \
   && cp /usr/bin/xsdcxx /usr/bin/xsd


RUN  dnf -y install  gcc-gfortran gcc-c++

RUN  dnf -y --enablerepo=powertools install python3 python3-devel platform-python-devel boost-python3-devel

# RUN dnf -y install
#    &&  dnf -y install hdf5-openmpi-devel \
#   hdf5-openmpi-static \

RUN ln -s /usr/bin/python3 /usr/bin/python

ENV INSTALL_PREFIX=/home/docker/local
ENV PATH=${INSTALL_PREFIX}/bin:${PATH}
ENV LD_LIBRARY_PATH=${INSTALL_PREFIX}/lib:${INSTALL_PREFIX}/lib64:${LD_LIBRARY_PATH}

ENV INSTALLTMDIR=/home/docker/installdir
ENV CMAKE_BUILD_TYPE=Release
ENV NUMCORES=4

ENV GL_INSTALL_PATH=/usr/lib/x86_64-linux-gnu
ENV GL_HEADER_PATH=/usr

ENV MPI_ROOT=/usr

ENV MPICXX=$MPI_ROOT/bin/mpicxx
ENV MPICC=$MPI_ROOT/bin/mpicc
ENV MPIFORT=$MPI_ROOT/bin/mpifort


ENV GCC=/usr/bin/gcc
ENV GPP=/usr/bin/g++


USER docker

 
CMD ["/bin/bash"]
