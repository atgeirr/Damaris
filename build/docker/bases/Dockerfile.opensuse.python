# syntax=docker/dockerfile:1

##################
# Author: Josh Bowden
# Company: Inria
# Date: 25/01/2022
#
# This Dockerfile file can be built by gitlab on push to the 
# damaris-development repository. It works in concert with the .gitlab-ci.yml 
# file and a required gitlab-runner process that is currently running somewhere.
#
##################
##################
#
## Usage of this file (standalone or automated via gitlab CI): 
# The gitlab.inria.fr/Damaris/damaris repo should build without the secret setup.
# 
# To build the damaris repo (no password needed):
# export TAG=v1.5.0
# export PV_VERSION=v5.9.1
# export PVSHORT=${PV_VERSION//./}
# sudo  DOCKER_BUILDKIT=1 docker build -t \
#            registry.gitlab.inria.fr/damaris/damaris:${TAG}-opensuse-p${PVSHORT} \
#            --build-arg INPUT_pv_ver=${PV_VERSION} \
#                -f ./Dockerfile.opensuse.paraview .
#
#
###################
#
## To test the created docker image:
# 1/ Log in to the gitlab repository 
# N.B. You may need a ~/.docker/config.json file configured with an access token
# > docker login registry.gitlab.inria.fr
# 
# 2/ Use docker run as it does not leave the container running on exit and run Damaris tests:
#    Map the shared memory filesystem and the Paraview Catalyst port
#
# > sudo docker run --rm -v /dev/shm:/dev/shm -p 22222:22222 -it registry.gitlab.inria.fr/damaris/damaris:v1.5.0-opensuse-pv5100 /bin/bash
# > cd /home/docker/local/examples/damaris/storage/
# > mpirun -np 4 ./3dmesh 3dmesh.xml
######################################################################################

########################################
## Stage 1 of build
########################################
FROM opensuse/leap:15.3 AS builder
SHELL ["/bin/bash", "-c"]


RUN useradd -m --create-home -s /bin/bash docker \
    && groupadd staff \
    && groupadd docker \
    && usermod -a -G staff docker \
    && mkdir -p  /home/docker \
    && chown docker:docker /home/docker

RUN echo 'root:docker' | chpasswd
#RUN yes docker | passwd --stdin root



## Install build tools and dependencies for Damaris
RUN zypper --non-interactive install libxerces-c-devel \
   &&  zypper -n install -y xsd \
   &&  zypper -n install cppunit-devel \
   &&  zypper -n install libboost*_75_0-devel \
   &&  zypper -n install openmpi4-devel \
   libgfortran5 \
   git-core \
   openssl-devel \
   libcurl-devel \
   xz-devel \
   nano \
   wget \
   cmake \
   && cp /usr/bin/xsdcxx /usr/bin/xsd \
   && zypper clean --all

RUN zypper --non-interactive install python3-devel   \
   && zypper clean --all

# RUN zypper --non-interactive install hdf5-openmpi4-devel 
   
RUN zypper --non-interactive install boost-gnu-openmpi4-hpc-python3 \
   boost-gnu-openmpi4-hpc-devel
   
   
ENV INSTALL_PREFIX=/home/docker/local
ENV MPI_ROOT=/usr/lib64/mpi/gcc/openmpi4
# ENV HDF5_ROOT=${MPI_ROOT}

ENV PATH=$INSTALL_PREFIX/bin:${MPI_ROOT}/bin:$INSTALL_PREFIX/visit/bin:$PATH
ENV LD_LIBRARY_PATH=$INSTALL_PREFIX/lib:$INSTALL_PREFIX/lib64:$MPI_ROOT/lib:$MPI_ROOT/lib64:$LD_LIBRARY_PATH
ENV PATH=${INSTALL_PREFIX}/bin:${PATH}
ENV LD_LIBRARY_PATH=${INSTALL_PREFIX}/lib:${INSTALL_PREFIX}/lib64:${LD_LIBRARY_PATH}


# N.B. MPI_ROOT=/usr/lib64/openmpi/bin has to be on the PATH
ENV MPICXX=$MPI_ROOT/bin/mpicxx
ENV MPICC=$MPI_ROOT/bin/mpicc
ENV MPIFORT=$MPI_ROOT/bin/mpifort

ENV GCC=/usr/bin/gcc
ENV GPP=/usr/bin/g++

ENV INSTALLTMDIR=/home/docker/installdir
ENV CMAKE_BUILD_TYPE=Release
ENV NUMCORES=4


ENV GL_INSTALL_PATH=/usr/lib
ENV GL_HEADER_PATH=/usr/include


USER docker
 
 
CMD ["/bin/bash"]
