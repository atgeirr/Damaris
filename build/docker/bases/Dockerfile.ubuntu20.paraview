# syntax=docker/dockerfile:1
## Usage of this file (standalone or automated via gitlab CI): 
# The gitlab.inria.fr/Damaris/damaris repo should build without the secret setup.
# 
# To build the damaris repo (no password needed):
# export TAG=v1.5.0
# export PV_VERSION=v5.9.0
# export PVSHORT=$(echo $PV_VERSION | sed 's|\.||g')
# sudo  DOCKER_BUILDKIT=1 docker build -t \
#            registry.gitlab.inria.fr/damaris/damaris:${TAG}-ubu20-p${PVSHORT} \
#            --build-arg INPUT_pv_ver=${PV_VERSION} \
#                -f ./Dockerfile.ubuntu20.paraview .
# 
# mpirun -np 4 singularity exec ubuntu20_paraview58  /usr/local/damaris/examples/paraview/image /usr/local/damaris/examples/paraview/image.xml
###################
#
## To test the created docker image:
# 1/ Log in to the gitlab repository 
# N.B. You may need a ~/.docker/config.json file configured with an access token
# > docker login registry.gitlab.inria.fr
# 
# 2/ Use docker run as it does not leave the container running on exit and run Damaris tests:
#    Map the shared memory filesystem and the Paraview Catalyst port
# 
# > docker run --rm -v /dev/shm:/dev/shm -p 22222:22222 -it registry.gitlab.inria.fr/damaris/damaris:<branch>-<OS>-<Paraview_version> /bin/bash
# <container prompt> ctest
#
# > sudo docker run --rm -v /dev/shm:/dev/shm -p 22222:22222 -it registry.gitlab.inria.fr/damaris/damaris:v1.5.0-ubu20-pv590 /bin/bash
# > cd /home/docker/local/examples/damaris/storage/
# > mpirun -np 4 ./3dmesh 3dmesh.xml
######################################################################################

########################################
## Stage 1 of build
########################################
FROM ubuntu:20.04 AS builder
SHELL ["/bin/bash", "-c"]

USER root

RUN useradd docker \
	&& mkdir /home/docker \
	&& chown docker:docker /home/docker \
	&& addgroup docker staff

# RUN yes docker | passwd --stdin root
RUN echo 'root:docker' | chpasswd

RUN apt-get update -y \
  && echo "debconf debconf/frontend select Noninteractive" | debconf-set-selections \
  && apt-get install -y --no-install-recommends \
    apt-utils \
    pkg-config \
    git-core \
    cmake \
    wget unzip nano \
	libhdf5-openmpi-dev \
    libboost-all-dev \
	libpython3-dev  \
	libxerces-c-dev  \
	xsdcxx \
    libcppunit-dev \
	hdf5-tools \
  && apt-get clean \
  && ln -s /usr/bin/xsdcxx /usr/bin/xsd 


RUN  apt-get install -y --no-install-recommends \
	software-properties-common \
    build-essential \
    gfortran \
  && apt-get clean



# Extras for Paraview install
RUN apt-get install -y  --no-install-recommends  \
    libosmesa6-dev \
    mesa-common-dev \
    mesa-utils \
    freeglut3-dev \
    python3-numpy \
    ninja-build \
    libtbb-dev \
  && apt-get clean



RUN ln -s /usr/bin/python3 /usr/bin/python  || echo "python already linked to python3"



ENV INSTALL_PREFIX=/home/docker/local
ENV PATH=${INSTALL_PREFIX}/bin:${PATH}
ENV LD_LIBRARY_PATH=${INSTALL_PREFIX}/lib:${INSTALL_PREFIX}/lib64:${LD_LIBRARY_PATH}

ENV INSTALLTMDIR=/home/docker/installdir
ENV CMAKE_BUILD_TYPE=Release
ENV NUMCORES=4

ENV GL_INSTALL_PATH=/usr/lib/x86_64-linux-gnu
ENV GL_HEADER_PATH=/usr

#ENV MPI_ROOT=/usr/lib64/mpi/gcc/openmpi4
ENV MPI_ROOT=/usr

ENV MPICXX=$MPI_ROOT/bin/mpicxx
ENV MPICC=$MPI_ROOT/bin/mpicc
ENV MPIFORT=$MPI_ROOT/bin/mpifort

USER docker


###### Install ParaView -
# N.B. The version installed here must match exactly the version of Paraview used to connect to the simulation via Catalyst
# -DPARAVIEW_BUILD_EDITION=CATALYST_RENDERING includes more (for rendering screen shots), but may not be needed
# see https://www.kitware.com/paraview-catalyst-editions-what-are-they/ for some more details
RUN   mkdir -p ${INSTALLTMDIR} \
  &&   cd ${INSTALLTMDIR} \
  &&   git clone  https://gitlab.kitware.com/paraview/paraview.git \
  &&   cd ${INSTALLTMDIR}/paraview   \
  &&   git fetch --all

ARG INPUT_pv_ver=v5.8.0
ENV PV_VERSION=$INPUT_pv_ver

RUN   cd ${INSTALLTMDIR}/paraview   \
  &&   git checkout ${PV_VERSION}  \
  &&   git submodule update --init --recursive \
  &&   mkdir -p ${INSTALLTMDIR}/build/pv \
  &&   cd ${INSTALLTMDIR}/build/pv   \
  &&   cmake -GNinja ../../paraview -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} \
       -DBUILD_TESTING=OFF \
       -DVTK_SMP_IMPLEMENTATION_TYPE=TBB \
       -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
       -DPARAVIEW_BUILD_EDITION=CATALYST \
       -DPARAVIEW_INSTALL_DEVELOPMENT_FILES=ON \
       -DPARAVIEW_USE_PYTHON=ON \
       -DPARAVIEW_BUILD_SHARED_LIBS=ON \
       -DPARAVIEW_USE_MPI=ON \
       -DPARAVIEW_USE_QT=OFF \
       -DVTK_USE_X=OFF \
       -DVTK_OPENGL_HAS_OSMESA=ON \
       -DPARAVIEW_USE_FORTRAN=OFF \
       -DOSMESA_INCLUDE_DIR=$GL_HEADER_PATH/include \
       -DOSMESA_LIBRARY=$GL_INSTALL_PATH/libOSMesa.so

RUN   cd ${INSTALLTMDIR}/build/pv  \
  && ninja -j${NUMCORES} \
  && ninja install \
  && rm -fr ${INSTALLTMDIR}

  
 
CMD ["/bin/bash"]
