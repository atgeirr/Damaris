# syntax=docker/dockerfile:1
## Usage of this file (standalone or automated via gitlab CI): 
#
# This is a base image definition on which to build Damaris
# 
# Visit builds use a multi-stage build so as to get some information 
# about the compiler and architecture being used
# 
#   ## Build stage 1
#   DOCKER_IMAGE_BASENAME=registry.gitlab.inria.fr/damaris/damaris-development
#   DOCKERFILE=debian11
#   DOCKER_BUILDKIT=1 docker build --progress=plain\
#     --target base_builder   \
#     -t  ${DOCKER_IMAGE_BASENAME}:${TAG} \
#     --build-arg INPUT_visit_ver=${VISIT_VERSION} \
#     -f ./Dockerfile.$DOCKERFILE.visit .
#
#   docker run --rm -it ${DOCKER_IMAGE_BASENAME}:${TAG} cat /home/docker/vist_arch.txt > ./vist_arch.txt
#   VISTARCH=$(cat ./vist_arch.txt)
#   echo "VISTARCH: $VISTARCH"

#  ## Build stage 2
#  DOCKER_BUILDKIT=1 docker build --progress=plain \
#     --target visit_builder   \
#     -t  ${DOCKER_IMAGE_BASENAME}:${TAG} \
#     --build-arg INPUT_visit_ver=${VISIT_VERSION} \
#     --build-arg  INPUT_os_arch_compiler_ver=$VISTARCH \
#     -f ./Dockerfile.$DOCKERFILE.visit .
# 
###################

# This is a global arg that can be used in all stages of the build
ARG INPUT_visit_ver

########################################
## Stage 1 of build
########################################
FROM debian:11 AS base_builder
SHELL ["/bin/bash", "-c"]

USER root

RUN useradd docker \
	&& mkdir /home/docker \
	&& chown docker:docker /home/docker \
	&& addgroup docker staff


# RUN yes docker | passwd --stdin root
RUN echo 'root:docker' | chpasswd

RUN apt-get update -y \
  && echo "debconf debconf/frontend select Noninteractive" | debconf-set-selections \
  && apt-get install -y --no-install-recommends \
    apt-utils \
    pkg-config \
    git-core \
    cmake \
    wget unzip nano \
	libhdf5-openmpi-dev \
    libboost-all-dev \
	libpython3-dev  \
	libxerces-c-dev  \
	xsdcxx \
    libcppunit-dev \
	hdf5-tools \
  && apt-get clean \
  && ln -s /usr/bin/xsdcxx /usr/bin/xsd


RUN apt-get install -y --no-install-recommends \
	software-properties-common \
    build-essential \
    gfortran \
  && apt-get clean


# Extras for visit install
RUN apt-get install -y --no-install-recommends \
    hostname patch \
    x11proto-dev   \
    xz-utils libtool m4 automake \
    libx11-dev xorg-dev  libx11-xcb-dev libxcb-dri2-0-dev  \
    libxcb-xfixes0-dev \
    libffi-dev \
  && apt-get clean



RUN ln -s /usr/bin/python3 /usr/bin/python  || echo "python already linked to python3"
# RUN yes docker | passwd --stdin root


ENV INSTALL_PREFIX=/home/docker/local
ENV PATH=${INSTALL_PREFIX}/bin:${PATH}
ENV LD_LIBRARY_PATH=${INSTALL_PREFIX}/lib:${INSTALL_PREFIX}/lib64:${LD_LIBRARY_PATH}

ENV INSTALLTMDIR=/home/docker/installdir
ENV CMAKE_BUILD_TYPE=Release
ENV NUMCORES=4

ENV GL_INSTALL_PATH=/usr/lib/x86_64-linux-gnu
ENV GL_HEADER_PATH=/usr

#ENV MPI_ROOT=/usr/lib64/mpi/gcc/openmpi4
ENV MPI_ROOT=/usr

ENV MPICXX=$MPI_ROOT/bin/mpicxx
ENV MPICC=$MPI_ROOT/bin/mpicc
ENV MPIFORT=$MPI_ROOT/bin/mpifort


ENV GCC=/usr/bin/gcc
ENV GPP=/usr/bin/g++

USER docker


COPY --chown=docker:docker *.tar.gz ${INSTALLTMDIR}/
COPY --chown=docker:docker *.tar.xz ${INSTALLTMDIR}/
COPY --chown=docker:docker *.tgz ${INSTALLTMDIR}/
COPY --chown=docker:docker build_visit* ${INSTALLTMDIR}/


ARG INPUT_visit_ver
ENV VISIT_VERSION=$INPUT_visit_ver


RUN cd /home/docker \
  && export VISIT_VER_UNDERSCORE=${VISIT_VERSION//./_} \
  && env -i /bin/bash \
  && source ${INSTALLTMDIR}/build_visit${VISIT_VER_UNDERSCORE}_to_source \
  && initialize_build_visit \
  && echo $VISITARCHTMP > vist_arch.txt 

# Now we need to copy vist_arch.txt  from the container and use its contents as
# an arg to stage 2 "INPUT_os_arch_compiler_ver"
  


####################################
## Second stage of build - Build Visit
####################################
FROM base_builder AS visit_builder
SHELL ["/bin/bash", "-c"]
 

# GCCVERSION=$(g++ -v 2>&1 | grep "gcc version" | awk '{ print $3 }' | sed 's|\.[^.]*$||')
ARG INPUT_os_arch_compiler_ver
ENV VISIT_ARCH=$INPUT_os_arch_compiler_ver

# N.B. Could set: --arch "" as it would remove the "linux-x86_64_gcc-X.Y"
ENV VISIT_PYTHON3=${INSTALL_PREFIX}/python/3.7.7/${VISIT_ARCH}
ENV PATH=${VISIT_PYTHON3}/bin:${PATH}
ENV LD_LIBRARY_PATH=${VISIT_PYTHON3}/lib:${VISIT_PYTHON3}/lib64:${LD_LIBRARY_PATH}

ENV PAR_COMPILER=${MPICC}
ENV PAR_COMPILER_CXX=${MPICXX}
ENV HOSTNAME_DOCKER=buildkitsandbox

# Define INPUT_visit_ver with a default
ARG INPUT_visit_ver
ENV VISIT_VERSION=$INPUT_visit_ver



# This is a multi-stage RUN command that is required as the build_vist script is not so robust.
# The initial sed is needed to fix how the build_visit script finds Python on Ubuntu 20
# The first "We will try again 1" is needed as Mesa does not find Python (this may be related to the initial sed commands above?)
# The second "We will try again 2" is needed as the build_visit script does not run cmake correctly - seems to have issues with quotations of multiple value arguments.
# The final sed commands swap the gcc versions for the mpicc versions in the cmake config file (even though PAR_COMPILER is set correctly)
# N.B. Flags can be added to ./build_visit${VISIT_VER_UNDERSCORE} to minimise warnings from LLVM:
# --cflags "-Wno-class-memaccess -Wno-cast-function-type -fcommon" --cxxflags "-Wno-class-memaccess -Wno-cast-function-type -fcommon"
# And -fcommon is needed for ggc >= 10 for Mesa compilation.
RUN export VISIT_VER_UNDERSCORE=${VISIT_VERSION//./_} \
    && cd ${INSTALLTMDIR} \
    && mkdir ./third_party \
    && chmod +x build_visit${VISIT_VER_UNDERSCORE} \
    && sed -i 's|error "python library was not found, cannot configure python"|PYTHON_LIBRARY=$(pkg-config --libs python3-embed);  PYTHON_LIBRARY="lib${PYTHON_LIBRARY:2}.so" ; if [ ! -e "${PYTHON_LIBRARY_DIR}/${PYTHON_LIBRARY}" ] ; then  error "python library was not found, cannot configure python" ; fi|g' ./build_visit${VISIT_VER_UNDERSCORE} \
    && sed -i 's|vopts="${vopts} -DPYTHON_EXTRA_LIBS:STRING=${VTK_PY_LIBS}"|vopts="${vopts} -DPYTHON_EXTRA_LIBS:STRING=\\\"${VTK_PY_LIBS}\\\""|g' ./build_visit${VISIT_VER_UNDERSCORE} \
    && yes yes | ./build_visit${VISIT_VER_UNDERSCORE}  --thirdparty-path ${INSTALL_PREFIX} --mesagl --llvm --server-components-only --stdout  --cc ${GCC}  --cxx ${GPP}   --makeflags -j${NUMCORES} --system-cmake --parallel  --arch "" --prefix $INSTALL_PREFIX/visit  \
    || echo "We will try again 1" \
    && ln -s ${VISIT_PYTHON3}/bin/python3 ${VISIT_PYTHON3}/bin/python \
    && yes yes | ./build_visit${VISIT_VER_UNDERSCORE} --thirdparty-path ${INSTALL_PREFIX} --mesagl --llvm --server-components-only --stdout  --cc ${GCC}  --cxx ${GPP}  --makeflags -j${NUMCORES} --system-cmake --parallel  --arch "" --prefix $INSTALL_PREFIX/visit  \
    || echo "We will try again 2" \
    && rm -fr ${INSTALLTMDIR}/visit${VISIT_VERSION}/build \
    && mkdir -p ${INSTALLTMDIR}/visit${VISIT_VERSION}/build \
    && cd ${INSTALLTMDIR}/visit${VISIT_VERSION}/build \
    && sed -i "s|VISIT_OPTION_DEFAULT(VISIT_C_COMPILER ${GCC}|VISIT_OPTION_DEFAULT(VISIT_C_COMPILER ${MPICC}|g" ${INSTALLTMDIR}/$HOSTNAME_DOCKER.cmake \
    && sed -i "s|VISIT_OPTION_DEFAULT(VISIT_CXX_COMPILER ${GPP}|VISIT_OPTION_DEFAULT(VISIT_CXX_COMPILER ${MPICXX}|g" ${INSTALLTMDIR}/$HOSTNAME_DOCKER.cmake \
    && /usr/bin/cmake -DVISIT_CONFIG_SITE:FILEPATH=/home/docker/installdir/buildkitsandbox.cmake -DVISIT_INSTALL_THIRD_PARTY:BOOL=ON -DVISIT_PARALLEL:BOOL=ON -DCMAKE_BUILD_TYPE:STRING=Release -DVISIT_C_COMPILER:FILEPATH=${MPICC} -DVISIT_CXX_COMPILER:FILEPATH=${MPICXX}  -DVISIT_C_FLAGS:STRING=" -m64 -fPIC -I${INSTALL_PREFIX}/include" -DVISIT_CXX_FLAGS:STRING=" -m64 -fPIC -I${INSTALL_PREFIX}/include " -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PREFIX}/visit -DCPACK_INSTALL_PREFIX:PATH=${INSTALL_PREFIX}/visit -DCPACK_PACKAGING_INSTALL_PREFIX:PATH=${INSTALL_PREFIX}/visit -DVISIT_SERVER_COMPONENTS_ONLY:BOOL=ON ../src  \
    && make -j${NUMCORES} \
    && touch ./resources/help/en_US/manual \
    && make install \
    || echo "We will try again 3" \
    && rm -fr ${INSTALLTMDIR} 
    
ENV PATH=${INSTALL_PREFIX}/visit/bin:${PATH}

RUN visit -env -engine > ~/tmp.txt \
   && sed -i 's|^|export |g' ~/tmp.txt \
   && sed -i 's|^export LD_LIBRARY_PATH.*|&$LD_LIBRARY_PATH|' ~/tmp.txt  \
   && cat ~/tmp.txt >> ~/.bashrc


  
CMD ["/bin/bash"]
