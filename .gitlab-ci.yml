# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Docker.gitlab-ci.yml

# Build a Docker image with CI/CD and push to the GitLab registry.
# Docker-in-Docker documentation: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
#
# This template uses one generic job with conditional builds
# for the default branch and all other (MR) branches.

# N.B. to use the CI_REGISTRY_USER and CI_REGISTRY_PASSWORD variables we must have an access token
# created under the name of "gitlab-deploy-token" with access rights to the gitlab docker registry
# and then gitlab can use the registry for this runner.
  
docker-build:
  # Use the official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker system prune -f
    # This code section is needed to get access to a specific machine (MY_CI_REMOTETEST_HOST) which 
    # is on Grid5000. The gitlab-runner needs to be running on a machine in grid5000.fr or connected 
    # to it via VPN.
    - 'command -v ssh-agent >/dev/null || ( apk --update add openssh-client )'
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # This fails for public site:- echo -e "$MY_CI_SSH_KEY_VAR" | base64 -d |  ssh-add -
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config 
    # Instead of "StrictHostKeyChecking no" you could try the following:
    # - ssh-keyscan example.com >> ~/.ssh/known_hosts
     
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = ':latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - |
      if [[ -f CI_ON_OFF ]] ; then
        DOCI=$(cat CI_ON_OFF)
        echo "INFO The contents of CI_ON_OFF is $DOCI"
      fi
      if [[ "$DOCI" != "OFF" ]] ; then
      
        cd build/docker/damaris
        apk add --no-cache bash 
        ## build and test Paraview base image builds
        ./build_damaris_on_paraview_base_images.sh  $CI_PROJECT_NAME  $CI_COMMIT_BRANCH  $MY_CI_READ_REPO_PWD | tee build_damaris_on_paraview_base_images.graph
        ./test_damaris_paraview_images.sh   $CI_PROJECT_NAME  $CI_COMMIT_BRANCH  "ctest --output-on-failure" | tee -a build_damaris_on_paraview_base_images.graph
        cat build_damaris_on_paraview_base_images.graph | grep "^GRAPH:" | sed "s|GRAPH:||g" > build_damaris_on_paraview_base_images.md
    
        docker rmi $(docker images | grep pv5 | awk '{ print $3 }')
        docker system prune -f
    
        ## build and test VisIt base image builds
        ./build_damaris_on_visit_base_images.sh  $CI_PROJECT_NAME  $CI_COMMIT_BRANCH  $MY_CI_READ_REPO_PWD | tee build_damaris_on_visit_base_images.graph
        ./test_damaris_visit_images.sh   $CI_PROJECT_NAME  $CI_COMMIT_BRANCH  "ctest --output-on-failure" | tee -a build_damaris_on_visit_base_images.graph
        cat build_damaris_on_visit_base_images.graph | grep "^GRAPH:" | sed "s|GRAPH:||g" > build_damaris_on_visit_base_images.md
    
        docker rmi $(docker images | grep visit | awk '{ print $3 }')
        docker system prune -f
    
        ## build and test Python and No dependencies version (no HDF5) base image builds
        ./build_damaris_on_python_base_images.sh  $CI_PROJECT_NAME  $CI_COMMIT_BRANCH  $MY_CI_READ_REPO_PWD | tee build_damaris_on_python_base_images.graph
        ./test_damaris_python_images.sh   $CI_PROJECT_NAME  $CI_COMMIT_BRANCH  "ctest --output-on-failure" | tee -a build_damaris_on_python_base_images.graph
        cat build_damaris_on_python_base_images.graph | grep "^GRAPH:" | sed "s|GRAPH:||g" > build_damaris_on_python_base_images.md
    
        ## The following command could be used to run ReFrame tests (once developed)
        # - ssh jbowden@"$MY_CI_REMOTETEST_HOST"  'bash -s' < ../../test/run_on_remote.sh
    
        ## Pushing data directly to Wiki (does not work)
        # - apk add --no-cache curl
        # - DATA=$(cat build_damaris_on_paraview_base_images.md)
        # - curl  -X GET  --header "PRIVATE-TOKEN:  $CI_JOB_TOKEN"  "https://gitlab.inria.fr/api/v4/projects/Damaris%2Fdamaris-development/wikis/Build-success-table"
        # - curl  --request PUT --data "format=markdown&content=$DATA&title=Build-success-table"  --header "PRIVATE-TOKEN:  $CI_JOB_TOKEN"  "https://gitlab.inria.fr/api/v4/projects/Damaris%2Fdamaris-development/wikis/Build-success-table"
    
        # - rm *.graph 
        cat build_damaris_on_paraview_base_images.md
        cat build_damaris_on_visit_base_images.md
        cat build_damaris_on_python_base_images.md
      else
        echo ""
        echo "WARNING file CI_ON_OFF has CI builds set to OFF. Set file contents to ON to run Gitlab-CI"
        echo ""
        touch build_damaris_on_paraview_base_images.md
        touch build_damaris_on_visit_base_images.md
        touch build_damaris_on_python_base_images.md
      fi
  # Run this job in a branch where a Dockerfile exists
  timeout: 5h 00m
#  rules:
#    - if:
#      exists:
#        - build/docker/damaris/build_damaris_on_paraview_base_images.sh
  only:
    changes:
      - .gitlab-ci.yml
      - src/**/*
      - include/**/*
      - examples/**/*
      - test/*
      - build/docker/bases/*
      - build/docker/damaris/*
  artifacts:
    when: always
    name: table-of-successfull-builds-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
    paths: 
      - build/docker/damaris/build_damaris_on_paraview_base_images.md
      - build/docker/damaris/build_damaris_on_visit_base_images.md
      - build/docker/damaris/build_damaris_on_python_base_images.md
  #  reports:
  #    junit: report.xml

