// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
/*******************************************************************
This file is part of Damaris.

Damaris is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Damaris is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Damaris.  If not, see <http://www.gnu.org/licenses/>.
********************************************************************/
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Model.hpp"

namespace Damaris
{
  namespace Model
  {
    // ClientsModel
    // 

    const ClientsModel::count_type& ClientsModel::
    count () const
    {
      return this->count_.get ();
    }

    ClientsModel::count_type& ClientsModel::
    count ()
    {
      return this->count_.get ();
    }

    void ClientsModel::
    count (const count_type& x)
    {
      this->count_.set (x);
    }


    // CoresModel
    // 

    const CoresModel::clients_type& CoresModel::
    clients () const
    {
      return this->clients_.get ();
    }

    CoresModel::clients_type& CoresModel::
    clients ()
    {
      return this->clients_.get ();
    }

    void CoresModel::
    clients (const clients_type& x)
    {
      this->clients_.set (x);
    }

    void CoresModel::
    clients (::std::auto_ptr< clients_type > x)
    {
      this->clients_.set (x);
    }

    const CoresModel::count_type& CoresModel::
    count () const
    {
      return this->count_.get ();
    }

    CoresModel::count_type& CoresModel::
    count ()
    {
      return this->count_.get ();
    }

    void CoresModel::
    count (const count_type& x)
    {
      this->count_.set (x);
    }


    // ShmType
    // 

    ShmType::
    ShmType (value v)
    : ::xml_schema::string (_xsd_ShmType_literals_[v])
    {
    }

    ShmType::
    ShmType (const char* v)
    : ::xml_schema::string (v)
    {
    }

    ShmType::
    ShmType (const ::std::string& v)
    : ::xml_schema::string (v)
    {
    }

    ShmType::
    ShmType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    ShmType::
    ShmType (const ShmType& v,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    ShmType& ShmType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_ShmType_literals_[v]);

      return *this;
    }


    // BufferModel
    // 

    const BufferModel::name_type& BufferModel::
    name () const
    {
      return this->name_.get ();
    }

    BufferModel::name_type& BufferModel::
    name ()
    {
      return this->name_.get ();
    }

    void BufferModel::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void BufferModel::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }

    const BufferModel::size_type& BufferModel::
    size () const
    {
      return this->size_.get ();
    }

    BufferModel::size_type& BufferModel::
    size ()
    {
      return this->size_.get ();
    }

    void BufferModel::
    size (const size_type& x)
    {
      this->size_.set (x);
    }

    const BufferModel::type_type& BufferModel::
    type () const
    {
      return this->type_.get ();
    }

    BufferModel::type_type& BufferModel::
    type ()
    {
      return this->type_.get ();
    }

    void BufferModel::
    type (const type_type& x)
    {
      this->type_.set (x);
    }

    void BufferModel::
    type (::std::auto_ptr< type_type > x)
    {
      this->type_.set (x);
    }

    const BufferModel::type_type& BufferModel::
    type_default_value ()
    {
      return type_default_value_;
    }

    const BufferModel::blocks_type& BufferModel::
    blocks () const
    {
      return this->blocks_.get ();
    }

    BufferModel::blocks_type& BufferModel::
    blocks ()
    {
      return this->blocks_.get ();
    }

    void BufferModel::
    blocks (const blocks_type& x)
    {
      this->blocks_.set (x);
    }

    BufferModel::blocks_type BufferModel::
    blocks_default_value ()
    {
      return blocks_type (0);
    }


    // QueueModel
    // 

    const QueueModel::name_type& QueueModel::
    name () const
    {
      return this->name_.get ();
    }

    QueueModel::name_type& QueueModel::
    name ()
    {
      return this->name_.get ();
    }

    void QueueModel::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void QueueModel::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }

    const QueueModel::size_type& QueueModel::
    size () const
    {
      return this->size_.get ();
    }

    QueueModel::size_type& QueueModel::
    size ()
    {
      return this->size_.get ();
    }

    void QueueModel::
    size (const size_type& x)
    {
      this->size_.set (x);
    }

    const QueueModel::type_type& QueueModel::
    type () const
    {
      return this->type_.get ();
    }

    QueueModel::type_type& QueueModel::
    type ()
    {
      return this->type_.get ();
    }

    void QueueModel::
    type (const type_type& x)
    {
      this->type_.set (x);
    }

    void QueueModel::
    type (::std::auto_ptr< type_type > x)
    {
      this->type_.set (x);
    }

    const QueueModel::type_type& QueueModel::
    type_default_value ()
    {
      return type_default_value_;
    }


    // ArchitectureModel
    // 

    const ArchitectureModel::cores_type& ArchitectureModel::
    cores () const
    {
      return this->cores_.get ();
    }

    ArchitectureModel::cores_type& ArchitectureModel::
    cores ()
    {
      return this->cores_.get ();
    }

    void ArchitectureModel::
    cores (const cores_type& x)
    {
      this->cores_.set (x);
    }

    void ArchitectureModel::
    cores (::std::auto_ptr< cores_type > x)
    {
      this->cores_.set (x);
    }

    const ArchitectureModel::buffer_type& ArchitectureModel::
    buffer () const
    {
      return this->buffer_.get ();
    }

    ArchitectureModel::buffer_type& ArchitectureModel::
    buffer ()
    {
      return this->buffer_.get ();
    }

    void ArchitectureModel::
    buffer (const buffer_type& x)
    {
      this->buffer_.set (x);
    }

    void ArchitectureModel::
    buffer (::std::auto_ptr< buffer_type > x)
    {
      this->buffer_.set (x);
    }

    const ArchitectureModel::queue_type& ArchitectureModel::
    queue () const
    {
      return this->queue_.get ();
    }

    ArchitectureModel::queue_type& ArchitectureModel::
    queue ()
    {
      return this->queue_.get ();
    }

    void ArchitectureModel::
    queue (const queue_type& x)
    {
      this->queue_.set (x);
    }

    void ArchitectureModel::
    queue (::std::auto_ptr< queue_type > x)
    {
      this->queue_.set (x);
    }

    const ArchitectureModel::name_optional& ArchitectureModel::
    name () const
    {
      return this->name_;
    }

    ArchitectureModel::name_optional& ArchitectureModel::
    name ()
    {
      return this->name_;
    }

    void ArchitectureModel::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void ArchitectureModel::
    name (const name_optional& x)
    {
      this->name_ = x;
    }

    void ArchitectureModel::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }


    // LayoutModel
    // 

    const LayoutModel::name_type& LayoutModel::
    name () const
    {
      return this->name_.get ();
    }

    LayoutModel::name_type& LayoutModel::
    name ()
    {
      return this->name_.get ();
    }

    void LayoutModel::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void LayoutModel::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }

    const LayoutModel::type_type& LayoutModel::
    type () const
    {
      return this->type_.get ();
    }

    LayoutModel::type_type& LayoutModel::
    type ()
    {
      return this->type_.get ();
    }

    void LayoutModel::
    type (const type_type& x)
    {
      this->type_.set (x);
    }

    void LayoutModel::
    type (::std::auto_ptr< type_type > x)
    {
      this->type_.set (x);
    }

    const LayoutModel::dimensions_type& LayoutModel::
    dimensions () const
    {
      return this->dimensions_.get ();
    }

    LayoutModel::dimensions_type& LayoutModel::
    dimensions ()
    {
      return this->dimensions_.get ();
    }

    void LayoutModel::
    dimensions (const dimensions_type& x)
    {
      this->dimensions_.set (x);
    }

    void LayoutModel::
    dimensions (::std::auto_ptr< dimensions_type > x)
    {
      this->dimensions_.set (x);
    }

    const LayoutModel::language_type& LayoutModel::
    language () const
    {
      return this->language_.get ();
    }

    LayoutModel::language_type& LayoutModel::
    language ()
    {
      return this->language_.get ();
    }

    void LayoutModel::
    language (const language_type& x)
    {
      this->language_.set (x);
    }

    void LayoutModel::
    language (::std::auto_ptr< language_type > x)
    {
      this->language_.set (x);
    }

    const LayoutModel::language_type& LayoutModel::
    language_default_value ()
    {
      return language_default_value_;
    }


    // VariableModel
    // 

    const VariableModel::name_type& VariableModel::
    name () const
    {
      return this->name_.get ();
    }

    VariableModel::name_type& VariableModel::
    name ()
    {
      return this->name_.get ();
    }

    void VariableModel::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void VariableModel::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }

    const VariableModel::unit_type& VariableModel::
    unit () const
    {
      return this->unit_.get ();
    }

    VariableModel::unit_type& VariableModel::
    unit ()
    {
      return this->unit_.get ();
    }

    void VariableModel::
    unit (const unit_type& x)
    {
      this->unit_.set (x);
    }

    void VariableModel::
    unit (::std::auto_ptr< unit_type > x)
    {
      this->unit_.set (x);
    }

    const VariableModel::unit_type& VariableModel::
    unit_default_value ()
    {
      return unit_default_value_;
    }

    const VariableModel::layout_type& VariableModel::
    layout () const
    {
      return this->layout_.get ();
    }

    VariableModel::layout_type& VariableModel::
    layout ()
    {
      return this->layout_.get ();
    }

    void VariableModel::
    layout (const layout_type& x)
    {
      this->layout_.set (x);
    }

    void VariableModel::
    layout (::std::auto_ptr< layout_type > x)
    {
      this->layout_.set (x);
    }

    const VariableModel::enabled_optional& VariableModel::
    enabled () const
    {
      return this->enabled_;
    }

    VariableModel::enabled_optional& VariableModel::
    enabled ()
    {
      return this->enabled_;
    }

    void VariableModel::
    enabled (const enabled_type& x)
    {
      this->enabled_.set (x);
    }

    void VariableModel::
    enabled (const enabled_optional& x)
    {
      this->enabled_ = x;
    }


    // GroupModel
    // 

    const GroupModel::variable_sequence& GroupModel::
    variable () const
    {
      return this->variable_;
    }

    GroupModel::variable_sequence& GroupModel::
    variable ()
    {
      return this->variable_;
    }

    void GroupModel::
    variable (const variable_sequence& s)
    {
      this->variable_ = s;
    }

    const GroupModel::group_sequence& GroupModel::
    group () const
    {
      return this->group_;
    }

    GroupModel::group_sequence& GroupModel::
    group ()
    {
      return this->group_;
    }

    void GroupModel::
    group (const group_sequence& s)
    {
      this->group_ = s;
    }

    const GroupModel::name_type& GroupModel::
    name () const
    {
      return this->name_.get ();
    }

    GroupModel::name_type& GroupModel::
    name ()
    {
      return this->name_.get ();
    }

    void GroupModel::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void GroupModel::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }

    const GroupModel::enabled_type& GroupModel::
    enabled () const
    {
      return this->enabled_.get ();
    }

    GroupModel::enabled_type& GroupModel::
    enabled ()
    {
      return this->enabled_.get ();
    }

    void GroupModel::
    enabled (const enabled_type& x)
    {
      this->enabled_.set (x);
    }

    GroupModel::enabled_type GroupModel::
    enabled_default_value ()
    {
      return enabled_type (true);
    }


    // ParameterModel
    // 

    const ParameterModel::name_type& ParameterModel::
    name () const
    {
      return this->name_.get ();
    }

    ParameterModel::name_type& ParameterModel::
    name ()
    {
      return this->name_.get ();
    }

    void ParameterModel::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void ParameterModel::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }

    const ParameterModel::type_type& ParameterModel::
    type () const
    {
      return this->type_.get ();
    }

    ParameterModel::type_type& ParameterModel::
    type ()
    {
      return this->type_.get ();
    }

    void ParameterModel::
    type (const type_type& x)
    {
      this->type_.set (x);
    }

    void ParameterModel::
    type (::std::auto_ptr< type_type > x)
    {
      this->type_.set (x);
    }

    const ParameterModel::value_type& ParameterModel::
    value () const
    {
      return this->value_.get ();
    }

    ParameterModel::value_type& ParameterModel::
    value ()
    {
      return this->value_.get ();
    }

    void ParameterModel::
    value (const value_type& x)
    {
      this->value_.set (x);
    }

    void ParameterModel::
    value (::std::auto_ptr< value_type > x)
    {
      this->value_.set (x);
    }


    // DataModel
    // 

    const DataModel::parameter_sequence& DataModel::
    parameter () const
    {
      return this->parameter_;
    }

    DataModel::parameter_sequence& DataModel::
    parameter ()
    {
      return this->parameter_;
    }

    void DataModel::
    parameter (const parameter_sequence& s)
    {
      this->parameter_ = s;
    }

    const DataModel::layout_sequence& DataModel::
    layout () const
    {
      return this->layout_;
    }

    DataModel::layout_sequence& DataModel::
    layout ()
    {
      return this->layout_;
    }

    void DataModel::
    layout (const layout_sequence& s)
    {
      this->layout_ = s;
    }

    const DataModel::variable_sequence& DataModel::
    variable () const
    {
      return this->variable_;
    }

    DataModel::variable_sequence& DataModel::
    variable ()
    {
      return this->variable_;
    }

    void DataModel::
    variable (const variable_sequence& s)
    {
      this->variable_ = s;
    }

    const DataModel::group_sequence& DataModel::
    group () const
    {
      return this->group_;
    }

    DataModel::group_sequence& DataModel::
    group ()
    {
      return this->group_;
    }

    void DataModel::
    group (const group_sequence& s)
    {
      this->group_ = s;
    }


    // EventModel
    // 

    const EventModel::name_type& EventModel::
    name () const
    {
      return this->name_.get ();
    }

    EventModel::name_type& EventModel::
    name ()
    {
      return this->name_.get ();
    }

    void EventModel::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void EventModel::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }

    const EventModel::action_type& EventModel::
    action () const
    {
      return this->action_.get ();
    }

    EventModel::action_type& EventModel::
    action ()
    {
      return this->action_.get ();
    }

    void EventModel::
    action (const action_type& x)
    {
      this->action_.set (x);
    }

    void EventModel::
    action (::std::auto_ptr< action_type > x)
    {
      this->action_.set (x);
    }

    const EventModel::library_type& EventModel::
    library () const
    {
      return this->library_.get ();
    }

    EventModel::library_type& EventModel::
    library ()
    {
      return this->library_.get ();
    }

    void EventModel::
    library (const library_type& x)
    {
      this->library_.set (x);
    }

    void EventModel::
    library (::std::auto_ptr< library_type > x)
    {
      this->library_.set (x);
    }

    const EventModel::library_type& EventModel::
    library_default_value ()
    {
      return library_default_value_;
    }

    const EventModel::scope_type& EventModel::
    scope () const
    {
      return this->scope_.get ();
    }

    EventModel::scope_type& EventModel::
    scope ()
    {
      return this->scope_.get ();
    }

    void EventModel::
    scope (const scope_type& x)
    {
      this->scope_.set (x);
    }

    void EventModel::
    scope (::std::auto_ptr< scope_type > x)
    {
      this->scope_.set (x);
    }

    const EventModel::scope_type& EventModel::
    scope_default_value ()
    {
      return scope_default_value_;
    }


    // ScriptModel
    // 

    const ScriptModel::name_type& ScriptModel::
    name () const
    {
      return this->name_.get ();
    }

    ScriptModel::name_type& ScriptModel::
    name ()
    {
      return this->name_.get ();
    }

    void ScriptModel::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void ScriptModel::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }

    const ScriptModel::file_type& ScriptModel::
    file () const
    {
      return this->file_.get ();
    }

    ScriptModel::file_type& ScriptModel::
    file ()
    {
      return this->file_.get ();
    }

    void ScriptModel::
    file (const file_type& x)
    {
      this->file_.set (x);
    }

    void ScriptModel::
    file (::std::auto_ptr< file_type > x)
    {
      this->file_.set (x);
    }

    const ScriptModel::language_type& ScriptModel::
    language () const
    {
      return this->language_.get ();
    }

    ScriptModel::language_type& ScriptModel::
    language ()
    {
      return this->language_.get ();
    }

    void ScriptModel::
    language (const language_type& x)
    {
      this->language_.set (x);
    }

    void ScriptModel::
    language (::std::auto_ptr< language_type > x)
    {
      this->language_.set (x);
    }

    const ScriptModel::scope_type& ScriptModel::
    scope () const
    {
      return this->scope_.get ();
    }

    ScriptModel::scope_type& ScriptModel::
    scope ()
    {
      return this->scope_.get ();
    }

    void ScriptModel::
    scope (const scope_type& x)
    {
      this->scope_.set (x);
    }

    void ScriptModel::
    scope (::std::auto_ptr< scope_type > x)
    {
      this->scope_.set (x);
    }

    const ScriptModel::scope_type& ScriptModel::
    scope_default_value ()
    {
      return scope_default_value_;
    }


    // ActionsModel
    // 

    const ActionsModel::event_sequence& ActionsModel::
    event () const
    {
      return this->event_;
    }

    ActionsModel::event_sequence& ActionsModel::
    event ()
    {
      return this->event_;
    }

    void ActionsModel::
    event (const event_sequence& s)
    {
      this->event_ = s;
    }

    const ActionsModel::script_sequence& ActionsModel::
    script () const
    {
      return this->script_;
    }

    ActionsModel::script_sequence& ActionsModel::
    script ()
    {
      return this->script_;
    }

    void ActionsModel::
    script (const script_sequence& s)
    {
      this->script_ = s;
    }


    // SimulationModel
    // 

    const SimulationModel::architecture_type& SimulationModel::
    architecture () const
    {
      return this->architecture_.get ();
    }

    SimulationModel::architecture_type& SimulationModel::
    architecture ()
    {
      return this->architecture_.get ();
    }

    void SimulationModel::
    architecture (const architecture_type& x)
    {
      this->architecture_.set (x);
    }

    void SimulationModel::
    architecture (::std::auto_ptr< architecture_type > x)
    {
      this->architecture_.set (x);
    }

    const SimulationModel::data_type& SimulationModel::
    data () const
    {
      return this->data_.get ();
    }

    SimulationModel::data_type& SimulationModel::
    data ()
    {
      return this->data_.get ();
    }

    void SimulationModel::
    data (const data_type& x)
    {
      this->data_.set (x);
    }

    void SimulationModel::
    data (::std::auto_ptr< data_type > x)
    {
      this->data_.set (x);
    }

    const SimulationModel::actions_type& SimulationModel::
    actions () const
    {
      return this->actions_.get ();
    }

    SimulationModel::actions_type& SimulationModel::
    actions ()
    {
      return this->actions_.get ();
    }

    void SimulationModel::
    actions (const actions_type& x)
    {
      this->actions_.set (x);
    }

    void SimulationModel::
    actions (::std::auto_ptr< actions_type > x)
    {
      this->actions_.set (x);
    }

    const SimulationModel::name_type& SimulationModel::
    name () const
    {
      return this->name_.get ();
    }

    SimulationModel::name_type& SimulationModel::
    name ()
    {
      return this->name_.get ();
    }

    void SimulationModel::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void SimulationModel::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }

    const SimulationModel::language_type& SimulationModel::
    language () const
    {
      return this->language_.get ();
    }

    SimulationModel::language_type& SimulationModel::
    language ()
    {
      return this->language_.get ();
    }

    void SimulationModel::
    language (const language_type& x)
    {
      this->language_.set (x);
    }

    void SimulationModel::
    language (::std::auto_ptr< language_type > x)
    {
      this->language_.set (x);
    }

    const SimulationModel::language_type& SimulationModel::
    language_default_value ()
    {
      return language_default_value_;
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Damaris
{
  namespace Model
  {
    // ClientsModel
    //

    ClientsModel::
    ClientsModel (const count_type& count)
    : ::xml_schema::type (),
      count_ (count, ::xml_schema::flags (), this)
    {
    }

    ClientsModel::
    ClientsModel (const ClientsModel& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      count_ (x.count_, f, this)
    {
    }

    ClientsModel::
    ClientsModel (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      count_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void ClientsModel::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "count" && n.namespace_ ().empty ())
        {
          this->count_.set (count_traits::create (i, f, this));
          continue;
        }
      }

      if (!count_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "count",
          "");
      }
    }

    ClientsModel* ClientsModel::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ClientsModel (*this, f, c);
    }

    ClientsModel::
    ~ClientsModel ()
    {
    }

    // CoresModel
    //

    CoresModel::
    CoresModel (const clients_type& clients,
                const count_type& count)
    : ::xml_schema::type (),
      clients_ (clients, ::xml_schema::flags (), this),
      count_ (count, ::xml_schema::flags (), this)
    {
    }

    CoresModel::
    CoresModel (::std::auto_ptr< clients_type >& clients,
                const count_type& count)
    : ::xml_schema::type (),
      clients_ (clients, ::xml_schema::flags (), this),
      count_ (count, ::xml_schema::flags (), this)
    {
    }

    CoresModel::
    CoresModel (const CoresModel& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      clients_ (x.clients_, f, this),
      count_ (x.count_, f, this)
    {
    }

    CoresModel::
    CoresModel (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      clients_ (f, this),
      count_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CoresModel::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // clients
        //
        if (n.name () == "clients" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< clients_type > r (
            clients_traits::create (i, f, this));

          if (!clients_.present ())
          {
            this->clients_.set (r);
            continue;
          }
        }

        break;
      }

      if (!clients_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "clients",
          "http://damaris.gforge.inria.fr/Damaris/Model");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "count" && n.namespace_ ().empty ())
        {
          this->count_.set (count_traits::create (i, f, this));
          continue;
        }
      }

      if (!count_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "count",
          "");
      }
    }

    CoresModel* CoresModel::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CoresModel (*this, f, c);
    }

    CoresModel::
    ~CoresModel ()
    {
    }

    // ShmType
    //

    ShmType::
    ShmType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_ShmType_convert ();
    }

    ShmType::
    ShmType (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_ShmType_convert ();
    }

    ShmType::
    ShmType (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_ShmType_convert ();
    }

    ShmType* ShmType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ShmType (*this, f, c);
    }

    ShmType::value ShmType::
    _xsd_ShmType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ShmType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_ShmType_indexes_,
                        _xsd_ShmType_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_ShmType_indexes_ + 2 || _xsd_ShmType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const ShmType::
    _xsd_ShmType_literals_[2] =
    {
      "posix",
      "sysv"
    };

    const ShmType::value ShmType::
    _xsd_ShmType_indexes_[2] =
    {
      ::Damaris::Model::ShmType::posix,
      ::Damaris::Model::ShmType::sysv
    };

    // BufferModel
    //

    const BufferModel::type_type BufferModel::type_default_value_ (
      "posix");

    BufferModel::
    BufferModel (const name_type& name,
                 const size_type& size)
    : ::xml_schema::type (),
      name_ (name, ::xml_schema::flags (), this),
      size_ (size, ::xml_schema::flags (), this),
      type_ (type_default_value (), ::xml_schema::flags (), this),
      blocks_ (blocks_default_value (), ::xml_schema::flags (), this)
    {
    }

    BufferModel::
    BufferModel (const BufferModel& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      name_ (x.name_, f, this),
      size_ (x.size_, f, this),
      type_ (x.type_, f, this),
      blocks_ (x.blocks_, f, this)
    {
    }

    BufferModel::
    BufferModel (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      name_ (f, this),
      size_ (f, this),
      type_ (f, this),
      blocks_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void BufferModel::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "size" && n.namespace_ ().empty ())
        {
          this->size_.set (size_traits::create (i, f, this));
          continue;
        }

        if (n.name () == "type" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< type_type > r (
            type_traits::create (i, f, this));

          this->type_.set (r);
          continue;
        }

        if (n.name () == "blocks" && n.namespace_ ().empty ())
        {
          this->blocks_.set (blocks_traits::create (i, f, this));
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!size_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "size",
          "");
      }

      if (!type_.present ())
      {
        this->type_.set (type_default_value ());
      }

      if (!blocks_.present ())
      {
        this->blocks_.set (blocks_default_value ());
      }
    }

    BufferModel* BufferModel::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class BufferModel (*this, f, c);
    }

    BufferModel::
    ~BufferModel ()
    {
    }

    // QueueModel
    //

    const QueueModel::type_type QueueModel::type_default_value_ (
      "posix");

    QueueModel::
    QueueModel (const name_type& name,
                const size_type& size)
    : ::xml_schema::type (),
      name_ (name, ::xml_schema::flags (), this),
      size_ (size, ::xml_schema::flags (), this),
      type_ (type_default_value (), ::xml_schema::flags (), this)
    {
    }

    QueueModel::
    QueueModel (const QueueModel& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      name_ (x.name_, f, this),
      size_ (x.size_, f, this),
      type_ (x.type_, f, this)
    {
    }

    QueueModel::
    QueueModel (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      name_ (f, this),
      size_ (f, this),
      type_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void QueueModel::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "size" && n.namespace_ ().empty ())
        {
          this->size_.set (size_traits::create (i, f, this));
          continue;
        }

        if (n.name () == "type" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< type_type > r (
            type_traits::create (i, f, this));

          this->type_.set (r);
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!size_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "size",
          "");
      }

      if (!type_.present ())
      {
        this->type_.set (type_default_value ());
      }
    }

    QueueModel* QueueModel::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class QueueModel (*this, f, c);
    }

    QueueModel::
    ~QueueModel ()
    {
    }

    // ArchitectureModel
    //

    ArchitectureModel::
    ArchitectureModel (const cores_type& cores,
                       const buffer_type& buffer,
                       const queue_type& queue)
    : ::xml_schema::type (),
      cores_ (cores, ::xml_schema::flags (), this),
      buffer_ (buffer, ::xml_schema::flags (), this),
      queue_ (queue, ::xml_schema::flags (), this),
      name_ (::xml_schema::flags (), this)
    {
    }

    ArchitectureModel::
    ArchitectureModel (::std::auto_ptr< cores_type >& cores,
                       ::std::auto_ptr< buffer_type >& buffer,
                       ::std::auto_ptr< queue_type >& queue)
    : ::xml_schema::type (),
      cores_ (cores, ::xml_schema::flags (), this),
      buffer_ (buffer, ::xml_schema::flags (), this),
      queue_ (queue, ::xml_schema::flags (), this),
      name_ (::xml_schema::flags (), this)
    {
    }

    ArchitectureModel::
    ArchitectureModel (const ArchitectureModel& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      cores_ (x.cores_, f, this),
      buffer_ (x.buffer_, f, this),
      queue_ (x.queue_, f, this),
      name_ (x.name_, f, this)
    {
    }

    ArchitectureModel::
    ArchitectureModel (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      cores_ (f, this),
      buffer_ (f, this),
      queue_ (f, this),
      name_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ArchitectureModel::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // cores
        //
        if (n.name () == "cores" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< cores_type > r (
            cores_traits::create (i, f, this));

          if (!cores_.present ())
          {
            this->cores_.set (r);
            continue;
          }
        }

        // buffer
        //
        if (n.name () == "buffer" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< buffer_type > r (
            buffer_traits::create (i, f, this));

          if (!buffer_.present ())
          {
            this->buffer_.set (r);
            continue;
          }
        }

        // queue
        //
        if (n.name () == "queue" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< queue_type > r (
            queue_traits::create (i, f, this));

          if (!queue_.present ())
          {
            this->queue_.set (r);
            continue;
          }
        }

        break;
      }

      if (!cores_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "cores",
          "http://damaris.gforge.inria.fr/Damaris/Model");
      }

      if (!buffer_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "buffer",
          "http://damaris.gforge.inria.fr/Damaris/Model");
      }

      if (!queue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "queue",
          "http://damaris.gforge.inria.fr/Damaris/Model");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }
      }
    }

    ArchitectureModel* ArchitectureModel::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ArchitectureModel (*this, f, c);
    }

    ArchitectureModel::
    ~ArchitectureModel ()
    {
    }

    // LayoutModel
    //

    const LayoutModel::language_type LayoutModel::language_default_value_ (
      "?");

    LayoutModel::
    LayoutModel (const name_type& name,
                 const type_type& type,
                 const dimensions_type& dimensions)
    : ::xml_schema::string (),
      name_ (name, ::xml_schema::flags (), this),
      type_ (type, ::xml_schema::flags (), this),
      dimensions_ (dimensions, ::xml_schema::flags (), this),
      language_ (language_default_value (), ::xml_schema::flags (), this)
    {
    }

    LayoutModel::
    LayoutModel (const char* _xsd_string_base,
                 const name_type& name,
                 const type_type& type,
                 const dimensions_type& dimensions)
    : ::xml_schema::string (_xsd_string_base),
      name_ (name, ::xml_schema::flags (), this),
      type_ (type, ::xml_schema::flags (), this),
      dimensions_ (dimensions, ::xml_schema::flags (), this),
      language_ (language_default_value (), ::xml_schema::flags (), this)
    {
    }

    LayoutModel::
    LayoutModel (const ::std::string& _xsd_string_base,
                 const name_type& name,
                 const type_type& type,
                 const dimensions_type& dimensions)
    : ::xml_schema::string (_xsd_string_base),
      name_ (name, ::xml_schema::flags (), this),
      type_ (type, ::xml_schema::flags (), this),
      dimensions_ (dimensions, ::xml_schema::flags (), this),
      language_ (language_default_value (), ::xml_schema::flags (), this)
    {
    }

    LayoutModel::
    LayoutModel (const ::xml_schema::string& _xsd_string_base,
                 const name_type& name,
                 const type_type& type,
                 const dimensions_type& dimensions)
    : ::xml_schema::string (_xsd_string_base),
      name_ (name, ::xml_schema::flags (), this),
      type_ (type, ::xml_schema::flags (), this),
      dimensions_ (dimensions, ::xml_schema::flags (), this),
      language_ (language_default_value (), ::xml_schema::flags (), this)
    {
    }

    LayoutModel::
    LayoutModel (const LayoutModel& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c),
      name_ (x.name_, f, this),
      type_ (x.type_, f, this),
      dimensions_ (x.dimensions_, f, this),
      language_ (x.language_, f, this)
    {
    }

    LayoutModel::
    LayoutModel (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::string (e, f | ::xml_schema::flags::base, c),
      name_ (f, this),
      type_ (f, this),
      dimensions_ (f, this),
      language_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void LayoutModel::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "type" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< type_type > r (
            type_traits::create (i, f, this));

          this->type_.set (r);
          continue;
        }

        if (n.name () == "dimensions" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< dimensions_type > r (
            dimensions_traits::create (i, f, this));

          this->dimensions_.set (r);
          continue;
        }

        if (n.name () == "language" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< language_type > r (
            language_traits::create (i, f, this));

          this->language_.set (r);
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!type_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "type",
          "");
      }

      if (!dimensions_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "dimensions",
          "");
      }

      if (!language_.present ())
      {
        this->language_.set (language_default_value ());
      }
    }

    LayoutModel* LayoutModel::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LayoutModel (*this, f, c);
    }

    LayoutModel::
    ~LayoutModel ()
    {
    }

    // VariableModel
    //

    const VariableModel::unit_type VariableModel::unit_default_value_ (
      "");

    VariableModel::
    VariableModel (const name_type& name,
                   const layout_type& layout)
    : ::xml_schema::string (),
      name_ (name, ::xml_schema::flags (), this),
      unit_ (unit_default_value (), ::xml_schema::flags (), this),
      layout_ (layout, ::xml_schema::flags (), this),
      enabled_ (::xml_schema::flags (), this)
    {
    }

    VariableModel::
    VariableModel (const char* _xsd_string_base,
                   const name_type& name,
                   const layout_type& layout)
    : ::xml_schema::string (_xsd_string_base),
      name_ (name, ::xml_schema::flags (), this),
      unit_ (unit_default_value (), ::xml_schema::flags (), this),
      layout_ (layout, ::xml_schema::flags (), this),
      enabled_ (::xml_schema::flags (), this)
    {
    }

    VariableModel::
    VariableModel (const ::std::string& _xsd_string_base,
                   const name_type& name,
                   const layout_type& layout)
    : ::xml_schema::string (_xsd_string_base),
      name_ (name, ::xml_schema::flags (), this),
      unit_ (unit_default_value (), ::xml_schema::flags (), this),
      layout_ (layout, ::xml_schema::flags (), this),
      enabled_ (::xml_schema::flags (), this)
    {
    }

    VariableModel::
    VariableModel (const ::xml_schema::string& _xsd_string_base,
                   const name_type& name,
                   const layout_type& layout)
    : ::xml_schema::string (_xsd_string_base),
      name_ (name, ::xml_schema::flags (), this),
      unit_ (unit_default_value (), ::xml_schema::flags (), this),
      layout_ (layout, ::xml_schema::flags (), this),
      enabled_ (::xml_schema::flags (), this)
    {
    }

    VariableModel::
    VariableModel (const VariableModel& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c),
      name_ (x.name_, f, this),
      unit_ (x.unit_, f, this),
      layout_ (x.layout_, f, this),
      enabled_ (x.enabled_, f, this)
    {
    }

    VariableModel::
    VariableModel (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::string (e, f | ::xml_schema::flags::base, c),
      name_ (f, this),
      unit_ (f, this),
      layout_ (f, this),
      enabled_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void VariableModel::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "unit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< unit_type > r (
            unit_traits::create (i, f, this));

          this->unit_.set (r);
          continue;
        }

        if (n.name () == "layout" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< layout_type > r (
            layout_traits::create (i, f, this));

          this->layout_.set (r);
          continue;
        }

        if (n.name () == "enabled" && n.namespace_ ().empty ())
        {
          this->enabled_.set (enabled_traits::create (i, f, this));
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!unit_.present ())
      {
        this->unit_.set (unit_default_value ());
      }

      if (!layout_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "layout",
          "");
      }
    }

    VariableModel* VariableModel::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class VariableModel (*this, f, c);
    }

    VariableModel::
    ~VariableModel ()
    {
    }

    // GroupModel
    //

    GroupModel::
    GroupModel (const name_type& name)
    : ::xml_schema::type (),
      variable_ (::xml_schema::flags (), this),
      group_ (::xml_schema::flags (), this),
      name_ (name, ::xml_schema::flags (), this),
      enabled_ (enabled_default_value (), ::xml_schema::flags (), this)
    {
    }

    GroupModel::
    GroupModel (const GroupModel& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      variable_ (x.variable_, f, this),
      group_ (x.group_, f, this),
      name_ (x.name_, f, this),
      enabled_ (x.enabled_, f, this)
    {
    }

    GroupModel::
    GroupModel (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      variable_ (f, this),
      group_ (f, this),
      name_ (f, this),
      enabled_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void GroupModel::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // variable
        //
        if (n.name () == "variable" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< variable_type > r (
            variable_traits::create (i, f, this));

          this->variable_.push_back (r);
          continue;
        }

        // group
        //
        if (n.name () == "group" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< group_type > r (
            group_traits::create (i, f, this));

          this->group_.push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "enabled" && n.namespace_ ().empty ())
        {
          this->enabled_.set (enabled_traits::create (i, f, this));
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!enabled_.present ())
      {
        this->enabled_.set (enabled_default_value ());
      }
    }

    GroupModel* GroupModel::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class GroupModel (*this, f, c);
    }

    GroupModel::
    ~GroupModel ()
    {
    }

    // ParameterModel
    //

    ParameterModel::
    ParameterModel (const name_type& name,
                    const type_type& type,
                    const value_type& value)
    : ::xml_schema::string (),
      name_ (name, ::xml_schema::flags (), this),
      type_ (type, ::xml_schema::flags (), this),
      value_ (value, ::xml_schema::flags (), this)
    {
    }

    ParameterModel::
    ParameterModel (const char* _xsd_string_base,
                    const name_type& name,
                    const type_type& type,
                    const value_type& value)
    : ::xml_schema::string (_xsd_string_base),
      name_ (name, ::xml_schema::flags (), this),
      type_ (type, ::xml_schema::flags (), this),
      value_ (value, ::xml_schema::flags (), this)
    {
    }

    ParameterModel::
    ParameterModel (const ::std::string& _xsd_string_base,
                    const name_type& name,
                    const type_type& type,
                    const value_type& value)
    : ::xml_schema::string (_xsd_string_base),
      name_ (name, ::xml_schema::flags (), this),
      type_ (type, ::xml_schema::flags (), this),
      value_ (value, ::xml_schema::flags (), this)
    {
    }

    ParameterModel::
    ParameterModel (const ::xml_schema::string& _xsd_string_base,
                    const name_type& name,
                    const type_type& type,
                    const value_type& value)
    : ::xml_schema::string (_xsd_string_base),
      name_ (name, ::xml_schema::flags (), this),
      type_ (type, ::xml_schema::flags (), this),
      value_ (value, ::xml_schema::flags (), this)
    {
    }

    ParameterModel::
    ParameterModel (const ParameterModel& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c),
      name_ (x.name_, f, this),
      type_ (x.type_, f, this),
      value_ (x.value_, f, this)
    {
    }

    ParameterModel::
    ParameterModel (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::string (e, f | ::xml_schema::flags::base, c),
      name_ (f, this),
      type_ (f, this),
      value_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void ParameterModel::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "type" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< type_type > r (
            type_traits::create (i, f, this));

          this->type_.set (r);
          continue;
        }

        if (n.name () == "value" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< value_type > r (
            value_traits::create (i, f, this));

          this->value_.set (r);
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!type_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "type",
          "");
      }

      if (!value_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "value",
          "");
      }
    }

    ParameterModel* ParameterModel::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ParameterModel (*this, f, c);
    }

    ParameterModel::
    ~ParameterModel ()
    {
    }

    // DataModel
    //

    DataModel::
    DataModel ()
    : ::xml_schema::type (),
      parameter_ (::xml_schema::flags (), this),
      layout_ (::xml_schema::flags (), this),
      variable_ (::xml_schema::flags (), this),
      group_ (::xml_schema::flags (), this)
    {
    }

    DataModel::
    DataModel (const DataModel& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      parameter_ (x.parameter_, f, this),
      layout_ (x.layout_, f, this),
      variable_ (x.variable_, f, this),
      group_ (x.group_, f, this)
    {
    }

    DataModel::
    DataModel (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      parameter_ (f, this),
      layout_ (f, this),
      variable_ (f, this),
      group_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void DataModel::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // parameter
        //
        if (n.name () == "parameter" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< parameter_type > r (
            parameter_traits::create (i, f, this));

          this->parameter_.push_back (r);
          continue;
        }

        // layout
        //
        if (n.name () == "layout" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< layout_type > r (
            layout_traits::create (i, f, this));

          this->layout_.push_back (r);
          continue;
        }

        // variable
        //
        if (n.name () == "variable" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< variable_type > r (
            variable_traits::create (i, f, this));

          this->variable_.push_back (r);
          continue;
        }

        // group
        //
        if (n.name () == "group" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< group_type > r (
            group_traits::create (i, f, this));

          this->group_.push_back (r);
          continue;
        }

        break;
      }
    }

    DataModel* DataModel::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DataModel (*this, f, c);
    }

    DataModel::
    ~DataModel ()
    {
    }

    // EventModel
    //

    const EventModel::library_type EventModel::library_default_value_ (
      "");

    const EventModel::scope_type EventModel::scope_default_value_ (
      "core");

    EventModel::
    EventModel (const name_type& name,
                const action_type& action)
    : ::xml_schema::type (),
      name_ (name, ::xml_schema::flags (), this),
      action_ (action, ::xml_schema::flags (), this),
      library_ (library_default_value (), ::xml_schema::flags (), this),
      scope_ (scope_default_value (), ::xml_schema::flags (), this)
    {
    }

    EventModel::
    EventModel (const EventModel& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      name_ (x.name_, f, this),
      action_ (x.action_, f, this),
      library_ (x.library_, f, this),
      scope_ (x.scope_, f, this)
    {
    }

    EventModel::
    EventModel (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      name_ (f, this),
      action_ (f, this),
      library_ (f, this),
      scope_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void EventModel::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "action" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< action_type > r (
            action_traits::create (i, f, this));

          this->action_.set (r);
          continue;
        }

        if (n.name () == "library" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< library_type > r (
            library_traits::create (i, f, this));

          this->library_.set (r);
          continue;
        }

        if (n.name () == "scope" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< scope_type > r (
            scope_traits::create (i, f, this));

          this->scope_.set (r);
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!action_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "action",
          "");
      }

      if (!library_.present ())
      {
        this->library_.set (library_default_value ());
      }

      if (!scope_.present ())
      {
        this->scope_.set (scope_default_value ());
      }
    }

    EventModel* EventModel::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class EventModel (*this, f, c);
    }

    EventModel::
    ~EventModel ()
    {
    }

    // ScriptModel
    //

    const ScriptModel::scope_type ScriptModel::scope_default_value_ (
      "core");

    ScriptModel::
    ScriptModel (const name_type& name,
                 const file_type& file,
                 const language_type& language)
    : ::xml_schema::type (),
      name_ (name, ::xml_schema::flags (), this),
      file_ (file, ::xml_schema::flags (), this),
      language_ (language, ::xml_schema::flags (), this),
      scope_ (scope_default_value (), ::xml_schema::flags (), this)
    {
    }

    ScriptModel::
    ScriptModel (const ScriptModel& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      name_ (x.name_, f, this),
      file_ (x.file_, f, this),
      language_ (x.language_, f, this),
      scope_ (x.scope_, f, this)
    {
    }

    ScriptModel::
    ScriptModel (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      name_ (f, this),
      file_ (f, this),
      language_ (f, this),
      scope_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void ScriptModel::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "file" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< file_type > r (
            file_traits::create (i, f, this));

          this->file_.set (r);
          continue;
        }

        if (n.name () == "language" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< language_type > r (
            language_traits::create (i, f, this));

          this->language_.set (r);
          continue;
        }

        if (n.name () == "scope" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< scope_type > r (
            scope_traits::create (i, f, this));

          this->scope_.set (r);
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!file_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "file",
          "");
      }

      if (!language_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "language",
          "");
      }

      if (!scope_.present ())
      {
        this->scope_.set (scope_default_value ());
      }
    }

    ScriptModel* ScriptModel::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ScriptModel (*this, f, c);
    }

    ScriptModel::
    ~ScriptModel ()
    {
    }

    // ActionsModel
    //

    ActionsModel::
    ActionsModel ()
    : ::xml_schema::type (),
      event_ (::xml_schema::flags (), this),
      script_ (::xml_schema::flags (), this)
    {
    }

    ActionsModel::
    ActionsModel (const ActionsModel& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      event_ (x.event_, f, this),
      script_ (x.script_, f, this)
    {
    }

    ActionsModel::
    ActionsModel (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      event_ (f, this),
      script_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ActionsModel::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // event
        //
        if (n.name () == "event" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< event_type > r (
            event_traits::create (i, f, this));

          this->event_.push_back (r);
          continue;
        }

        // script
        //
        if (n.name () == "script" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< script_type > r (
            script_traits::create (i, f, this));

          this->script_.push_back (r);
          continue;
        }

        break;
      }
    }

    ActionsModel* ActionsModel::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ActionsModel (*this, f, c);
    }

    ActionsModel::
    ~ActionsModel ()
    {
    }

    // SimulationModel
    //

    const SimulationModel::language_type SimulationModel::language_default_value_ (
      "C");

    SimulationModel::
    SimulationModel (const architecture_type& architecture,
                     const data_type& data,
                     const actions_type& actions,
                     const name_type& name)
    : ::xml_schema::type (),
      architecture_ (architecture, ::xml_schema::flags (), this),
      data_ (data, ::xml_schema::flags (), this),
      actions_ (actions, ::xml_schema::flags (), this),
      name_ (name, ::xml_schema::flags (), this),
      language_ (language_default_value (), ::xml_schema::flags (), this)
    {
    }

    SimulationModel::
    SimulationModel (::std::auto_ptr< architecture_type >& architecture,
                     ::std::auto_ptr< data_type >& data,
                     ::std::auto_ptr< actions_type >& actions,
                     const name_type& name)
    : ::xml_schema::type (),
      architecture_ (architecture, ::xml_schema::flags (), this),
      data_ (data, ::xml_schema::flags (), this),
      actions_ (actions, ::xml_schema::flags (), this),
      name_ (name, ::xml_schema::flags (), this),
      language_ (language_default_value (), ::xml_schema::flags (), this)
    {
    }

    SimulationModel::
    SimulationModel (const SimulationModel& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      architecture_ (x.architecture_, f, this),
      data_ (x.data_, f, this),
      actions_ (x.actions_, f, this),
      name_ (x.name_, f, this),
      language_ (x.language_, f, this)
    {
    }

    SimulationModel::
    SimulationModel (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      architecture_ (f, this),
      data_ (f, this),
      actions_ (f, this),
      name_ (f, this),
      language_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SimulationModel::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // architecture
        //
        if (n.name () == "architecture" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< architecture_type > r (
            architecture_traits::create (i, f, this));

          if (!architecture_.present ())
          {
            this->architecture_.set (r);
            continue;
          }
        }

        // data
        //
        if (n.name () == "data" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< data_type > r (
            data_traits::create (i, f, this));

          if (!data_.present ())
          {
            this->data_.set (r);
            continue;
          }
        }

        // actions
        //
        if (n.name () == "actions" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< actions_type > r (
            actions_traits::create (i, f, this));

          if (!actions_.present ())
          {
            this->actions_.set (r);
            continue;
          }
        }

        break;
      }

      if (!architecture_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "architecture",
          "http://damaris.gforge.inria.fr/Damaris/Model");
      }

      if (!data_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "data",
          "http://damaris.gforge.inria.fr/Damaris/Model");
      }

      if (!actions_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "actions",
          "http://damaris.gforge.inria.fr/Damaris/Model");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "language" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< language_type > r (
            language_traits::create (i, f, this));

          this->language_.set (r);
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!language_.present ())
      {
        this->language_.set (language_default_value ());
      }
    }

    SimulationModel* SimulationModel::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SimulationModel (*this, f, c);
    }

    SimulationModel::
    ~SimulationModel ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Damaris
{
  namespace Model
  {
    ::std::auto_ptr< ::Damaris::Model::SimulationModel >
    simulation (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::Damaris::Model::SimulationModel > r (
        ::Damaris::Model::simulation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Damaris::Model::SimulationModel >
    simulation (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::Damaris::Model::SimulationModel > r (
        ::Damaris::Model::simulation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Damaris::Model::SimulationModel >
    simulation (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::Damaris::Model::SimulationModel > r (
        ::Damaris::Model::simulation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Damaris::Model::SimulationModel >
    simulation (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::Damaris::Model::simulation (isrc, f, p);
    }

    ::std::auto_ptr< ::Damaris::Model::SimulationModel >
    simulation (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::Damaris::Model::simulation (isrc, h, f, p);
    }

    ::std::auto_ptr< ::Damaris::Model::SimulationModel >
    simulation (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::Damaris::Model::simulation (isrc, h, f, p);
    }

    ::std::auto_ptr< ::Damaris::Model::SimulationModel >
    simulation (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::Damaris::Model::simulation (isrc, f, p);
    }

    ::std::auto_ptr< ::Damaris::Model::SimulationModel >
    simulation (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::Damaris::Model::simulation (isrc, h, f, p);
    }

    ::std::auto_ptr< ::Damaris::Model::SimulationModel >
    simulation (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::Damaris::Model::simulation (isrc, h, f, p);
    }

    ::std::auto_ptr< ::Damaris::Model::SimulationModel >
    simulation (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::Damaris::Model::SimulationModel > r (
        ::Damaris::Model::simulation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Damaris::Model::SimulationModel >
    simulation (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::Damaris::Model::SimulationModel > r (
        ::Damaris::Model::simulation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Damaris::Model::SimulationModel >
    simulation (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::Damaris::Model::SimulationModel > r (
        ::Damaris::Model::simulation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Damaris::Model::SimulationModel >
    simulation (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::Damaris::Model::SimulationModel > r (
          ::Damaris::Model::simulation (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "simulation" &&
          n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
      {
        ::std::auto_ptr< ::Damaris::Model::SimulationModel > r (
          ::xsd::cxx::tree::traits< ::Damaris::Model::SimulationModel, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "simulation",
        "http://damaris.gforge.inria.fr/Damaris/Model");
    }

    ::std::auto_ptr< ::Damaris::Model::SimulationModel >
    simulation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "simulation" &&
          n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
      {
        ::std::auto_ptr< ::Damaris::Model::SimulationModel > r (
          ::xsd::cxx::tree::traits< ::Damaris::Model::SimulationModel, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "simulation",
        "http://damaris.gforge.inria.fr/Damaris/Model");
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

