// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
/*******************************************************************
This file is part of Damaris.

Damaris is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Damaris is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Damaris.  If not, see <http://www.gnu.org/licenses/>.
********************************************************************/
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Model.hpp"

namespace Damaris
{
  namespace Model
  {
    // Clients
    // 

    const Clients::count_type& Clients::
    count () const
    {
      return this->count_.get ();
    }

    Clients::count_type& Clients::
    count ()
    {
      return this->count_.get ();
    }

    void Clients::
    count (const count_type& x)
    {
      this->count_.set (x);
    }

    const Clients::domains_type& Clients::
    domains () const
    {
      return this->domains_.get ();
    }

    Clients::domains_type& Clients::
    domains ()
    {
      return this->domains_.get ();
    }

    void Clients::
    domains (const domains_type& x)
    {
      this->domains_.set (x);
    }

    Clients::domains_type Clients::
    domains_default_value ()
    {
      return domains_type (1);
    }


    // Cores
    // 

    const Cores::clients_type& Cores::
    clients () const
    {
      return this->clients_.get ();
    }

    Cores::clients_type& Cores::
    clients ()
    {
      return this->clients_.get ();
    }

    void Cores::
    clients (const clients_type& x)
    {
      this->clients_.set (x);
    }

    void Cores::
    clients (::std::auto_ptr< clients_type > x)
    {
      this->clients_.set (x);
    }

    const Cores::count_type& Cores::
    count () const
    {
      return this->count_.get ();
    }

    Cores::count_type& Cores::
    count ()
    {
      return this->count_.get ();
    }

    void Cores::
    count (const count_type& x)
    {
      this->count_.set (x);
    }


    // ShmType
    // 

    ShmType::
    ShmType (value v)
    : ::xml_schema::string (_xsd_ShmType_literals_[v])
    {
    }

    ShmType::
    ShmType (const char* v)
    : ::xml_schema::string (v)
    {
    }

    ShmType::
    ShmType (const ::std::string& v)
    : ::xml_schema::string (v)
    {
    }

    ShmType::
    ShmType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    ShmType::
    ShmType (const ShmType& v,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    ShmType& ShmType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_ShmType_literals_[v]);

      return *this;
    }


    // Buffer
    // 

    const Buffer::name_type& Buffer::
    name () const
    {
      return this->name_.get ();
    }

    Buffer::name_type& Buffer::
    name ()
    {
      return this->name_.get ();
    }

    void Buffer::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void Buffer::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }

    const Buffer::size_type& Buffer::
    size () const
    {
      return this->size_.get ();
    }

    Buffer::size_type& Buffer::
    size ()
    {
      return this->size_.get ();
    }

    void Buffer::
    size (const size_type& x)
    {
      this->size_.set (x);
    }

    const Buffer::type_type& Buffer::
    type () const
    {
      return this->type_.get ();
    }

    Buffer::type_type& Buffer::
    type ()
    {
      return this->type_.get ();
    }

    void Buffer::
    type (const type_type& x)
    {
      this->type_.set (x);
    }

    void Buffer::
    type (::std::auto_ptr< type_type > x)
    {
      this->type_.set (x);
    }

    const Buffer::type_type& Buffer::
    type_default_value ()
    {
      return type_default_value_;
    }

    const Buffer::blocks_type& Buffer::
    blocks () const
    {
      return this->blocks_.get ();
    }

    Buffer::blocks_type& Buffer::
    blocks ()
    {
      return this->blocks_.get ();
    }

    void Buffer::
    blocks (const blocks_type& x)
    {
      this->blocks_.set (x);
    }

    Buffer::blocks_type Buffer::
    blocks_default_value ()
    {
      return blocks_type (0);
    }


    // Queue
    // 

    const Queue::name_type& Queue::
    name () const
    {
      return this->name_.get ();
    }

    Queue::name_type& Queue::
    name ()
    {
      return this->name_.get ();
    }

    void Queue::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void Queue::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }

    const Queue::size_type& Queue::
    size () const
    {
      return this->size_.get ();
    }

    Queue::size_type& Queue::
    size ()
    {
      return this->size_.get ();
    }

    void Queue::
    size (const size_type& x)
    {
      this->size_.set (x);
    }

    const Queue::type_type& Queue::
    type () const
    {
      return this->type_.get ();
    }

    Queue::type_type& Queue::
    type ()
    {
      return this->type_.get ();
    }

    void Queue::
    type (const type_type& x)
    {
      this->type_.set (x);
    }

    void Queue::
    type (::std::auto_ptr< type_type > x)
    {
      this->type_.set (x);
    }

    const Queue::type_type& Queue::
    type_default_value ()
    {
      return type_default_value_;
    }


    // Architecture
    // 

    const Architecture::cores_type& Architecture::
    cores () const
    {
      return this->cores_.get ();
    }

    Architecture::cores_type& Architecture::
    cores ()
    {
      return this->cores_.get ();
    }

    void Architecture::
    cores (const cores_type& x)
    {
      this->cores_.set (x);
    }

    void Architecture::
    cores (::std::auto_ptr< cores_type > x)
    {
      this->cores_.set (x);
    }

    const Architecture::buffer_type& Architecture::
    buffer () const
    {
      return this->buffer_.get ();
    }

    Architecture::buffer_type& Architecture::
    buffer ()
    {
      return this->buffer_.get ();
    }

    void Architecture::
    buffer (const buffer_type& x)
    {
      this->buffer_.set (x);
    }

    void Architecture::
    buffer (::std::auto_ptr< buffer_type > x)
    {
      this->buffer_.set (x);
    }

    const Architecture::queue_type& Architecture::
    queue () const
    {
      return this->queue_.get ();
    }

    Architecture::queue_type& Architecture::
    queue ()
    {
      return this->queue_.get ();
    }

    void Architecture::
    queue (const queue_type& x)
    {
      this->queue_.set (x);
    }

    void Architecture::
    queue (::std::auto_ptr< queue_type > x)
    {
      this->queue_.set (x);
    }

    const Architecture::name_optional& Architecture::
    name () const
    {
      return this->name_;
    }

    Architecture::name_optional& Architecture::
    name ()
    {
      return this->name_;
    }

    void Architecture::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void Architecture::
    name (const name_optional& x)
    {
      this->name_ = x;
    }

    void Architecture::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }


    // Language
    // 

    Language::
    Language (value v)
    : ::xml_schema::string (_xsd_Language_literals_[v])
    {
    }

    Language::
    Language (const char* v)
    : ::xml_schema::string (v)
    {
    }

    Language::
    Language (const ::std::string& v)
    : ::xml_schema::string (v)
    {
    }

    Language::
    Language (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    Language::
    Language (const Language& v,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    Language& Language::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_Language_literals_[v]);

      return *this;
    }


    // Type
    // 

    Type::
    Type (value v)
    : ::xml_schema::string (_xsd_Type_literals_[v])
    {
    }

    Type::
    Type (const char* v)
    : ::xml_schema::string (v)
    {
    }

    Type::
    Type (const ::std::string& v)
    : ::xml_schema::string (v)
    {
    }

    Type::
    Type (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    Type::
    Type (const Type& v,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    Type& Type::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_Type_literals_[v]);

      return *this;
    }


    // Layout
    // 

    const Layout::name_type& Layout::
    name () const
    {
      return this->name_.get ();
    }

    Layout::name_type& Layout::
    name ()
    {
      return this->name_.get ();
    }

    void Layout::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void Layout::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }

    const Layout::type_type& Layout::
    type () const
    {
      return this->type_.get ();
    }

    Layout::type_type& Layout::
    type ()
    {
      return this->type_.get ();
    }

    void Layout::
    type (const type_type& x)
    {
      this->type_.set (x);
    }

    void Layout::
    type (::std::auto_ptr< type_type > x)
    {
      this->type_.set (x);
    }

    const Layout::dimensions_type& Layout::
    dimensions () const
    {
      return this->dimensions_.get ();
    }

    Layout::dimensions_type& Layout::
    dimensions ()
    {
      return this->dimensions_.get ();
    }

    void Layout::
    dimensions (const dimensions_type& x)
    {
      this->dimensions_.set (x);
    }

    void Layout::
    dimensions (::std::auto_ptr< dimensions_type > x)
    {
      this->dimensions_.set (x);
    }

    const Layout::language_type& Layout::
    language () const
    {
      return this->language_.get ();
    }

    Layout::language_type& Layout::
    language ()
    {
      return this->language_.get ();
    }

    void Layout::
    language (const language_type& x)
    {
      this->language_.set (x);
    }

    void Layout::
    language (::std::auto_ptr< language_type > x)
    {
      this->language_.set (x);
    }

    const Layout::language_type& Layout::
    language_default_value ()
    {
      return language_default_value_;
    }

    const Layout::visualizable_type& Layout::
    visualizable () const
    {
      return this->visualizable_.get ();
    }

    Layout::visualizable_type& Layout::
    visualizable ()
    {
      return this->visualizable_.get ();
    }

    void Layout::
    visualizable (const visualizable_type& x)
    {
      this->visualizable_.set (x);
    }

    Layout::visualizable_type Layout::
    visualizable_default_value ()
    {
      return visualizable_type (true);
    }


    // VarType
    // 

    VarType::
    VarType (value v)
    : ::xml_schema::string (_xsd_VarType_literals_[v])
    {
    }

    VarType::
    VarType (const char* v)
    : ::xml_schema::string (v)
    {
    }

    VarType::
    VarType (const ::std::string& v)
    : ::xml_schema::string (v)
    {
    }

    VarType::
    VarType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    VarType::
    VarType (const VarType& v,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    VarType& VarType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_VarType_literals_[v]);

      return *this;
    }


    // VarCentering
    // 

    VarCentering::
    VarCentering (value v)
    : ::xml_schema::string (_xsd_VarCentering_literals_[v])
    {
    }

    VarCentering::
    VarCentering (const char* v)
    : ::xml_schema::string (v)
    {
    }

    VarCentering::
    VarCentering (const ::std::string& v)
    : ::xml_schema::string (v)
    {
    }

    VarCentering::
    VarCentering (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    VarCentering::
    VarCentering (const VarCentering& v,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    VarCentering& VarCentering::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_VarCentering_literals_[v]);

      return *this;
    }


    // Variable
    // 

    const Variable::name_type& Variable::
    name () const
    {
      return this->name_.get ();
    }

    Variable::name_type& Variable::
    name ()
    {
      return this->name_.get ();
    }

    void Variable::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void Variable::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }

    const Variable::unit_type& Variable::
    unit () const
    {
      return this->unit_.get ();
    }

    Variable::unit_type& Variable::
    unit ()
    {
      return this->unit_.get ();
    }

    void Variable::
    unit (const unit_type& x)
    {
      this->unit_.set (x);
    }

    void Variable::
    unit (::std::auto_ptr< unit_type > x)
    {
      this->unit_.set (x);
    }

    const Variable::unit_type& Variable::
    unit_default_value ()
    {
      return unit_default_value_;
    }

    const Variable::layout_type& Variable::
    layout () const
    {
      return this->layout_.get ();
    }

    Variable::layout_type& Variable::
    layout ()
    {
      return this->layout_.get ();
    }

    void Variable::
    layout (const layout_type& x)
    {
      this->layout_.set (x);
    }

    void Variable::
    layout (::std::auto_ptr< layout_type > x)
    {
      this->layout_.set (x);
    }

    const Variable::enabled_type& Variable::
    enabled () const
    {
      return this->enabled_.get ();
    }

    Variable::enabled_type& Variable::
    enabled ()
    {
      return this->enabled_.get ();
    }

    void Variable::
    enabled (const enabled_type& x)
    {
      this->enabled_.set (x);
    }

    Variable::enabled_type Variable::
    enabled_default_value ()
    {
      return enabled_type (true);
    }

    const Variable::mesh_type& Variable::
    mesh () const
    {
      return this->mesh_.get ();
    }

    Variable::mesh_type& Variable::
    mesh ()
    {
      return this->mesh_.get ();
    }

    void Variable::
    mesh (const mesh_type& x)
    {
      this->mesh_.set (x);
    }

    void Variable::
    mesh (::std::auto_ptr< mesh_type > x)
    {
      this->mesh_.set (x);
    }

    const Variable::mesh_type& Variable::
    mesh_default_value ()
    {
      return mesh_default_value_;
    }

    const Variable::type_type& Variable::
    type () const
    {
      return this->type_.get ();
    }

    Variable::type_type& Variable::
    type ()
    {
      return this->type_.get ();
    }

    void Variable::
    type (const type_type& x)
    {
      this->type_.set (x);
    }

    void Variable::
    type (::std::auto_ptr< type_type > x)
    {
      this->type_.set (x);
    }

    const Variable::type_type& Variable::
    type_default_value ()
    {
      return type_default_value_;
    }

    const Variable::centering_type& Variable::
    centering () const
    {
      return this->centering_.get ();
    }

    Variable::centering_type& Variable::
    centering ()
    {
      return this->centering_.get ();
    }

    void Variable::
    centering (const centering_type& x)
    {
      this->centering_.set (x);
    }

    void Variable::
    centering (::std::auto_ptr< centering_type > x)
    {
      this->centering_.set (x);
    }

    const Variable::centering_type& Variable::
    centering_default_value ()
    {
      return centering_default_value_;
    }

    const Variable::visualizable_type& Variable::
    visualizable () const
    {
      return this->visualizable_.get ();
    }

    Variable::visualizable_type& Variable::
    visualizable ()
    {
      return this->visualizable_.get ();
    }

    void Variable::
    visualizable (const visualizable_type& x)
    {
      this->visualizable_.set (x);
    }

    Variable::visualizable_type Variable::
    visualizable_default_value ()
    {
      return visualizable_type (true);
    }

    const Variable::time_varying_type& Variable::
    time_varying () const
    {
      return this->time_varying_.get ();
    }

    Variable::time_varying_type& Variable::
    time_varying ()
    {
      return this->time_varying_.get ();
    }

    void Variable::
    time_varying (const time_varying_type& x)
    {
      this->time_varying_.set (x);
    }

    Variable::time_varying_type Variable::
    time_varying_default_value ()
    {
      return time_varying_type (true);
    }


    // Group
    // 

    const Group::variable_sequence& Group::
    variable () const
    {
      return this->variable_;
    }

    Group::variable_sequence& Group::
    variable ()
    {
      return this->variable_;
    }

    void Group::
    variable (const variable_sequence& s)
    {
      this->variable_ = s;
    }

    const Group::group_sequence& Group::
    group () const
    {
      return this->group_;
    }

    Group::group_sequence& Group::
    group ()
    {
      return this->group_;
    }

    void Group::
    group (const group_sequence& s)
    {
      this->group_ = s;
    }

    const Group::mesh_sequence& Group::
    mesh () const
    {
      return this->mesh_;
    }

    Group::mesh_sequence& Group::
    mesh ()
    {
      return this->mesh_;
    }

    void Group::
    mesh (const mesh_sequence& s)
    {
      this->mesh_ = s;
    }

    const Group::curve_sequence& Group::
    curve () const
    {
      return this->curve_;
    }

    Group::curve_sequence& Group::
    curve ()
    {
      return this->curve_;
    }

    void Group::
    curve (const curve_sequence& s)
    {
      this->curve_ = s;
    }

    const Group::name_type& Group::
    name () const
    {
      return this->name_.get ();
    }

    Group::name_type& Group::
    name ()
    {
      return this->name_.get ();
    }

    void Group::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void Group::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }

    const Group::enabled_type& Group::
    enabled () const
    {
      return this->enabled_.get ();
    }

    Group::enabled_type& Group::
    enabled ()
    {
      return this->enabled_.get ();
    }

    void Group::
    enabled (const enabled_type& x)
    {
      this->enabled_.set (x);
    }

    Group::enabled_type Group::
    enabled_default_value ()
    {
      return enabled_type (true);
    }


    // Parameter
    // 

    const Parameter::name_type& Parameter::
    name () const
    {
      return this->name_.get ();
    }

    Parameter::name_type& Parameter::
    name ()
    {
      return this->name_.get ();
    }

    void Parameter::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void Parameter::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }

    const Parameter::type_type& Parameter::
    type () const
    {
      return this->type_.get ();
    }

    Parameter::type_type& Parameter::
    type ()
    {
      return this->type_.get ();
    }

    void Parameter::
    type (const type_type& x)
    {
      this->type_.set (x);
    }

    void Parameter::
    type (::std::auto_ptr< type_type > x)
    {
      this->type_.set (x);
    }

    const Parameter::value_type& Parameter::
    value () const
    {
      return this->value_.get ();
    }

    Parameter::value_type& Parameter::
    value ()
    {
      return this->value_.get ();
    }

    void Parameter::
    value (const value_type& x)
    {
      this->value_.set (x);
    }

    void Parameter::
    value (::std::auto_ptr< value_type > x)
    {
      this->value_.set (x);
    }


    // MeshType
    // 

    MeshType::
    MeshType (value v)
    : ::xml_schema::string (_xsd_MeshType_literals_[v])
    {
    }

    MeshType::
    MeshType (const char* v)
    : ::xml_schema::string (v)
    {
    }

    MeshType::
    MeshType (const ::std::string& v)
    : ::xml_schema::string (v)
    {
    }

    MeshType::
    MeshType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    MeshType::
    MeshType (const MeshType& v,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    MeshType& MeshType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_MeshType_literals_[v]);

      return *this;
    }


    // Coord
    // 

    const Coord::name_type& Coord::
    name () const
    {
      return this->name_.get ();
    }

    Coord::name_type& Coord::
    name ()
    {
      return this->name_.get ();
    }

    void Coord::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void Coord::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }

    const Coord::unit_type& Coord::
    unit () const
    {
      return this->unit_.get ();
    }

    Coord::unit_type& Coord::
    unit ()
    {
      return this->unit_.get ();
    }

    void Coord::
    unit (const unit_type& x)
    {
      this->unit_.set (x);
    }

    void Coord::
    unit (::std::auto_ptr< unit_type > x)
    {
      this->unit_.set (x);
    }

    const Coord::unit_type& Coord::
    unit_default_value ()
    {
      return unit_default_value_;
    }

    const Coord::label_type& Coord::
    label () const
    {
      return this->label_.get ();
    }

    Coord::label_type& Coord::
    label ()
    {
      return this->label_.get ();
    }

    void Coord::
    label (const label_type& x)
    {
      this->label_.set (x);
    }

    void Coord::
    label (::std::auto_ptr< label_type > x)
    {
      this->label_.set (x);
    }

    const Coord::label_type& Coord::
    label_default_value ()
    {
      return label_default_value_;
    }


    // Mesh
    // 

    const Mesh::coord_sequence& Mesh::
    coord () const
    {
      return this->coord_;
    }

    Mesh::coord_sequence& Mesh::
    coord ()
    {
      return this->coord_;
    }

    void Mesh::
    coord (const coord_sequence& s)
    {
      this->coord_ = s;
    }

    const Mesh::name_type& Mesh::
    name () const
    {
      return this->name_.get ();
    }

    Mesh::name_type& Mesh::
    name ()
    {
      return this->name_.get ();
    }

    void Mesh::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void Mesh::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }

    const Mesh::type_type& Mesh::
    type () const
    {
      return this->type_.get ();
    }

    Mesh::type_type& Mesh::
    type ()
    {
      return this->type_.get ();
    }

    void Mesh::
    type (const type_type& x)
    {
      this->type_.set (x);
    }

    void Mesh::
    type (::std::auto_ptr< type_type > x)
    {
      this->type_.set (x);
    }

    const Mesh::topology_type& Mesh::
    topology () const
    {
      return this->topology_.get ();
    }

    Mesh::topology_type& Mesh::
    topology ()
    {
      return this->topology_.get ();
    }

    void Mesh::
    topology (const topology_type& x)
    {
      this->topology_.set (x);
    }

    Mesh::topology_type Mesh::
    topology_default_value ()
    {
      return topology_type (2);
    }


    // Curve
    // 

    const Curve::coord_sequence& Curve::
    coord () const
    {
      return this->coord_;
    }

    Curve::coord_sequence& Curve::
    coord ()
    {
      return this->coord_;
    }

    void Curve::
    coord (const coord_sequence& s)
    {
      this->coord_ = s;
    }

    const Curve::name_type& Curve::
    name () const
    {
      return this->name_.get ();
    }

    Curve::name_type& Curve::
    name ()
    {
      return this->name_.get ();
    }

    void Curve::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void Curve::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }


    // Data
    // 

    const Data::parameter_sequence& Data::
    parameter () const
    {
      return this->parameter_;
    }

    Data::parameter_sequence& Data::
    parameter ()
    {
      return this->parameter_;
    }

    void Data::
    parameter (const parameter_sequence& s)
    {
      this->parameter_ = s;
    }

    const Data::layout_sequence& Data::
    layout () const
    {
      return this->layout_;
    }

    Data::layout_sequence& Data::
    layout ()
    {
      return this->layout_;
    }

    void Data::
    layout (const layout_sequence& s)
    {
      this->layout_ = s;
    }

    const Data::variable_sequence& Data::
    variable () const
    {
      return this->variable_;
    }

    Data::variable_sequence& Data::
    variable ()
    {
      return this->variable_;
    }

    void Data::
    variable (const variable_sequence& s)
    {
      this->variable_ = s;
    }

    const Data::group_sequence& Data::
    group () const
    {
      return this->group_;
    }

    Data::group_sequence& Data::
    group ()
    {
      return this->group_;
    }

    void Data::
    group (const group_sequence& s)
    {
      this->group_ = s;
    }

    const Data::mesh_sequence& Data::
    mesh () const
    {
      return this->mesh_;
    }

    Data::mesh_sequence& Data::
    mesh ()
    {
      return this->mesh_;
    }

    void Data::
    mesh (const mesh_sequence& s)
    {
      this->mesh_ = s;
    }

    const Data::curve_sequence& Data::
    curve () const
    {
      return this->curve_;
    }

    Data::curve_sequence& Data::
    curve ()
    {
      return this->curve_;
    }

    void Data::
    curve (const curve_sequence& s)
    {
      this->curve_ = s;
    }


    // Scope
    // 

    Scope::
    Scope (value v)
    : ::xml_schema::string (_xsd_Scope_literals_[v])
    {
    }

    Scope::
    Scope (const char* v)
    : ::xml_schema::string (v)
    {
    }

    Scope::
    Scope (const ::std::string& v)
    : ::xml_schema::string (v)
    {
    }

    Scope::
    Scope (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    Scope::
    Scope (const Scope& v,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    Scope& Scope::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_Scope_literals_[v]);

      return *this;
    }


    // Event
    // 

    const Event::name_type& Event::
    name () const
    {
      return this->name_.get ();
    }

    Event::name_type& Event::
    name ()
    {
      return this->name_.get ();
    }

    void Event::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void Event::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }

    const Event::action_type& Event::
    action () const
    {
      return this->action_.get ();
    }

    Event::action_type& Event::
    action ()
    {
      return this->action_.get ();
    }

    void Event::
    action (const action_type& x)
    {
      this->action_.set (x);
    }

    void Event::
    action (::std::auto_ptr< action_type > x)
    {
      this->action_.set (x);
    }

    const Event::library_type& Event::
    library () const
    {
      return this->library_.get ();
    }

    Event::library_type& Event::
    library ()
    {
      return this->library_.get ();
    }

    void Event::
    library (const library_type& x)
    {
      this->library_.set (x);
    }

    void Event::
    library (::std::auto_ptr< library_type > x)
    {
      this->library_.set (x);
    }

    const Event::library_type& Event::
    library_default_value ()
    {
      return library_default_value_;
    }

    const Event::scope_type& Event::
    scope () const
    {
      return this->scope_.get ();
    }

    Event::scope_type& Event::
    scope ()
    {
      return this->scope_.get ();
    }

    void Event::
    scope (const scope_type& x)
    {
      this->scope_.set (x);
    }

    void Event::
    scope (::std::auto_ptr< scope_type > x)
    {
      this->scope_.set (x);
    }

    const Event::scope_type& Event::
    scope_default_value ()
    {
      return scope_default_value_;
    }

    const Event::external_type& Event::
    external () const
    {
      return this->external_.get ();
    }

    Event::external_type& Event::
    external ()
    {
      return this->external_.get ();
    }

    void Event::
    external (const external_type& x)
    {
      this->external_.set (x);
    }

    Event::external_type Event::
    external_default_value ()
    {
      return external_type (false);
    }


    // Script
    // 

    const Script::name_type& Script::
    name () const
    {
      return this->name_.get ();
    }

    Script::name_type& Script::
    name ()
    {
      return this->name_.get ();
    }

    void Script::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void Script::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }

    const Script::file_type& Script::
    file () const
    {
      return this->file_.get ();
    }

    Script::file_type& Script::
    file ()
    {
      return this->file_.get ();
    }

    void Script::
    file (const file_type& x)
    {
      this->file_.set (x);
    }

    void Script::
    file (::std::auto_ptr< file_type > x)
    {
      this->file_.set (x);
    }

    const Script::language_type& Script::
    language () const
    {
      return this->language_.get ();
    }

    Script::language_type& Script::
    language ()
    {
      return this->language_.get ();
    }

    void Script::
    language (const language_type& x)
    {
      this->language_.set (x);
    }

    void Script::
    language (::std::auto_ptr< language_type > x)
    {
      this->language_.set (x);
    }

    const Script::scope_type& Script::
    scope () const
    {
      return this->scope_.get ();
    }

    Script::scope_type& Script::
    scope ()
    {
      return this->scope_.get ();
    }

    void Script::
    scope (const scope_type& x)
    {
      this->scope_.set (x);
    }

    void Script::
    scope (::std::auto_ptr< scope_type > x)
    {
      this->scope_.set (x);
    }

    const Script::scope_type& Script::
    scope_default_value ()
    {
      return scope_default_value_;
    }

    const Script::external_type& Script::
    external () const
    {
      return this->external_.get ();
    }

    Script::external_type& Script::
    external ()
    {
      return this->external_.get ();
    }

    void Script::
    external (const external_type& x)
    {
      this->external_.set (x);
    }

    Script::external_type Script::
    external_default_value ()
    {
      return external_type (false);
    }


    // Exception
    // 

    const Exception::event_optional& Exception::
    event () const
    {
      return this->event_;
    }

    Exception::event_optional& Exception::
    event ()
    {
      return this->event_;
    }

    void Exception::
    event (const event_type& x)
    {
      this->event_.set (x);
    }

    void Exception::
    event (const event_optional& x)
    {
      this->event_ = x;
    }

    void Exception::
    event (::std::auto_ptr< event_type > x)
    {
      this->event_.set (x);
    }

    const Exception::script_optional& Exception::
    script () const
    {
      return this->script_;
    }

    Exception::script_optional& Exception::
    script ()
    {
      return this->script_;
    }

    void Exception::
    script (const script_type& x)
    {
      this->script_.set (x);
    }

    void Exception::
    script (const script_optional& x)
    {
      this->script_ = x;
    }

    void Exception::
    script (::std::auto_ptr< script_type > x)
    {
      this->script_.set (x);
    }


    // VisitParam
    // 

    const VisitParam::path_optional& VisitParam::
    path () const
    {
      return this->path_;
    }

    VisitParam::path_optional& VisitParam::
    path ()
    {
      return this->path_;
    }

    void VisitParam::
    path (const path_type& x)
    {
      this->path_.set (x);
    }

    void VisitParam::
    path (const path_optional& x)
    {
      this->path_ = x;
    }

    void VisitParam::
    path (::std::auto_ptr< path_type > x)
    {
      this->path_.set (x);
    }

    const VisitParam::options_optional& VisitParam::
    options () const
    {
      return this->options_;
    }

    VisitParam::options_optional& VisitParam::
    options ()
    {
      return this->options_;
    }

    void VisitParam::
    options (const options_type& x)
    {
      this->options_.set (x);
    }

    void VisitParam::
    options (const options_optional& x)
    {
      this->options_ = x;
    }

    void VisitParam::
    options (::std::auto_ptr< options_type > x)
    {
      this->options_.set (x);
    }


    // PythonParam
    // 

    const PythonParam::path_type& PythonParam::
    path () const
    {
      return this->path_.get ();
    }

    PythonParam::path_type& PythonParam::
    path ()
    {
      return this->path_.get ();
    }

    void PythonParam::
    path (const path_type& x)
    {
      this->path_.set (x);
    }

    void PythonParam::
    path (::std::auto_ptr< path_type > x)
    {
      this->path_.set (x);
    }

    const PythonParam::home_type& PythonParam::
    home () const
    {
      return this->home_.get ();
    }

    PythonParam::home_type& PythonParam::
    home ()
    {
      return this->home_.get ();
    }

    void PythonParam::
    home (const home_type& x)
    {
      this->home_.set (x);
    }

    void PythonParam::
    home (::std::auto_ptr< home_type > x)
    {
      this->home_.set (x);
    }


    // Actions
    // 

    const Actions::event_sequence& Actions::
    event () const
    {
      return this->event_;
    }

    Actions::event_sequence& Actions::
    event ()
    {
      return this->event_;
    }

    void Actions::
    event (const event_sequence& s)
    {
      this->event_ = s;
    }

    const Actions::script_sequence& Actions::
    script () const
    {
      return this->script_;
    }

    Actions::script_sequence& Actions::
    script ()
    {
      return this->script_;
    }

    void Actions::
    script (const script_sequence& s)
    {
      this->script_ = s;
    }

    const Actions::error_sequence& Actions::
    error () const
    {
      return this->error_;
    }

    Actions::error_sequence& Actions::
    error ()
    {
      return this->error_;
    }

    void Actions::
    error (const error_sequence& s)
    {
      this->error_ = s;
    }


    // Storage
    // 

    const Storage::basename_type& Storage::
    basename () const
    {
      return this->basename_.get ();
    }

    Storage::basename_type& Storage::
    basename ()
    {
      return this->basename_.get ();
    }

    void Storage::
    basename (const basename_type& x)
    {
      this->basename_.set (x);
    }

    void Storage::
    basename (::std::auto_ptr< basename_type > x)
    {
      this->basename_.set (x);
    }


    // Simulation
    // 

    const Simulation::architecture_type& Simulation::
    architecture () const
    {
      return this->architecture_.get ();
    }

    Simulation::architecture_type& Simulation::
    architecture ()
    {
      return this->architecture_.get ();
    }

    void Simulation::
    architecture (const architecture_type& x)
    {
      this->architecture_.set (x);
    }

    void Simulation::
    architecture (::std::auto_ptr< architecture_type > x)
    {
      this->architecture_.set (x);
    }

    const Simulation::data_type& Simulation::
    data () const
    {
      return this->data_.get ();
    }

    Simulation::data_type& Simulation::
    data ()
    {
      return this->data_.get ();
    }

    void Simulation::
    data (const data_type& x)
    {
      this->data_.set (x);
    }

    void Simulation::
    data (::std::auto_ptr< data_type > x)
    {
      this->data_.set (x);
    }

    const Simulation::storage_type& Simulation::
    storage () const
    {
      return this->storage_.get ();
    }

    Simulation::storage_type& Simulation::
    storage ()
    {
      return this->storage_.get ();
    }

    void Simulation::
    storage (const storage_type& x)
    {
      this->storage_.set (x);
    }

    void Simulation::
    storage (::std::auto_ptr< storage_type > x)
    {
      this->storage_.set (x);
    }

    const Simulation::actions_type& Simulation::
    actions () const
    {
      return this->actions_.get ();
    }

    Simulation::actions_type& Simulation::
    actions ()
    {
      return this->actions_.get ();
    }

    void Simulation::
    actions (const actions_type& x)
    {
      this->actions_.set (x);
    }

    void Simulation::
    actions (::std::auto_ptr< actions_type > x)
    {
      this->actions_.set (x);
    }

    const Simulation::python_optional& Simulation::
    python () const
    {
      return this->python_;
    }

    Simulation::python_optional& Simulation::
    python ()
    {
      return this->python_;
    }

    void Simulation::
    python (const python_type& x)
    {
      this->python_.set (x);
    }

    void Simulation::
    python (const python_optional& x)
    {
      this->python_ = x;
    }

    void Simulation::
    python (::std::auto_ptr< python_type > x)
    {
      this->python_.set (x);
    }

    const Simulation::visit_optional& Simulation::
    visit () const
    {
      return this->visit_;
    }

    Simulation::visit_optional& Simulation::
    visit ()
    {
      return this->visit_;
    }

    void Simulation::
    visit (const visit_type& x)
    {
      this->visit_.set (x);
    }

    void Simulation::
    visit (const visit_optional& x)
    {
      this->visit_ = x;
    }

    void Simulation::
    visit (::std::auto_ptr< visit_type > x)
    {
      this->visit_.set (x);
    }

    const Simulation::name_type& Simulation::
    name () const
    {
      return this->name_.get ();
    }

    Simulation::name_type& Simulation::
    name ()
    {
      return this->name_.get ();
    }

    void Simulation::
    name (const name_type& x)
    {
      this->name_.set (x);
    }

    void Simulation::
    name (::std::auto_ptr< name_type > x)
    {
      this->name_.set (x);
    }

    const Simulation::language_type& Simulation::
    language () const
    {
      return this->language_.get ();
    }

    Simulation::language_type& Simulation::
    language ()
    {
      return this->language_.get ();
    }

    void Simulation::
    language (const language_type& x)
    {
      this->language_.set (x);
    }

    void Simulation::
    language (::std::auto_ptr< language_type > x)
    {
      this->language_.set (x);
    }

    const Simulation::language_type& Simulation::
    language_default_value ()
    {
      return language_default_value_;
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Damaris
{
  namespace Model
  {
    // Clients
    //

    Clients::
    Clients (const count_type& count)
    : ::xml_schema::type (),
      count_ (count, ::xml_schema::flags (), this),
      domains_ (domains_default_value (), ::xml_schema::flags (), this)
    {
    }

    Clients::
    Clients (const Clients& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      count_ (x.count_, f, this),
      domains_ (x.domains_, f, this)
    {
    }

    Clients::
    Clients (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      count_ (f, this),
      domains_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void Clients::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "count" && n.namespace_ ().empty ())
        {
          this->count_.set (count_traits::create (i, f, this));
          continue;
        }

        if (n.name () == "domains" && n.namespace_ ().empty ())
        {
          this->domains_.set (domains_traits::create (i, f, this));
          continue;
        }
      }

      if (!count_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "count",
          "");
      }

      if (!domains_.present ())
      {
        this->domains_.set (domains_default_value ());
      }
    }

    Clients* Clients::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Clients (*this, f, c);
    }

    Clients::
    ~Clients ()
    {
    }

    // Cores
    //

    Cores::
    Cores (const clients_type& clients,
           const count_type& count)
    : ::xml_schema::type (),
      clients_ (clients, ::xml_schema::flags (), this),
      count_ (count, ::xml_schema::flags (), this)
    {
    }

    Cores::
    Cores (::std::auto_ptr< clients_type >& clients,
           const count_type& count)
    : ::xml_schema::type (),
      clients_ (clients, ::xml_schema::flags (), this),
      count_ (count, ::xml_schema::flags (), this)
    {
    }

    Cores::
    Cores (const Cores& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      clients_ (x.clients_, f, this),
      count_ (x.count_, f, this)
    {
    }

    Cores::
    Cores (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      clients_ (f, this),
      count_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Cores::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // clients
        //
        if (n.name () == "clients" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< clients_type > r (
            clients_traits::create (i, f, this));

          if (!clients_.present ())
          {
            this->clients_.set (r);
            continue;
          }
        }

        break;
      }

      if (!clients_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "clients",
          "http://damaris.gforge.inria.fr/Damaris/Model");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "count" && n.namespace_ ().empty ())
        {
          this->count_.set (count_traits::create (i, f, this));
          continue;
        }
      }

      if (!count_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "count",
          "");
      }
    }

    Cores* Cores::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Cores (*this, f, c);
    }

    Cores::
    ~Cores ()
    {
    }

    // ShmType
    //

    ShmType::
    ShmType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_ShmType_convert ();
    }

    ShmType::
    ShmType (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_ShmType_convert ();
    }

    ShmType::
    ShmType (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_ShmType_convert ();
    }

    ShmType* ShmType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ShmType (*this, f, c);
    }

    ShmType::value ShmType::
    _xsd_ShmType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ShmType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_ShmType_indexes_,
                        _xsd_ShmType_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_ShmType_indexes_ + 2 || _xsd_ShmType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const ShmType::
    _xsd_ShmType_literals_[2] =
    {
      "posix",
      "sysv"
    };

    const ShmType::value ShmType::
    _xsd_ShmType_indexes_[2] =
    {
      ::Damaris::Model::ShmType::posix,
      ::Damaris::Model::ShmType::sysv
    };

    // Buffer
    //

    const Buffer::type_type Buffer::type_default_value_ (
      "posix");

    Buffer::
    Buffer (const name_type& name,
            const size_type& size)
    : ::xml_schema::type (),
      name_ (name, ::xml_schema::flags (), this),
      size_ (size, ::xml_schema::flags (), this),
      type_ (type_default_value (), ::xml_schema::flags (), this),
      blocks_ (blocks_default_value (), ::xml_schema::flags (), this)
    {
    }

    Buffer::
    Buffer (const Buffer& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      name_ (x.name_, f, this),
      size_ (x.size_, f, this),
      type_ (x.type_, f, this),
      blocks_ (x.blocks_, f, this)
    {
    }

    Buffer::
    Buffer (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      name_ (f, this),
      size_ (f, this),
      type_ (f, this),
      blocks_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void Buffer::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "size" && n.namespace_ ().empty ())
        {
          this->size_.set (size_traits::create (i, f, this));
          continue;
        }

        if (n.name () == "type" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< type_type > r (
            type_traits::create (i, f, this));

          this->type_.set (r);
          continue;
        }

        if (n.name () == "blocks" && n.namespace_ ().empty ())
        {
          this->blocks_.set (blocks_traits::create (i, f, this));
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!size_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "size",
          "");
      }

      if (!type_.present ())
      {
        this->type_.set (type_default_value ());
      }

      if (!blocks_.present ())
      {
        this->blocks_.set (blocks_default_value ());
      }
    }

    Buffer* Buffer::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Buffer (*this, f, c);
    }

    Buffer::
    ~Buffer ()
    {
    }

    // Queue
    //

    const Queue::type_type Queue::type_default_value_ (
      "posix");

    Queue::
    Queue (const name_type& name,
           const size_type& size)
    : ::xml_schema::type (),
      name_ (name, ::xml_schema::flags (), this),
      size_ (size, ::xml_schema::flags (), this),
      type_ (type_default_value (), ::xml_schema::flags (), this)
    {
    }

    Queue::
    Queue (const Queue& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      name_ (x.name_, f, this),
      size_ (x.size_, f, this),
      type_ (x.type_, f, this)
    {
    }

    Queue::
    Queue (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      name_ (f, this),
      size_ (f, this),
      type_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void Queue::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "size" && n.namespace_ ().empty ())
        {
          this->size_.set (size_traits::create (i, f, this));
          continue;
        }

        if (n.name () == "type" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< type_type > r (
            type_traits::create (i, f, this));

          this->type_.set (r);
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!size_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "size",
          "");
      }

      if (!type_.present ())
      {
        this->type_.set (type_default_value ());
      }
    }

    Queue* Queue::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Queue (*this, f, c);
    }

    Queue::
    ~Queue ()
    {
    }

    // Architecture
    //

    Architecture::
    Architecture (const cores_type& cores,
                  const buffer_type& buffer,
                  const queue_type& queue)
    : ::xml_schema::type (),
      cores_ (cores, ::xml_schema::flags (), this),
      buffer_ (buffer, ::xml_schema::flags (), this),
      queue_ (queue, ::xml_schema::flags (), this),
      name_ (::xml_schema::flags (), this)
    {
    }

    Architecture::
    Architecture (::std::auto_ptr< cores_type >& cores,
                  ::std::auto_ptr< buffer_type >& buffer,
                  ::std::auto_ptr< queue_type >& queue)
    : ::xml_schema::type (),
      cores_ (cores, ::xml_schema::flags (), this),
      buffer_ (buffer, ::xml_schema::flags (), this),
      queue_ (queue, ::xml_schema::flags (), this),
      name_ (::xml_schema::flags (), this)
    {
    }

    Architecture::
    Architecture (const Architecture& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      cores_ (x.cores_, f, this),
      buffer_ (x.buffer_, f, this),
      queue_ (x.queue_, f, this),
      name_ (x.name_, f, this)
    {
    }

    Architecture::
    Architecture (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      cores_ (f, this),
      buffer_ (f, this),
      queue_ (f, this),
      name_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Architecture::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // cores
        //
        if (n.name () == "cores" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< cores_type > r (
            cores_traits::create (i, f, this));

          if (!cores_.present ())
          {
            this->cores_.set (r);
            continue;
          }
        }

        // buffer
        //
        if (n.name () == "buffer" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< buffer_type > r (
            buffer_traits::create (i, f, this));

          if (!buffer_.present ())
          {
            this->buffer_.set (r);
            continue;
          }
        }

        // queue
        //
        if (n.name () == "queue" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< queue_type > r (
            queue_traits::create (i, f, this));

          if (!queue_.present ())
          {
            this->queue_.set (r);
            continue;
          }
        }

        break;
      }

      if (!cores_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "cores",
          "http://damaris.gforge.inria.fr/Damaris/Model");
      }

      if (!buffer_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "buffer",
          "http://damaris.gforge.inria.fr/Damaris/Model");
      }

      if (!queue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "queue",
          "http://damaris.gforge.inria.fr/Damaris/Model");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }
      }
    }

    Architecture* Architecture::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Architecture (*this, f, c);
    }

    Architecture::
    ~Architecture ()
    {
    }

    // Language
    //

    Language::
    Language (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_Language_convert ();
    }

    Language::
    Language (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_Language_convert ();
    }

    Language::
    Language (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_Language_convert ();
    }

    Language* Language::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Language (*this, f, c);
    }

    Language::value Language::
    _xsd_Language_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Language_literals_);
      const value* i (::std::lower_bound (
                        _xsd_Language_indexes_,
                        _xsd_Language_indexes_ + 5,
                        *this,
                        c));

      if (i == _xsd_Language_indexes_ + 5 || _xsd_Language_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const Language::
    _xsd_Language_literals_[5] =
    {
      "unknown",
      "fortran",
      "c",
      "cpp",
      "python"
    };

    const Language::value Language::
    _xsd_Language_indexes_[5] =
    {
      ::Damaris::Model::Language::c,
      ::Damaris::Model::Language::cpp,
      ::Damaris::Model::Language::fortran,
      ::Damaris::Model::Language::python,
      ::Damaris::Model::Language::unknown
    };

    // Type
    //

    Type::
    Type (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_Type_convert ();
    }

    Type::
    Type (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_Type_convert ();
    }

    Type::
    Type (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_Type_convert ();
    }

    Type* Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Type (*this, f, c);
    }

    Type::value Type::
    _xsd_Type_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Type_literals_);
      const value* i (::std::lower_bound (
                        _xsd_Type_indexes_,
                        _xsd_Type_indexes_ + 11,
                        *this,
                        c));

      if (i == _xsd_Type_indexes_ + 11 || _xsd_Type_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const Type::
    _xsd_Type_literals_[11] =
    {
      "short",
      "int",
      "integer",
      "long",
      "float",
      "real",
      "double",
      "char",
      "character",
      "string",
      "label"
    };

    const Type::value Type::
    _xsd_Type_indexes_[11] =
    {
      ::Damaris::Model::Type::char_,
      ::Damaris::Model::Type::character,
      ::Damaris::Model::Type::double_,
      ::Damaris::Model::Type::float_,
      ::Damaris::Model::Type::int_,
      ::Damaris::Model::Type::integer,
      ::Damaris::Model::Type::label,
      ::Damaris::Model::Type::long_,
      ::Damaris::Model::Type::real,
      ::Damaris::Model::Type::short_,
      ::Damaris::Model::Type::string
    };

    // Layout
    //

    const Layout::language_type Layout::language_default_value_ (
      "unknown");

    Layout::
    Layout (const name_type& name,
            const type_type& type,
            const dimensions_type& dimensions)
    : ::xml_schema::string (),
      name_ (name, ::xml_schema::flags (), this),
      type_ (type, ::xml_schema::flags (), this),
      dimensions_ (dimensions, ::xml_schema::flags (), this),
      language_ (language_default_value (), ::xml_schema::flags (), this),
      visualizable_ (visualizable_default_value (), ::xml_schema::flags (), this)
    {
    }

    Layout::
    Layout (const char* _xsd_string_base,
            const name_type& name,
            const type_type& type,
            const dimensions_type& dimensions)
    : ::xml_schema::string (_xsd_string_base),
      name_ (name, ::xml_schema::flags (), this),
      type_ (type, ::xml_schema::flags (), this),
      dimensions_ (dimensions, ::xml_schema::flags (), this),
      language_ (language_default_value (), ::xml_schema::flags (), this),
      visualizable_ (visualizable_default_value (), ::xml_schema::flags (), this)
    {
    }

    Layout::
    Layout (const ::std::string& _xsd_string_base,
            const name_type& name,
            const type_type& type,
            const dimensions_type& dimensions)
    : ::xml_schema::string (_xsd_string_base),
      name_ (name, ::xml_schema::flags (), this),
      type_ (type, ::xml_schema::flags (), this),
      dimensions_ (dimensions, ::xml_schema::flags (), this),
      language_ (language_default_value (), ::xml_schema::flags (), this),
      visualizable_ (visualizable_default_value (), ::xml_schema::flags (), this)
    {
    }

    Layout::
    Layout (const ::xml_schema::string& _xsd_string_base,
            const name_type& name,
            const type_type& type,
            const dimensions_type& dimensions)
    : ::xml_schema::string (_xsd_string_base),
      name_ (name, ::xml_schema::flags (), this),
      type_ (type, ::xml_schema::flags (), this),
      dimensions_ (dimensions, ::xml_schema::flags (), this),
      language_ (language_default_value (), ::xml_schema::flags (), this),
      visualizable_ (visualizable_default_value (), ::xml_schema::flags (), this)
    {
    }

    Layout::
    Layout (const Layout& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c),
      name_ (x.name_, f, this),
      type_ (x.type_, f, this),
      dimensions_ (x.dimensions_, f, this),
      language_ (x.language_, f, this),
      visualizable_ (x.visualizable_, f, this)
    {
    }

    Layout::
    Layout (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::string (e, f | ::xml_schema::flags::base, c),
      name_ (f, this),
      type_ (f, this),
      dimensions_ (f, this),
      language_ (f, this),
      visualizable_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void Layout::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "type" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< type_type > r (
            type_traits::create (i, f, this));

          this->type_.set (r);
          continue;
        }

        if (n.name () == "dimensions" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< dimensions_type > r (
            dimensions_traits::create (i, f, this));

          this->dimensions_.set (r);
          continue;
        }

        if (n.name () == "language" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< language_type > r (
            language_traits::create (i, f, this));

          this->language_.set (r);
          continue;
        }

        if (n.name () == "visualizable" && n.namespace_ ().empty ())
        {
          this->visualizable_.set (visualizable_traits::create (i, f, this));
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!type_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "type",
          "");
      }

      if (!dimensions_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "dimensions",
          "");
      }

      if (!language_.present ())
      {
        this->language_.set (language_default_value ());
      }

      if (!visualizable_.present ())
      {
        this->visualizable_.set (visualizable_default_value ());
      }
    }

    Layout* Layout::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Layout (*this, f, c);
    }

    Layout::
    ~Layout ()
    {
    }

    // VarType
    //

    VarType::
    VarType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_VarType_convert ();
    }

    VarType::
    VarType (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_VarType_convert ();
    }

    VarType::
    VarType (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_VarType_convert ();
    }

    VarType* VarType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class VarType (*this, f, c);
    }

    VarType::value VarType::
    _xsd_VarType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VarType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_VarType_indexes_,
                        _xsd_VarType_indexes_ + 10,
                        *this,
                        c));

      if (i == _xsd_VarType_indexes_ + 10 || _xsd_VarType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const VarType::
    _xsd_VarType_literals_[10] =
    {
      "scalar",
      "vector",
      "tensor",
      "symmetric-tensor",
      "material",
      "matspecies",
      "label",
      "array",
      "mesh",
      "curve"
    };

    const VarType::value VarType::
    _xsd_VarType_indexes_[10] =
    {
      ::Damaris::Model::VarType::array,
      ::Damaris::Model::VarType::curve,
      ::Damaris::Model::VarType::label,
      ::Damaris::Model::VarType::material,
      ::Damaris::Model::VarType::matspecies,
      ::Damaris::Model::VarType::mesh,
      ::Damaris::Model::VarType::scalar,
      ::Damaris::Model::VarType::symmetric_tensor,
      ::Damaris::Model::VarType::tensor,
      ::Damaris::Model::VarType::vector
    };

    // VarCentering
    //

    VarCentering::
    VarCentering (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_VarCentering_convert ();
    }

    VarCentering::
    VarCentering (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_VarCentering_convert ();
    }

    VarCentering::
    VarCentering (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_VarCentering_convert ();
    }

    VarCentering* VarCentering::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class VarCentering (*this, f, c);
    }

    VarCentering::value VarCentering::
    _xsd_VarCentering_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VarCentering_literals_);
      const value* i (::std::lower_bound (
                        _xsd_VarCentering_indexes_,
                        _xsd_VarCentering_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_VarCentering_indexes_ + 2 || _xsd_VarCentering_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const VarCentering::
    _xsd_VarCentering_literals_[2] =
    {
      "nodal",
      "zonal"
    };

    const VarCentering::value VarCentering::
    _xsd_VarCentering_indexes_[2] =
    {
      ::Damaris::Model::VarCentering::nodal,
      ::Damaris::Model::VarCentering::zonal
    };

    // Variable
    //

    const Variable::unit_type Variable::unit_default_value_ (
      "");

    const Variable::mesh_type Variable::mesh_default_value_ (
      "#");

    const Variable::type_type Variable::type_default_value_ (
      "scalar");

    const Variable::centering_type Variable::centering_default_value_ (
      "zonal");

    Variable::
    Variable (const name_type& name,
              const layout_type& layout)
    : ::xml_schema::string (),
      name_ (name, ::xml_schema::flags (), this),
      unit_ (unit_default_value (), ::xml_schema::flags (), this),
      layout_ (layout, ::xml_schema::flags (), this),
      enabled_ (enabled_default_value (), ::xml_schema::flags (), this),
      mesh_ (mesh_default_value (), ::xml_schema::flags (), this),
      type_ (type_default_value (), ::xml_schema::flags (), this),
      centering_ (centering_default_value (), ::xml_schema::flags (), this),
      visualizable_ (visualizable_default_value (), ::xml_schema::flags (), this),
      time_varying_ (time_varying_default_value (), ::xml_schema::flags (), this)
    {
    }

    Variable::
    Variable (const char* _xsd_string_base,
              const name_type& name,
              const layout_type& layout)
    : ::xml_schema::string (_xsd_string_base),
      name_ (name, ::xml_schema::flags (), this),
      unit_ (unit_default_value (), ::xml_schema::flags (), this),
      layout_ (layout, ::xml_schema::flags (), this),
      enabled_ (enabled_default_value (), ::xml_schema::flags (), this),
      mesh_ (mesh_default_value (), ::xml_schema::flags (), this),
      type_ (type_default_value (), ::xml_schema::flags (), this),
      centering_ (centering_default_value (), ::xml_schema::flags (), this),
      visualizable_ (visualizable_default_value (), ::xml_schema::flags (), this),
      time_varying_ (time_varying_default_value (), ::xml_schema::flags (), this)
    {
    }

    Variable::
    Variable (const ::std::string& _xsd_string_base,
              const name_type& name,
              const layout_type& layout)
    : ::xml_schema::string (_xsd_string_base),
      name_ (name, ::xml_schema::flags (), this),
      unit_ (unit_default_value (), ::xml_schema::flags (), this),
      layout_ (layout, ::xml_schema::flags (), this),
      enabled_ (enabled_default_value (), ::xml_schema::flags (), this),
      mesh_ (mesh_default_value (), ::xml_schema::flags (), this),
      type_ (type_default_value (), ::xml_schema::flags (), this),
      centering_ (centering_default_value (), ::xml_schema::flags (), this),
      visualizable_ (visualizable_default_value (), ::xml_schema::flags (), this),
      time_varying_ (time_varying_default_value (), ::xml_schema::flags (), this)
    {
    }

    Variable::
    Variable (const ::xml_schema::string& _xsd_string_base,
              const name_type& name,
              const layout_type& layout)
    : ::xml_schema::string (_xsd_string_base),
      name_ (name, ::xml_schema::flags (), this),
      unit_ (unit_default_value (), ::xml_schema::flags (), this),
      layout_ (layout, ::xml_schema::flags (), this),
      enabled_ (enabled_default_value (), ::xml_schema::flags (), this),
      mesh_ (mesh_default_value (), ::xml_schema::flags (), this),
      type_ (type_default_value (), ::xml_schema::flags (), this),
      centering_ (centering_default_value (), ::xml_schema::flags (), this),
      visualizable_ (visualizable_default_value (), ::xml_schema::flags (), this),
      time_varying_ (time_varying_default_value (), ::xml_schema::flags (), this)
    {
    }

    Variable::
    Variable (const Variable& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c),
      name_ (x.name_, f, this),
      unit_ (x.unit_, f, this),
      layout_ (x.layout_, f, this),
      enabled_ (x.enabled_, f, this),
      mesh_ (x.mesh_, f, this),
      type_ (x.type_, f, this),
      centering_ (x.centering_, f, this),
      visualizable_ (x.visualizable_, f, this),
      time_varying_ (x.time_varying_, f, this)
    {
    }

    Variable::
    Variable (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::string (e, f | ::xml_schema::flags::base, c),
      name_ (f, this),
      unit_ (f, this),
      layout_ (f, this),
      enabled_ (f, this),
      mesh_ (f, this),
      type_ (f, this),
      centering_ (f, this),
      visualizable_ (f, this),
      time_varying_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void Variable::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "unit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< unit_type > r (
            unit_traits::create (i, f, this));

          this->unit_.set (r);
          continue;
        }

        if (n.name () == "layout" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< layout_type > r (
            layout_traits::create (i, f, this));

          this->layout_.set (r);
          continue;
        }

        if (n.name () == "enabled" && n.namespace_ ().empty ())
        {
          this->enabled_.set (enabled_traits::create (i, f, this));
          continue;
        }

        if (n.name () == "mesh" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< mesh_type > r (
            mesh_traits::create (i, f, this));

          this->mesh_.set (r);
          continue;
        }

        if (n.name () == "type" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< type_type > r (
            type_traits::create (i, f, this));

          this->type_.set (r);
          continue;
        }

        if (n.name () == "centering" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< centering_type > r (
            centering_traits::create (i, f, this));

          this->centering_.set (r);
          continue;
        }

        if (n.name () == "visualizable" && n.namespace_ ().empty ())
        {
          this->visualizable_.set (visualizable_traits::create (i, f, this));
          continue;
        }

        if (n.name () == "time-varying" && n.namespace_ ().empty ())
        {
          this->time_varying_.set (time_varying_traits::create (i, f, this));
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!unit_.present ())
      {
        this->unit_.set (unit_default_value ());
      }

      if (!layout_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "layout",
          "");
      }

      if (!enabled_.present ())
      {
        this->enabled_.set (enabled_default_value ());
      }

      if (!mesh_.present ())
      {
        this->mesh_.set (mesh_default_value ());
      }

      if (!type_.present ())
      {
        this->type_.set (type_default_value ());
      }

      if (!centering_.present ())
      {
        this->centering_.set (centering_default_value ());
      }

      if (!visualizable_.present ())
      {
        this->visualizable_.set (visualizable_default_value ());
      }

      if (!time_varying_.present ())
      {
        this->time_varying_.set (time_varying_default_value ());
      }
    }

    Variable* Variable::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Variable (*this, f, c);
    }

    Variable::
    ~Variable ()
    {
    }

    // Group
    //

    Group::
    Group (const name_type& name)
    : ::xml_schema::type (),
      variable_ (::xml_schema::flags (), this),
      group_ (::xml_schema::flags (), this),
      mesh_ (::xml_schema::flags (), this),
      curve_ (::xml_schema::flags (), this),
      name_ (name, ::xml_schema::flags (), this),
      enabled_ (enabled_default_value (), ::xml_schema::flags (), this)
    {
    }

    Group::
    Group (const Group& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      variable_ (x.variable_, f, this),
      group_ (x.group_, f, this),
      mesh_ (x.mesh_, f, this),
      curve_ (x.curve_, f, this),
      name_ (x.name_, f, this),
      enabled_ (x.enabled_, f, this)
    {
    }

    Group::
    Group (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      variable_ (f, this),
      group_ (f, this),
      mesh_ (f, this),
      curve_ (f, this),
      name_ (f, this),
      enabled_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Group::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // variable
        //
        if (n.name () == "variable" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< variable_type > r (
            variable_traits::create (i, f, this));

          this->variable_.push_back (r);
          continue;
        }

        // group
        //
        if (n.name () == "group" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< group_type > r (
            group_traits::create (i, f, this));

          this->group_.push_back (r);
          continue;
        }

        // mesh
        //
        if (n.name () == "mesh" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< mesh_type > r (
            mesh_traits::create (i, f, this));

          this->mesh_.push_back (r);
          continue;
        }

        // curve
        //
        if (n.name () == "curve" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< curve_type > r (
            curve_traits::create (i, f, this));

          this->curve_.push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "enabled" && n.namespace_ ().empty ())
        {
          this->enabled_.set (enabled_traits::create (i, f, this));
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!enabled_.present ())
      {
        this->enabled_.set (enabled_default_value ());
      }
    }

    Group* Group::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Group (*this, f, c);
    }

    Group::
    ~Group ()
    {
    }

    // Parameter
    //

    Parameter::
    Parameter (const name_type& name,
               const type_type& type,
               const value_type& value)
    : ::xml_schema::string (),
      name_ (name, ::xml_schema::flags (), this),
      type_ (type, ::xml_schema::flags (), this),
      value_ (value, ::xml_schema::flags (), this)
    {
    }

    Parameter::
    Parameter (const char* _xsd_string_base,
               const name_type& name,
               const type_type& type,
               const value_type& value)
    : ::xml_schema::string (_xsd_string_base),
      name_ (name, ::xml_schema::flags (), this),
      type_ (type, ::xml_schema::flags (), this),
      value_ (value, ::xml_schema::flags (), this)
    {
    }

    Parameter::
    Parameter (const ::std::string& _xsd_string_base,
               const name_type& name,
               const type_type& type,
               const value_type& value)
    : ::xml_schema::string (_xsd_string_base),
      name_ (name, ::xml_schema::flags (), this),
      type_ (type, ::xml_schema::flags (), this),
      value_ (value, ::xml_schema::flags (), this)
    {
    }

    Parameter::
    Parameter (const ::xml_schema::string& _xsd_string_base,
               const name_type& name,
               const type_type& type,
               const value_type& value)
    : ::xml_schema::string (_xsd_string_base),
      name_ (name, ::xml_schema::flags (), this),
      type_ (type, ::xml_schema::flags (), this),
      value_ (value, ::xml_schema::flags (), this)
    {
    }

    Parameter::
    Parameter (const Parameter& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c),
      name_ (x.name_, f, this),
      type_ (x.type_, f, this),
      value_ (x.value_, f, this)
    {
    }

    Parameter::
    Parameter (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::string (e, f | ::xml_schema::flags::base, c),
      name_ (f, this),
      type_ (f, this),
      value_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void Parameter::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "type" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< type_type > r (
            type_traits::create (i, f, this));

          this->type_.set (r);
          continue;
        }

        if (n.name () == "value" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< value_type > r (
            value_traits::create (i, f, this));

          this->value_.set (r);
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!type_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "type",
          "");
      }

      if (!value_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "value",
          "");
      }
    }

    Parameter* Parameter::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Parameter (*this, f, c);
    }

    Parameter::
    ~Parameter ()
    {
    }

    // MeshType
    //

    MeshType::
    MeshType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_MeshType_convert ();
    }

    MeshType::
    MeshType (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_MeshType_convert ();
    }

    MeshType::
    MeshType (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_MeshType_convert ();
    }

    MeshType* MeshType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class MeshType (*this, f, c);
    }

    MeshType::value MeshType::
    _xsd_MeshType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MeshType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_MeshType_indexes_,
                        _xsd_MeshType_indexes_ + 7,
                        *this,
                        c));

      if (i == _xsd_MeshType_indexes_ + 7 || _xsd_MeshType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const MeshType::
    _xsd_MeshType_literals_[7] =
    {
      "unknown",
      "rectilinear",
      "curvilinear",
      "unstructured",
      "point",
      "csg",
      "amr"
    };

    const MeshType::value MeshType::
    _xsd_MeshType_indexes_[7] =
    {
      ::Damaris::Model::MeshType::amr,
      ::Damaris::Model::MeshType::csg,
      ::Damaris::Model::MeshType::curvilinear,
      ::Damaris::Model::MeshType::point,
      ::Damaris::Model::MeshType::rectilinear,
      ::Damaris::Model::MeshType::unknown,
      ::Damaris::Model::MeshType::unstructured
    };

    // Coord
    //

    const Coord::unit_type Coord::unit_default_value_ (
      "#");

    const Coord::label_type Coord::label_default_value_ (
      "#");

    Coord::
    Coord (const name_type& name)
    : ::xml_schema::type (),
      name_ (name, ::xml_schema::flags (), this),
      unit_ (unit_default_value (), ::xml_schema::flags (), this),
      label_ (label_default_value (), ::xml_schema::flags (), this)
    {
    }

    Coord::
    Coord (const Coord& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      name_ (x.name_, f, this),
      unit_ (x.unit_, f, this),
      label_ (x.label_, f, this)
    {
    }

    Coord::
    Coord (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      name_ (f, this),
      unit_ (f, this),
      label_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void Coord::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "unit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< unit_type > r (
            unit_traits::create (i, f, this));

          this->unit_.set (r);
          continue;
        }

        if (n.name () == "label" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< label_type > r (
            label_traits::create (i, f, this));

          this->label_.set (r);
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!unit_.present ())
      {
        this->unit_.set (unit_default_value ());
      }

      if (!label_.present ())
      {
        this->label_.set (label_default_value ());
      }
    }

    Coord* Coord::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Coord (*this, f, c);
    }

    Coord::
    ~Coord ()
    {
    }

    // Mesh
    //

    Mesh::
    Mesh (const name_type& name,
          const type_type& type)
    : ::xml_schema::type (),
      coord_ (::xml_schema::flags (), this),
      name_ (name, ::xml_schema::flags (), this),
      type_ (type, ::xml_schema::flags (), this),
      topology_ (topology_default_value (), ::xml_schema::flags (), this)
    {
    }

    Mesh::
    Mesh (const Mesh& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      coord_ (x.coord_, f, this),
      name_ (x.name_, f, this),
      type_ (x.type_, f, this),
      topology_ (x.topology_, f, this)
    {
    }

    Mesh::
    Mesh (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      coord_ (f, this),
      name_ (f, this),
      type_ (f, this),
      topology_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Mesh::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // coord
        //
        if (n.name () == "coord" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< coord_type > r (
            coord_traits::create (i, f, this));

          this->coord_.push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "type" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< type_type > r (
            type_traits::create (i, f, this));

          this->type_.set (r);
          continue;
        }

        if (n.name () == "topology" && n.namespace_ ().empty ())
        {
          this->topology_.set (topology_traits::create (i, f, this));
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!type_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "type",
          "");
      }

      if (!topology_.present ())
      {
        this->topology_.set (topology_default_value ());
      }
    }

    Mesh* Mesh::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Mesh (*this, f, c);
    }

    Mesh::
    ~Mesh ()
    {
    }

    // Curve
    //

    Curve::
    Curve (const name_type& name)
    : ::xml_schema::type (),
      coord_ (::xml_schema::flags (), this),
      name_ (name, ::xml_schema::flags (), this)
    {
    }

    Curve::
    Curve (const Curve& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      coord_ (x.coord_, f, this),
      name_ (x.name_, f, this)
    {
    }

    Curve::
    Curve (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      coord_ (f, this),
      name_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Curve::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // coord
        //
        if (n.name () == "coord" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< coord_type > r (
            coord_traits::create (i, f, this));

          this->coord_.push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }
    }

    Curve* Curve::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Curve (*this, f, c);
    }

    Curve::
    ~Curve ()
    {
    }

    // Data
    //

    Data::
    Data ()
    : ::xml_schema::type (),
      parameter_ (::xml_schema::flags (), this),
      layout_ (::xml_schema::flags (), this),
      variable_ (::xml_schema::flags (), this),
      group_ (::xml_schema::flags (), this),
      mesh_ (::xml_schema::flags (), this),
      curve_ (::xml_schema::flags (), this)
    {
    }

    Data::
    Data (const Data& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      parameter_ (x.parameter_, f, this),
      layout_ (x.layout_, f, this),
      variable_ (x.variable_, f, this),
      group_ (x.group_, f, this),
      mesh_ (x.mesh_, f, this),
      curve_ (x.curve_, f, this)
    {
    }

    Data::
    Data (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      parameter_ (f, this),
      layout_ (f, this),
      variable_ (f, this),
      group_ (f, this),
      mesh_ (f, this),
      curve_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void Data::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // parameter
        //
        if (n.name () == "parameter" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< parameter_type > r (
            parameter_traits::create (i, f, this));

          this->parameter_.push_back (r);
          continue;
        }

        // layout
        //
        if (n.name () == "layout" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< layout_type > r (
            layout_traits::create (i, f, this));

          this->layout_.push_back (r);
          continue;
        }

        // variable
        //
        if (n.name () == "variable" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< variable_type > r (
            variable_traits::create (i, f, this));

          this->variable_.push_back (r);
          continue;
        }

        // group
        //
        if (n.name () == "group" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< group_type > r (
            group_traits::create (i, f, this));

          this->group_.push_back (r);
          continue;
        }

        // mesh
        //
        if (n.name () == "mesh" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< mesh_type > r (
            mesh_traits::create (i, f, this));

          this->mesh_.push_back (r);
          continue;
        }

        // curve
        //
        if (n.name () == "curve" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< curve_type > r (
            curve_traits::create (i, f, this));

          this->curve_.push_back (r);
          continue;
        }

        break;
      }
    }

    Data* Data::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Data (*this, f, c);
    }

    Data::
    ~Data ()
    {
    }

    // Scope
    //

    Scope::
    Scope (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_Scope_convert ();
    }

    Scope::
    Scope (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_Scope_convert ();
    }

    Scope::
    Scope (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_Scope_convert ();
    }

    Scope* Scope::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Scope (*this, f, c);
    }

    Scope::value Scope::
    _xsd_Scope_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Scope_literals_);
      const value* i (::std::lower_bound (
                        _xsd_Scope_indexes_,
                        _xsd_Scope_indexes_ + 4,
                        *this,
                        c));

      if (i == _xsd_Scope_indexes_ + 4 || _xsd_Scope_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const Scope::
    _xsd_Scope_literals_[4] =
    {
      "core",
      "node",
      "global",
      "bcast"
    };

    const Scope::value Scope::
    _xsd_Scope_indexes_[4] =
    {
      ::Damaris::Model::Scope::bcast,
      ::Damaris::Model::Scope::core,
      ::Damaris::Model::Scope::global,
      ::Damaris::Model::Scope::node
    };

    // Event
    //

    const Event::library_type Event::library_default_value_ (
      "");

    const Event::scope_type Event::scope_default_value_ (
      "core");

    Event::
    Event (const name_type& name,
           const action_type& action)
    : ::xml_schema::type (),
      name_ (name, ::xml_schema::flags (), this),
      action_ (action, ::xml_schema::flags (), this),
      library_ (library_default_value (), ::xml_schema::flags (), this),
      scope_ (scope_default_value (), ::xml_schema::flags (), this),
      external_ (external_default_value (), ::xml_schema::flags (), this)
    {
    }

    Event::
    Event (const Event& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      name_ (x.name_, f, this),
      action_ (x.action_, f, this),
      library_ (x.library_, f, this),
      scope_ (x.scope_, f, this),
      external_ (x.external_, f, this)
    {
    }

    Event::
    Event (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      name_ (f, this),
      action_ (f, this),
      library_ (f, this),
      scope_ (f, this),
      external_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void Event::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "action" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< action_type > r (
            action_traits::create (i, f, this));

          this->action_.set (r);
          continue;
        }

        if (n.name () == "library" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< library_type > r (
            library_traits::create (i, f, this));

          this->library_.set (r);
          continue;
        }

        if (n.name () == "scope" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< scope_type > r (
            scope_traits::create (i, f, this));

          this->scope_.set (r);
          continue;
        }

        if (n.name () == "external" && n.namespace_ ().empty ())
        {
          this->external_.set (external_traits::create (i, f, this));
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!action_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "action",
          "");
      }

      if (!library_.present ())
      {
        this->library_.set (library_default_value ());
      }

      if (!scope_.present ())
      {
        this->scope_.set (scope_default_value ());
      }

      if (!external_.present ())
      {
        this->external_.set (external_default_value ());
      }
    }

    Event* Event::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Event (*this, f, c);
    }

    Event::
    ~Event ()
    {
    }

    // Script
    //

    const Script::scope_type Script::scope_default_value_ (
      "core");

    Script::
    Script (const name_type& name,
            const file_type& file,
            const language_type& language)
    : ::xml_schema::type (),
      name_ (name, ::xml_schema::flags (), this),
      file_ (file, ::xml_schema::flags (), this),
      language_ (language, ::xml_schema::flags (), this),
      scope_ (scope_default_value (), ::xml_schema::flags (), this),
      external_ (external_default_value (), ::xml_schema::flags (), this)
    {
    }

    Script::
    Script (const Script& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      name_ (x.name_, f, this),
      file_ (x.file_, f, this),
      language_ (x.language_, f, this),
      scope_ (x.scope_, f, this),
      external_ (x.external_, f, this)
    {
    }

    Script::
    Script (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      name_ (f, this),
      file_ (f, this),
      language_ (f, this),
      scope_ (f, this),
      external_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void Script::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "file" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< file_type > r (
            file_traits::create (i, f, this));

          this->file_.set (r);
          continue;
        }

        if (n.name () == "language" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< language_type > r (
            language_traits::create (i, f, this));

          this->language_.set (r);
          continue;
        }

        if (n.name () == "scope" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< scope_type > r (
            scope_traits::create (i, f, this));

          this->scope_.set (r);
          continue;
        }

        if (n.name () == "external" && n.namespace_ ().empty ())
        {
          this->external_.set (external_traits::create (i, f, this));
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!file_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "file",
          "");
      }

      if (!language_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "language",
          "");
      }

      if (!scope_.present ())
      {
        this->scope_.set (scope_default_value ());
      }

      if (!external_.present ())
      {
        this->external_.set (external_default_value ());
      }
    }

    Script* Script::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Script (*this, f, c);
    }

    Script::
    ~Script ()
    {
    }

    // Exception
    //

    Exception::
    Exception ()
    : ::xml_schema::type (),
      event_ (::xml_schema::flags (), this),
      script_ (::xml_schema::flags (), this)
    {
    }

    Exception::
    Exception (const Exception& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      event_ (x.event_, f, this),
      script_ (x.script_, f, this)
    {
    }

    Exception::
    Exception (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      event_ (f, this),
      script_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void Exception::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "event" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< event_type > r (
            event_traits::create (i, f, this));

          this->event_.set (r);
          continue;
        }

        if (n.name () == "script" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< script_type > r (
            script_traits::create (i, f, this));

          this->script_.set (r);
          continue;
        }
      }
    }

    Exception* Exception::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Exception (*this, f, c);
    }

    Exception::
    ~Exception ()
    {
    }

    // VisitParam
    //

    VisitParam::
    VisitParam ()
    : ::xml_schema::type (),
      path_ (::xml_schema::flags (), this),
      options_ (::xml_schema::flags (), this)
    {
    }

    VisitParam::
    VisitParam (const VisitParam& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      path_ (x.path_, f, this),
      options_ (x.options_, f, this)
    {
    }

    VisitParam::
    VisitParam (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      path_ (f, this),
      options_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void VisitParam::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // path
        //
        if (n.name () == "path" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< path_type > r (
            path_traits::create (i, f, this));

          if (!this->path_)
          {
            this->path_.set (r);
            continue;
          }
        }

        // options
        //
        if (n.name () == "options" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< options_type > r (
            options_traits::create (i, f, this));

          if (!this->options_)
          {
            this->options_.set (r);
            continue;
          }
        }

        break;
      }
    }

    VisitParam* VisitParam::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class VisitParam (*this, f, c);
    }

    VisitParam::
    ~VisitParam ()
    {
    }

    // PythonParam
    //

    PythonParam::
    PythonParam (const path_type& path,
                 const home_type& home)
    : ::xml_schema::type (),
      path_ (path, ::xml_schema::flags (), this),
      home_ (home, ::xml_schema::flags (), this)
    {
    }

    PythonParam::
    PythonParam (const PythonParam& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      path_ (x.path_, f, this),
      home_ (x.home_, f, this)
    {
    }

    PythonParam::
    PythonParam (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      path_ (f, this),
      home_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void PythonParam::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // path
        //
        if (n.name () == "path" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< path_type > r (
            path_traits::create (i, f, this));

          if (!path_.present ())
          {
            this->path_.set (r);
            continue;
          }
        }

        // home
        //
        if (n.name () == "home" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< home_type > r (
            home_traits::create (i, f, this));

          if (!home_.present ())
          {
            this->home_.set (r);
            continue;
          }
        }

        break;
      }

      if (!path_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "path",
          "http://damaris.gforge.inria.fr/Damaris/Model");
      }

      if (!home_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "home",
          "http://damaris.gforge.inria.fr/Damaris/Model");
      }
    }

    PythonParam* PythonParam::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PythonParam (*this, f, c);
    }

    PythonParam::
    ~PythonParam ()
    {
    }

    // Actions
    //

    Actions::
    Actions ()
    : ::xml_schema::type (),
      event_ (::xml_schema::flags (), this),
      script_ (::xml_schema::flags (), this),
      error_ (::xml_schema::flags (), this)
    {
    }

    Actions::
    Actions (const Actions& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      event_ (x.event_, f, this),
      script_ (x.script_, f, this),
      error_ (x.error_, f, this)
    {
    }

    Actions::
    Actions (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      event_ (f, this),
      script_ (f, this),
      error_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void Actions::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // event
        //
        if (n.name () == "event" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< event_type > r (
            event_traits::create (i, f, this));

          this->event_.push_back (r);
          continue;
        }

        // script
        //
        if (n.name () == "script" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< script_type > r (
            script_traits::create (i, f, this));

          this->script_.push_back (r);
          continue;
        }

        // error
        //
        if (n.name () == "error" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< error_type > r (
            error_traits::create (i, f, this));

          this->error_.push_back (r);
          continue;
        }

        break;
      }
    }

    Actions* Actions::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Actions (*this, f, c);
    }

    Actions::
    ~Actions ()
    {
    }

    // Storage
    //

    Storage::
    Storage (const basename_type& basename)
    : ::xml_schema::type (),
      basename_ (basename, ::xml_schema::flags (), this)
    {
    }

    Storage::
    Storage (const Storage& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      basename_ (x.basename_, f, this)
    {
    }

    Storage::
    Storage (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      basename_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void Storage::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "basename" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< basename_type > r (
            basename_traits::create (i, f, this));

          this->basename_.set (r);
          continue;
        }
      }

      if (!basename_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "basename",
          "");
      }
    }

    Storage* Storage::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Storage (*this, f, c);
    }

    Storage::
    ~Storage ()
    {
    }

    // Simulation
    //

    const Simulation::language_type Simulation::language_default_value_ (
      "unknown");

    Simulation::
    Simulation (const architecture_type& architecture,
                const data_type& data,
                const storage_type& storage,
                const actions_type& actions,
                const name_type& name)
    : ::xml_schema::type (),
      architecture_ (architecture, ::xml_schema::flags (), this),
      data_ (data, ::xml_schema::flags (), this),
      storage_ (storage, ::xml_schema::flags (), this),
      actions_ (actions, ::xml_schema::flags (), this),
      python_ (::xml_schema::flags (), this),
      visit_ (::xml_schema::flags (), this),
      name_ (name, ::xml_schema::flags (), this),
      language_ (language_default_value (), ::xml_schema::flags (), this)
    {
    }

    Simulation::
    Simulation (::std::auto_ptr< architecture_type >& architecture,
                ::std::auto_ptr< data_type >& data,
                ::std::auto_ptr< storage_type >& storage,
                ::std::auto_ptr< actions_type >& actions,
                const name_type& name)
    : ::xml_schema::type (),
      architecture_ (architecture, ::xml_schema::flags (), this),
      data_ (data, ::xml_schema::flags (), this),
      storage_ (storage, ::xml_schema::flags (), this),
      actions_ (actions, ::xml_schema::flags (), this),
      python_ (::xml_schema::flags (), this),
      visit_ (::xml_schema::flags (), this),
      name_ (name, ::xml_schema::flags (), this),
      language_ (language_default_value (), ::xml_schema::flags (), this)
    {
    }

    Simulation::
    Simulation (const Simulation& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      architecture_ (x.architecture_, f, this),
      data_ (x.data_, f, this),
      storage_ (x.storage_, f, this),
      actions_ (x.actions_, f, this),
      python_ (x.python_, f, this),
      visit_ (x.visit_, f, this),
      name_ (x.name_, f, this),
      language_ (x.language_, f, this)
    {
    }

    Simulation::
    Simulation (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      architecture_ (f, this),
      data_ (f, this),
      storage_ (f, this),
      actions_ (f, this),
      python_ (f, this),
      visit_ (f, this),
      name_ (f, this),
      language_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Simulation::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // architecture
        //
        if (n.name () == "architecture" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< architecture_type > r (
            architecture_traits::create (i, f, this));

          if (!architecture_.present ())
          {
            this->architecture_.set (r);
            continue;
          }
        }

        // data
        //
        if (n.name () == "data" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< data_type > r (
            data_traits::create (i, f, this));

          if (!data_.present ())
          {
            this->data_.set (r);
            continue;
          }
        }

        // storage
        //
        if (n.name () == "storage" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< storage_type > r (
            storage_traits::create (i, f, this));

          if (!storage_.present ())
          {
            this->storage_.set (r);
            continue;
          }
        }

        // actions
        //
        if (n.name () == "actions" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< actions_type > r (
            actions_traits::create (i, f, this));

          if (!actions_.present ())
          {
            this->actions_.set (r);
            continue;
          }
        }

        // python
        //
        if (n.name () == "python" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< python_type > r (
            python_traits::create (i, f, this));

          if (!this->python_)
          {
            this->python_.set (r);
            continue;
          }
        }

        // visit
        //
        if (n.name () == "visit" && n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
        {
          ::std::auto_ptr< visit_type > r (
            visit_traits::create (i, f, this));

          if (!this->visit_)
          {
            this->visit_.set (r);
            continue;
          }
        }

        break;
      }

      if (!architecture_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "architecture",
          "http://damaris.gforge.inria.fr/Damaris/Model");
      }

      if (!data_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "data",
          "http://damaris.gforge.inria.fr/Damaris/Model");
      }

      if (!storage_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "storage",
          "http://damaris.gforge.inria.fr/Damaris/Model");
      }

      if (!actions_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "actions",
          "http://damaris.gforge.inria.fr/Damaris/Model");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< name_type > r (
            name_traits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "language" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< language_type > r (
            language_traits::create (i, f, this));

          this->language_.set (r);
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!language_.present ())
      {
        this->language_.set (language_default_value ());
      }
    }

    Simulation* Simulation::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Simulation (*this, f, c);
    }

    Simulation::
    ~Simulation ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Damaris
{
  namespace Model
  {
    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::Damaris::Model::Simulation > r (
        ::Damaris::Model::simulation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::Damaris::Model::Simulation > r (
        ::Damaris::Model::simulation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::Damaris::Model::Simulation > r (
        ::Damaris::Model::simulation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::Damaris::Model::simulation (isrc, f, p);
    }

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::Damaris::Model::simulation (isrc, h, f, p);
    }

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::Damaris::Model::simulation (isrc, h, f, p);
    }

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::Damaris::Model::simulation (isrc, f, p);
    }

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::Damaris::Model::simulation (isrc, h, f, p);
    }

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::Damaris::Model::simulation (isrc, h, f, p);
    }

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::Damaris::Model::Simulation > r (
        ::Damaris::Model::simulation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::Damaris::Model::Simulation > r (
        ::Damaris::Model::simulation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::Damaris::Model::Simulation > r (
        ::Damaris::Model::simulation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::Damaris::Model::Simulation > r (
          ::Damaris::Model::simulation (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "simulation" &&
          n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
      {
        ::std::auto_ptr< ::Damaris::Model::Simulation > r (
          ::xsd::cxx::tree::traits< ::Damaris::Model::Simulation, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "simulation",
        "http://damaris.gforge.inria.fr/Damaris/Model");
    }

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "simulation" &&
          n.namespace_ () == "http://damaris.gforge.inria.fr/Damaris/Model")
      {
        ::std::auto_ptr< ::Damaris::Model::Simulation > r (
          ::xsd::cxx::tree::traits< ::Damaris::Model::Simulation, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "simulation",
        "http://damaris.gforge.inria.fr/Damaris/Model");
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

