// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MODEL_HPP
#define MODEL_HPP

// Begin prologue.
//
/*******************************************************************
This file is part of Damaris.

Damaris is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Damaris is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Damaris.  If not, see <http://www.gnu.org/licenses/>.
********************************************************************/
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace Damaris
{
  namespace Model
  {
    class Clients;
    class Cores;
    class ShmType;
    class Buffer;
    class Queue;
    class Architecture;
    class Language;
    class Type;
    class Layout;
    class VarType;
    class VarCentering;
    class Variable;
    class Group;
    class Parameter;
    class MeshType;
    class MeshCoord;
    class Mesh;
    class Data;
    class Scope;
    class Event;
    class Script;
    class Actions;
    class Simulation;
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace Damaris
{
  namespace Model
  {
    class Clients: public ::xml_schema::type
    {
      public:
      // count
      // 
      typedef ::xml_schema::unsigned_int count_type;
      typedef ::xsd::cxx::tree::traits< count_type, char > count_traits;

      const count_type&
      count () const;

      count_type&
      count ();

      void
      count (const count_type& x);

      // Constructors.
      //
      Clients (const count_type&);

      Clients (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      Clients (const Clients& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      virtual Clients*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Clients ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< count_type > count_;
    };

    class Cores: public ::xml_schema::type
    {
      public:
      // clients
      // 
      typedef ::Damaris::Model::Clients clients_type;
      typedef ::xsd::cxx::tree::traits< clients_type, char > clients_traits;

      const clients_type&
      clients () const;

      clients_type&
      clients ();

      void
      clients (const clients_type& x);

      void
      clients (::std::auto_ptr< clients_type > p);

      // count
      // 
      typedef ::xml_schema::unsigned_int count_type;
      typedef ::xsd::cxx::tree::traits< count_type, char > count_traits;

      const count_type&
      count () const;

      count_type&
      count ();

      void
      count (const count_type& x);

      // Constructors.
      //
      Cores (const clients_type&,
             const count_type&);

      Cores (::std::auto_ptr< clients_type >&,
             const count_type&);

      Cores (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      Cores (const Cores& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      virtual Cores*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Cores ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< clients_type > clients_;
      ::xsd::cxx::tree::one< count_type > count_;
    };

    class ShmType: public ::xml_schema::string
    {
      public:
      enum value
      {
        posix,
        sysv
      };

      ShmType (value v);

      ShmType (const char* v);

      ShmType (const ::std::string& v);

      ShmType (const ::xml_schema::string& v);

      ShmType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      ShmType (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      ShmType (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      ShmType (const ShmType& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      virtual ShmType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ShmType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_ShmType_convert ();
      }

      protected:
      value
      _xsd_ShmType_convert () const;

      public:
      static const char* const _xsd_ShmType_literals_[2];
      static const value _xsd_ShmType_indexes_[2];
    };

    class Buffer: public ::xml_schema::type
    {
      public:
      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // size
      // 
      typedef ::xml_schema::unsigned_int size_type;
      typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

      const size_type&
      size () const;

      size_type&
      size ();

      void
      size (const size_type& x);

      // type
      // 
      typedef ::Damaris::Model::ShmType type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      type_type&
      type ();

      void
      type (const type_type& x);

      void
      type (::std::auto_ptr< type_type > p);

      static const type_type&
      type_default_value ();

      // blocks
      // 
      typedef ::xml_schema::unsigned_int blocks_type;
      typedef ::xsd::cxx::tree::traits< blocks_type, char > blocks_traits;

      const blocks_type&
      blocks () const;

      blocks_type&
      blocks ();

      void
      blocks (const blocks_type& x);

      static blocks_type
      blocks_default_value ();

      // Constructors.
      //
      Buffer (const name_type&,
              const size_type&);

      Buffer (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      Buffer (const Buffer& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual Buffer*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Buffer ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< size_type > size_;
      ::xsd::cxx::tree::one< type_type > type_;
      static const type_type type_default_value_;
      ::xsd::cxx::tree::one< blocks_type > blocks_;
    };

    class Queue: public ::xml_schema::type
    {
      public:
      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // size
      // 
      typedef ::xml_schema::unsigned_int size_type;
      typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

      const size_type&
      size () const;

      size_type&
      size ();

      void
      size (const size_type& x);

      // type
      // 
      typedef ::Damaris::Model::ShmType type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      type_type&
      type ();

      void
      type (const type_type& x);

      void
      type (::std::auto_ptr< type_type > p);

      static const type_type&
      type_default_value ();

      // Constructors.
      //
      Queue (const name_type&,
             const size_type&);

      Queue (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      Queue (const Queue& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      virtual Queue*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Queue ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< size_type > size_;
      ::xsd::cxx::tree::one< type_type > type_;
      static const type_type type_default_value_;
    };

    class Architecture: public ::xml_schema::type
    {
      public:
      // cores
      // 
      typedef ::Damaris::Model::Cores cores_type;
      typedef ::xsd::cxx::tree::traits< cores_type, char > cores_traits;

      const cores_type&
      cores () const;

      cores_type&
      cores ();

      void
      cores (const cores_type& x);

      void
      cores (::std::auto_ptr< cores_type > p);

      // buffer
      // 
      typedef ::Damaris::Model::Buffer buffer_type;
      typedef ::xsd::cxx::tree::traits< buffer_type, char > buffer_traits;

      const buffer_type&
      buffer () const;

      buffer_type&
      buffer ();

      void
      buffer (const buffer_type& x);

      void
      buffer (::std::auto_ptr< buffer_type > p);

      // queue
      // 
      typedef ::Damaris::Model::Queue queue_type;
      typedef ::xsd::cxx::tree::traits< queue_type, char > queue_traits;

      const queue_type&
      queue () const;

      queue_type&
      queue ();

      void
      queue (const queue_type& x);

      void
      queue (::std::auto_ptr< queue_type > p);

      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::optional< name_type > name_optional;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_optional&
      name () const;

      name_optional&
      name ();

      void
      name (const name_type& x);

      void
      name (const name_optional& x);

      void
      name (::std::auto_ptr< name_type > p);

      // Constructors.
      //
      Architecture (const cores_type&,
                    const buffer_type&,
                    const queue_type&);

      Architecture (::std::auto_ptr< cores_type >&,
                    ::std::auto_ptr< buffer_type >&,
                    ::std::auto_ptr< queue_type >&);

      Architecture (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      Architecture (const Architecture& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual Architecture*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Architecture ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< cores_type > cores_;
      ::xsd::cxx::tree::one< buffer_type > buffer_;
      ::xsd::cxx::tree::one< queue_type > queue_;
      name_optional name_;
    };

    class Language: public ::xml_schema::string
    {
      public:
      enum value
      {
        unknown,
        fortran,
        c,
        cpp,
        python
      };

      Language (value v);

      Language (const char* v);

      Language (const ::std::string& v);

      Language (const ::xml_schema::string& v);

      Language (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      Language (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      Language (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      Language (const Language& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual Language*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Language&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_Language_convert ();
      }

      protected:
      value
      _xsd_Language_convert () const;

      public:
      static const char* const _xsd_Language_literals_[5];
      static const value _xsd_Language_indexes_[5];
    };

    class Type: public ::xml_schema::string
    {
      public:
      enum value
      {
        short_,
        int_,
        integer,
        long_,
        float_,
        real,
        double_,
        char_,
        character,
        string,
        undefined
      };

      Type (value v);

      Type (const char* v);

      Type (const ::std::string& v);

      Type (const ::xml_schema::string& v);

      Type (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      Type (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      Type (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      Type (const Type& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      virtual Type*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Type&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_Type_convert ();
      }

      protected:
      value
      _xsd_Type_convert () const;

      public:
      static const char* const _xsd_Type_literals_[11];
      static const value _xsd_Type_indexes_[11];
    };

    class Layout: public ::xml_schema::string
    {
      public:
      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // type
      // 
      typedef ::Damaris::Model::Type type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      type_type&
      type ();

      void
      type (const type_type& x);

      void
      type (::std::auto_ptr< type_type > p);

      // dimensions
      // 
      typedef ::xml_schema::string dimensions_type;
      typedef ::xsd::cxx::tree::traits< dimensions_type, char > dimensions_traits;

      const dimensions_type&
      dimensions () const;

      dimensions_type&
      dimensions ();

      void
      dimensions (const dimensions_type& x);

      void
      dimensions (::std::auto_ptr< dimensions_type > p);

      // language
      // 
      typedef ::Damaris::Model::Language language_type;
      typedef ::xsd::cxx::tree::traits< language_type, char > language_traits;

      const language_type&
      language () const;

      language_type&
      language ();

      void
      language (const language_type& x);

      void
      language (::std::auto_ptr< language_type > p);

      static const language_type&
      language_default_value ();

      // visualizable
      // 
      typedef ::xml_schema::boolean visualizable_type;
      typedef ::xsd::cxx::tree::traits< visualizable_type, char > visualizable_traits;

      const visualizable_type&
      visualizable () const;

      visualizable_type&
      visualizable ();

      void
      visualizable (const visualizable_type& x);

      static visualizable_type
      visualizable_default_value ();

      // Constructors.
      //
      Layout (const name_type&,
              const type_type&,
              const dimensions_type&);

      Layout (const char*,
              const name_type&,
              const type_type&,
              const dimensions_type&);

      Layout (const ::std::string&,
              const name_type&,
              const type_type&,
              const dimensions_type&);

      Layout (const ::xml_schema::string&,
              const name_type&,
              const type_type&,
              const dimensions_type&);

      Layout (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      Layout (const Layout& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual Layout*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Layout ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< type_type > type_;
      ::xsd::cxx::tree::one< dimensions_type > dimensions_;
      ::xsd::cxx::tree::one< language_type > language_;
      static const language_type language_default_value_;
      ::xsd::cxx::tree::one< visualizable_type > visualizable_;
    };

    class VarType: public ::xml_schema::string
    {
      public:
      enum value
      {
        scalar,
        vector,
        tensor,
        symmetric_tensor,
        material,
        matspecies,
        label,
        array,
        mesh,
        curve
      };

      VarType (value v);

      VarType (const char* v);

      VarType (const ::std::string& v);

      VarType (const ::xml_schema::string& v);

      VarType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      VarType (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      VarType (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      VarType (const VarType& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      virtual VarType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      VarType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_VarType_convert ();
      }

      protected:
      value
      _xsd_VarType_convert () const;

      public:
      static const char* const _xsd_VarType_literals_[10];
      static const value _xsd_VarType_indexes_[10];
    };

    class VarCentering: public ::xml_schema::string
    {
      public:
      enum value
      {
        nodal,
        zonal
      };

      VarCentering (value v);

      VarCentering (const char* v);

      VarCentering (const ::std::string& v);

      VarCentering (const ::xml_schema::string& v);

      VarCentering (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      VarCentering (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      VarCentering (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      VarCentering (const VarCentering& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual VarCentering*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      VarCentering&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_VarCentering_convert ();
      }

      protected:
      value
      _xsd_VarCentering_convert () const;

      public:
      static const char* const _xsd_VarCentering_literals_[2];
      static const value _xsd_VarCentering_indexes_[2];
    };

    class Variable: public ::xml_schema::string
    {
      public:
      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // unit
      // 
      typedef ::xml_schema::string unit_type;
      typedef ::xsd::cxx::tree::traits< unit_type, char > unit_traits;

      const unit_type&
      unit () const;

      unit_type&
      unit ();

      void
      unit (const unit_type& x);

      void
      unit (::std::auto_ptr< unit_type > p);

      static const unit_type&
      unit_default_value ();

      // layout
      // 
      typedef ::xml_schema::string layout_type;
      typedef ::xsd::cxx::tree::traits< layout_type, char > layout_traits;

      const layout_type&
      layout () const;

      layout_type&
      layout ();

      void
      layout (const layout_type& x);

      void
      layout (::std::auto_ptr< layout_type > p);

      // enabled
      // 
      typedef ::xml_schema::boolean enabled_type;
      typedef ::xsd::cxx::tree::traits< enabled_type, char > enabled_traits;

      const enabled_type&
      enabled () const;

      enabled_type&
      enabled ();

      void
      enabled (const enabled_type& x);

      static enabled_type
      enabled_default_value ();

      // mesh
      // 
      typedef ::xml_schema::string mesh_type;
      typedef ::xsd::cxx::tree::traits< mesh_type, char > mesh_traits;

      const mesh_type&
      mesh () const;

      mesh_type&
      mesh ();

      void
      mesh (const mesh_type& x);

      void
      mesh (::std::auto_ptr< mesh_type > p);

      static const mesh_type&
      mesh_default_value ();

      // type
      // 
      typedef ::Damaris::Model::VarType type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      type_type&
      type ();

      void
      type (const type_type& x);

      void
      type (::std::auto_ptr< type_type > p);

      static const type_type&
      type_default_value ();

      // centering
      // 
      typedef ::Damaris::Model::VarCentering centering_type;
      typedef ::xsd::cxx::tree::traits< centering_type, char > centering_traits;

      const centering_type&
      centering () const;

      centering_type&
      centering ();

      void
      centering (const centering_type& x);

      void
      centering (::std::auto_ptr< centering_type > p);

      static const centering_type&
      centering_default_value ();

      // visualizable
      // 
      typedef ::xml_schema::boolean visualizable_type;
      typedef ::xsd::cxx::tree::traits< visualizable_type, char > visualizable_traits;

      const visualizable_type&
      visualizable () const;

      visualizable_type&
      visualizable ();

      void
      visualizable (const visualizable_type& x);

      static visualizable_type
      visualizable_default_value ();

      // Constructors.
      //
      Variable (const name_type&,
                const layout_type&);

      Variable (const char*,
                const name_type&,
                const layout_type&);

      Variable (const ::std::string&,
                const name_type&,
                const layout_type&);

      Variable (const ::xml_schema::string&,
                const name_type&,
                const layout_type&);

      Variable (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      Variable (const Variable& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual Variable*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Variable ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< unit_type > unit_;
      static const unit_type unit_default_value_;
      ::xsd::cxx::tree::one< layout_type > layout_;
      ::xsd::cxx::tree::one< enabled_type > enabled_;
      ::xsd::cxx::tree::one< mesh_type > mesh_;
      static const mesh_type mesh_default_value_;
      ::xsd::cxx::tree::one< type_type > type_;
      static const type_type type_default_value_;
      ::xsd::cxx::tree::one< centering_type > centering_;
      static const centering_type centering_default_value_;
      ::xsd::cxx::tree::one< visualizable_type > visualizable_;
    };

    class Group: public ::xml_schema::type
    {
      public:
      // variable
      // 
      typedef ::Damaris::Model::Variable variable_type;
      typedef ::xsd::cxx::tree::sequence< variable_type > variable_sequence;
      typedef variable_sequence::iterator variable_iterator;
      typedef variable_sequence::const_iterator variable_const_iterator;
      typedef ::xsd::cxx::tree::traits< variable_type, char > variable_traits;

      const variable_sequence&
      variable () const;

      variable_sequence&
      variable ();

      void
      variable (const variable_sequence& s);

      // group
      // 
      typedef ::Damaris::Model::Group group_type;
      typedef ::xsd::cxx::tree::sequence< group_type > group_sequence;
      typedef group_sequence::iterator group_iterator;
      typedef group_sequence::const_iterator group_const_iterator;
      typedef ::xsd::cxx::tree::traits< group_type, char > group_traits;

      const group_sequence&
      group () const;

      group_sequence&
      group ();

      void
      group (const group_sequence& s);

      // mesh
      // 
      typedef ::Damaris::Model::Mesh mesh_type;
      typedef ::xsd::cxx::tree::sequence< mesh_type > mesh_sequence;
      typedef mesh_sequence::iterator mesh_iterator;
      typedef mesh_sequence::const_iterator mesh_const_iterator;
      typedef ::xsd::cxx::tree::traits< mesh_type, char > mesh_traits;

      const mesh_sequence&
      mesh () const;

      mesh_sequence&
      mesh ();

      void
      mesh (const mesh_sequence& s);

      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // enabled
      // 
      typedef ::xml_schema::boolean enabled_type;
      typedef ::xsd::cxx::tree::traits< enabled_type, char > enabled_traits;

      const enabled_type&
      enabled () const;

      enabled_type&
      enabled ();

      void
      enabled (const enabled_type& x);

      static enabled_type
      enabled_default_value ();

      // Constructors.
      //
      Group (const name_type&);

      Group (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      Group (const Group& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      virtual Group*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Group ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      variable_sequence variable_;
      group_sequence group_;
      mesh_sequence mesh_;
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< enabled_type > enabled_;
    };

    class Parameter: public ::xml_schema::string
    {
      public:
      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // type
      // 
      typedef ::Damaris::Model::Type type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      type_type&
      type ();

      void
      type (const type_type& x);

      void
      type (::std::auto_ptr< type_type > p);

      // value
      // 
      typedef ::xml_schema::string value_type;
      typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

      const value_type&
      value () const;

      value_type&
      value ();

      void
      value (const value_type& x);

      void
      value (::std::auto_ptr< value_type > p);

      // Constructors.
      //
      Parameter (const name_type&,
                 const type_type&,
                 const value_type&);

      Parameter (const char*,
                 const name_type&,
                 const type_type&,
                 const value_type&);

      Parameter (const ::std::string&,
                 const name_type&,
                 const type_type&,
                 const value_type&);

      Parameter (const ::xml_schema::string&,
                 const name_type&,
                 const type_type&,
                 const value_type&);

      Parameter (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      Parameter (const Parameter& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual Parameter*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Parameter ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< type_type > type_;
      ::xsd::cxx::tree::one< value_type > value_;
    };

    class MeshType: public ::xml_schema::string
    {
      public:
      enum value
      {
        unknown,
        rectilinear,
        curvilinear,
        unstructured,
        point,
        csg,
        amr
      };

      MeshType (value v);

      MeshType (const char* v);

      MeshType (const ::std::string& v);

      MeshType (const ::xml_schema::string& v);

      MeshType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      MeshType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      MeshType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      MeshType (const MeshType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual MeshType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      MeshType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_MeshType_convert ();
      }

      protected:
      value
      _xsd_MeshType_convert () const;

      public:
      static const char* const _xsd_MeshType_literals_[7];
      static const value _xsd_MeshType_indexes_[7];
    };

    class MeshCoord: public ::xml_schema::type
    {
      public:
      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // unit
      // 
      typedef ::xml_schema::string unit_type;
      typedef ::xsd::cxx::tree::traits< unit_type, char > unit_traits;

      const unit_type&
      unit () const;

      unit_type&
      unit ();

      void
      unit (const unit_type& x);

      void
      unit (::std::auto_ptr< unit_type > p);

      static const unit_type&
      unit_default_value ();

      // label
      // 
      typedef ::xml_schema::string label_type;
      typedef ::xsd::cxx::tree::traits< label_type, char > label_traits;

      const label_type&
      label () const;

      label_type&
      label ();

      void
      label (const label_type& x);

      void
      label (::std::auto_ptr< label_type > p);

      static const label_type&
      label_default_value ();

      // Constructors.
      //
      MeshCoord (const name_type&);

      MeshCoord (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      MeshCoord (const MeshCoord& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual MeshCoord*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~MeshCoord ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< unit_type > unit_;
      static const unit_type unit_default_value_;
      ::xsd::cxx::tree::one< label_type > label_;
      static const label_type label_default_value_;
    };

    class Mesh: public ::xml_schema::type
    {
      public:
      // coords
      // 
      typedef ::Damaris::Model::MeshCoord coords_type;
      typedef ::xsd::cxx::tree::sequence< coords_type > coords_sequence;
      typedef coords_sequence::iterator coords_iterator;
      typedef coords_sequence::const_iterator coords_const_iterator;
      typedef ::xsd::cxx::tree::traits< coords_type, char > coords_traits;

      const coords_sequence&
      coords () const;

      coords_sequence&
      coords ();

      void
      coords (const coords_sequence& s);

      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // type
      // 
      typedef ::Damaris::Model::MeshType type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      type_type&
      type ();

      void
      type (const type_type& x);

      void
      type (::std::auto_ptr< type_type > p);

      // dimensions
      // 
      typedef ::xml_schema::unsigned_int dimensions_type;
      typedef ::xsd::cxx::tree::traits< dimensions_type, char > dimensions_traits;

      const dimensions_type&
      dimensions () const;

      dimensions_type&
      dimensions ();

      void
      dimensions (const dimensions_type& x);

      static dimensions_type
      dimensions_default_value ();

      // topology
      // 
      typedef ::xml_schema::unsigned_int topology_type;
      typedef ::xsd::cxx::tree::traits< topology_type, char > topology_traits;

      const topology_type&
      topology () const;

      topology_type&
      topology ();

      void
      topology (const topology_type& x);

      static topology_type
      topology_default_value ();

      // Constructors.
      //
      Mesh (const name_type&,
            const type_type&);

      Mesh (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      Mesh (const Mesh& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      virtual Mesh*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Mesh ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      coords_sequence coords_;
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< type_type > type_;
      ::xsd::cxx::tree::one< dimensions_type > dimensions_;
      ::xsd::cxx::tree::one< topology_type > topology_;
    };

    class Data: public ::xml_schema::type
    {
      public:
      // parameter
      // 
      typedef ::Damaris::Model::Parameter parameter_type;
      typedef ::xsd::cxx::tree::sequence< parameter_type > parameter_sequence;
      typedef parameter_sequence::iterator parameter_iterator;
      typedef parameter_sequence::const_iterator parameter_const_iterator;
      typedef ::xsd::cxx::tree::traits< parameter_type, char > parameter_traits;

      const parameter_sequence&
      parameter () const;

      parameter_sequence&
      parameter ();

      void
      parameter (const parameter_sequence& s);

      // layout
      // 
      typedef ::Damaris::Model::Layout layout_type;
      typedef ::xsd::cxx::tree::sequence< layout_type > layout_sequence;
      typedef layout_sequence::iterator layout_iterator;
      typedef layout_sequence::const_iterator layout_const_iterator;
      typedef ::xsd::cxx::tree::traits< layout_type, char > layout_traits;

      const layout_sequence&
      layout () const;

      layout_sequence&
      layout ();

      void
      layout (const layout_sequence& s);

      // variable
      // 
      typedef ::Damaris::Model::Variable variable_type;
      typedef ::xsd::cxx::tree::sequence< variable_type > variable_sequence;
      typedef variable_sequence::iterator variable_iterator;
      typedef variable_sequence::const_iterator variable_const_iterator;
      typedef ::xsd::cxx::tree::traits< variable_type, char > variable_traits;

      const variable_sequence&
      variable () const;

      variable_sequence&
      variable ();

      void
      variable (const variable_sequence& s);

      // group
      // 
      typedef ::Damaris::Model::Group group_type;
      typedef ::xsd::cxx::tree::sequence< group_type > group_sequence;
      typedef group_sequence::iterator group_iterator;
      typedef group_sequence::const_iterator group_const_iterator;
      typedef ::xsd::cxx::tree::traits< group_type, char > group_traits;

      const group_sequence&
      group () const;

      group_sequence&
      group ();

      void
      group (const group_sequence& s);

      // mesh
      // 
      typedef ::Damaris::Model::Mesh mesh_type;
      typedef ::xsd::cxx::tree::sequence< mesh_type > mesh_sequence;
      typedef mesh_sequence::iterator mesh_iterator;
      typedef mesh_sequence::const_iterator mesh_const_iterator;
      typedef ::xsd::cxx::tree::traits< mesh_type, char > mesh_traits;

      const mesh_sequence&
      mesh () const;

      mesh_sequence&
      mesh ();

      void
      mesh (const mesh_sequence& s);

      // Constructors.
      //
      Data ();

      Data (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      Data (const Data& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      virtual Data*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Data ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      parameter_sequence parameter_;
      layout_sequence layout_;
      variable_sequence variable_;
      group_sequence group_;
      mesh_sequence mesh_;
    };

    class Scope: public ::xml_schema::string
    {
      public:
      enum value
      {
        core,
        node,
        global
      };

      Scope (value v);

      Scope (const char* v);

      Scope (const ::std::string& v);

      Scope (const ::xml_schema::string& v);

      Scope (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      Scope (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      Scope (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      Scope (const Scope& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      virtual Scope*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      Scope&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_Scope_convert ();
      }

      protected:
      value
      _xsd_Scope_convert () const;

      public:
      static const char* const _xsd_Scope_literals_[3];
      static const value _xsd_Scope_indexes_[3];
    };

    class Event: public ::xml_schema::type
    {
      public:
      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // action
      // 
      typedef ::xml_schema::string action_type;
      typedef ::xsd::cxx::tree::traits< action_type, char > action_traits;

      const action_type&
      action () const;

      action_type&
      action ();

      void
      action (const action_type& x);

      void
      action (::std::auto_ptr< action_type > p);

      // library
      // 
      typedef ::xml_schema::string library_type;
      typedef ::xsd::cxx::tree::traits< library_type, char > library_traits;

      const library_type&
      library () const;

      library_type&
      library ();

      void
      library (const library_type& x);

      void
      library (::std::auto_ptr< library_type > p);

      static const library_type&
      library_default_value ();

      // scope
      // 
      typedef ::Damaris::Model::Scope scope_type;
      typedef ::xsd::cxx::tree::traits< scope_type, char > scope_traits;

      const scope_type&
      scope () const;

      scope_type&
      scope ();

      void
      scope (const scope_type& x);

      void
      scope (::std::auto_ptr< scope_type > p);

      static const scope_type&
      scope_default_value ();

      // external
      // 
      typedef ::xml_schema::boolean external_type;
      typedef ::xsd::cxx::tree::traits< external_type, char > external_traits;

      const external_type&
      external () const;

      external_type&
      external ();

      void
      external (const external_type& x);

      static external_type
      external_default_value ();

      // Constructors.
      //
      Event (const name_type&,
             const action_type&);

      Event (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      Event (const Event& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      virtual Event*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Event ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< action_type > action_;
      ::xsd::cxx::tree::one< library_type > library_;
      static const library_type library_default_value_;
      ::xsd::cxx::tree::one< scope_type > scope_;
      static const scope_type scope_default_value_;
      ::xsd::cxx::tree::one< external_type > external_;
    };

    class Script: public ::xml_schema::type
    {
      public:
      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // file
      // 
      typedef ::xml_schema::string file_type;
      typedef ::xsd::cxx::tree::traits< file_type, char > file_traits;

      const file_type&
      file () const;

      file_type&
      file ();

      void
      file (const file_type& x);

      void
      file (::std::auto_ptr< file_type > p);

      // language
      // 
      typedef ::xml_schema::string language_type;
      typedef ::xsd::cxx::tree::traits< language_type, char > language_traits;

      const language_type&
      language () const;

      language_type&
      language ();

      void
      language (const language_type& x);

      void
      language (::std::auto_ptr< language_type > p);

      // scope
      // 
      typedef ::Damaris::Model::Scope scope_type;
      typedef ::xsd::cxx::tree::traits< scope_type, char > scope_traits;

      const scope_type&
      scope () const;

      scope_type&
      scope ();

      void
      scope (const scope_type& x);

      void
      scope (::std::auto_ptr< scope_type > p);

      static const scope_type&
      scope_default_value ();

      // external
      // 
      typedef ::xml_schema::boolean external_type;
      typedef ::xsd::cxx::tree::traits< external_type, char > external_traits;

      const external_type&
      external () const;

      external_type&
      external ();

      void
      external (const external_type& x);

      static external_type
      external_default_value ();

      // Constructors.
      //
      Script (const name_type&,
              const file_type&,
              const language_type&);

      Script (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      Script (const Script& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual Script*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Script ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< file_type > file_;
      ::xsd::cxx::tree::one< language_type > language_;
      ::xsd::cxx::tree::one< scope_type > scope_;
      static const scope_type scope_default_value_;
      ::xsd::cxx::tree::one< external_type > external_;
    };

    class Actions: public ::xml_schema::type
    {
      public:
      // event
      // 
      typedef ::Damaris::Model::Event event_type;
      typedef ::xsd::cxx::tree::sequence< event_type > event_sequence;
      typedef event_sequence::iterator event_iterator;
      typedef event_sequence::const_iterator event_const_iterator;
      typedef ::xsd::cxx::tree::traits< event_type, char > event_traits;

      const event_sequence&
      event () const;

      event_sequence&
      event ();

      void
      event (const event_sequence& s);

      // script
      // 
      typedef ::Damaris::Model::Script script_type;
      typedef ::xsd::cxx::tree::sequence< script_type > script_sequence;
      typedef script_sequence::iterator script_iterator;
      typedef script_sequence::const_iterator script_const_iterator;
      typedef ::xsd::cxx::tree::traits< script_type, char > script_traits;

      const script_sequence&
      script () const;

      script_sequence&
      script ();

      void
      script (const script_sequence& s);

      // Constructors.
      //
      Actions ();

      Actions (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      Actions (const Actions& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      virtual Actions*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Actions ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      event_sequence event_;
      script_sequence script_;
    };

    class Simulation: public ::xml_schema::type
    {
      public:
      // architecture
      // 
      typedef ::Damaris::Model::Architecture architecture_type;
      typedef ::xsd::cxx::tree::traits< architecture_type, char > architecture_traits;

      const architecture_type&
      architecture () const;

      architecture_type&
      architecture ();

      void
      architecture (const architecture_type& x);

      void
      architecture (::std::auto_ptr< architecture_type > p);

      // data
      // 
      typedef ::Damaris::Model::Data data_type;
      typedef ::xsd::cxx::tree::traits< data_type, char > data_traits;

      const data_type&
      data () const;

      data_type&
      data ();

      void
      data (const data_type& x);

      void
      data (::std::auto_ptr< data_type > p);

      // actions
      // 
      typedef ::Damaris::Model::Actions actions_type;
      typedef ::xsd::cxx::tree::traits< actions_type, char > actions_traits;

      const actions_type&
      actions () const;

      actions_type&
      actions ();

      void
      actions (const actions_type& x);

      void
      actions (::std::auto_ptr< actions_type > p);

      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // language
      // 
      typedef ::Damaris::Model::Language language_type;
      typedef ::xsd::cxx::tree::traits< language_type, char > language_traits;

      const language_type&
      language () const;

      language_type&
      language ();

      void
      language (const language_type& x);

      void
      language (::std::auto_ptr< language_type > p);

      static const language_type&
      language_default_value ();

      // Constructors.
      //
      Simulation (const architecture_type&,
                  const data_type&,
                  const actions_type&,
                  const name_type&);

      Simulation (::std::auto_ptr< architecture_type >&,
                  ::std::auto_ptr< data_type >&,
                  ::std::auto_ptr< actions_type >&,
                  const name_type&);

      Simulation (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      Simulation (const Simulation& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual Simulation*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Simulation ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< architecture_type > architecture_;
      ::xsd::cxx::tree::one< data_type > data_;
      ::xsd::cxx::tree::one< actions_type > actions_;
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< language_type > language_;
      static const language_type language_default_value_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace Damaris
{
  namespace Model
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::Damaris::Model::Simulation >
    simulation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MODEL_HPP
