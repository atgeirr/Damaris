cmake_minimum_required (VERSION 2.8)

#-----------------------------------------------------------#
# Enabling Fortran
#-----------------------------------------------------------#
enable_language (Fortran OPTIONAL)

#-----------------------------------------------------------#
# Force MPI compilers
#   starting from Damaris 0.4, MPI compiler is mandatory
#-----------------------------------------------------------#
include(CMakeForceCompiler)
CMAKE_FORCE_CXX_COMPILER(mpicxx "MPI C++ Compiler")
CMAKE_FORCE_C_COMPILER(mpicc "MPI C Compiler")
#CMAKE_FORCE_FORTRAN_COMPILER(mpif90 "Fortran Compiler")

#-----------------------------------------------------------#
# Starting project definition
#-----------------------------------------------------------#
project(DAMARIS)

#-----------------------------------------------------------#
# EXTERNAL_ROOT is a variable set once and for all to
# indicate where are all the required libraries. By default
# CMake will look for libraries in this directory.
#-----------------------------------------------------------#
set(EXTERNAL_ROOT ~/deploy)

#-----------------------------------------------------------#
add_definitions (-g -O2 -Wall -rdynamic)
#add_definitions (-Wextra) # for development only
#-----------------------------------------------------------#

#-----------------------------------------------------------#
# Some variables to set the level of debugging informations.
# Recommanded : -D__INFO
#-----------------------------------------------------------#
add_definitions (-D__INFO)
#add_definitions (-D__TRACE)
#add_definitions (-D__DEBUG_ALL)
add_definitions (-D__BENCHMARK)

#-----------------------------------------------------------#
# Check if we are on BlueGene/P
# uncomment the following line (set(BGP)) if you run on BGP.
#-----------------------------------------------------------#
#set(BGP "yes")
if(BGP)
  set(BGP_FLOOR "/bgsys/drivers/ppcfloor")
  include_directories(${BGP_FLOOR}/arch/include)
  add_definitions(-DBGP)
endif(BGP)

#-----------------------------------------------------------#
# Set the location of CMake Modules
#-----------------------------------------------------------#
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} 
		"${DAMARIS_SOURCE_DIR}/cmake/Modules/")

#-----------------------------------------------------------#
include_directories(${DAMARIS_SOURCE_DIR})
include_directories(${DAMARIS_SOURCE_DIR}/include)

#-----------------------------------------------------------#
# Set everything related to the Boost libraries
#-----------------------------------------------------------#
set(BOOST_ROOT ${EXTERNAL_ROOT})
find_package(Boost REQUIRED)
find_package(Boost 1.51.0 COMPONENTS filesystem system program_options)
include_directories(${Boost_INCLUDE_DIRS})

#-----------------------------------------------------------#
# Set everything related to the XSD libraries
#   (actually only include directory required)
#-----------------------------------------------------------#
set(XSD_ROOT ${EXTERNAL_ROOT})
set(XSD_INCLUDE_DIR "${XSD_ROOT}/include")
include_directories(${XSD_INCLUDE_DIR})

#-----------------------------------------------------------#
# Set everything related to the Xerces-C library
#-----------------------------------------------------------#
set(XERCESC_ROOT ${EXTERNAL_ROOT})
find_package(XercesC REQUIRED)
include_directories(${XERCESC_INCLUDE_DIR})

#-----------------------------------------------------------#
# Set everything related to Python
#-----------------------------------------------------------#
set(PYTHON_ROOT ${EXTERNAL_ROOT})
set(NUMPY_INCLUDE_DIR 
	${EXTERNAL_ROOT}/lib/python2.6/site-packages/numpy/core/include)
find_package(PythonLibs)
if (PYTHONLIBS_FOUND)
  find_package(Boost 1.51.0 QUIET COMPONENTS python)
  if (Boost_PYTHON_LIBRARY)
	message(STATUS "Building Python support. Python lib: ${Boost_PYTHON_LIBRARY}")
	message(STATUS "Python include: ${PYTHON_INCLUDE_PATH}")
    	if (NUMPY_INCLUDE_DIR)
		include_directories(${PYTHON_INCLUDE_DIRS})
		include_directories(${NUMPY_INCLUDE_DIR})
		add_definitions(-D__ENABLE_PYTHON)
    	endif (NUMPY_INCLUDE_DIR)
  else (Boost_PYTHON_LIBRARY)
    message(STATUS "Boost Python not found. Python support will not be built.")
  endif (Boost_PYTHON_LIBRARY)
else (PYTHONLIBS_FOUND)
  message(STATUS "Python headers not found. Python support will not be built.")
endif (PYTHONLIBS_FOUND)

#-----------------------------------------------------------#
# Set everything related to the HDF5 library 
# Just comment the first line if you don't want HDF5 support
#-----------------------------------------------------------#
#set(HDF5_ROOT ${EXTERNAL_ROOT})
set(HDF5_LIBRARY_DIR "${HDF5_ROOT}/lib")
set(HDF5_INCLUDE_DIR "${HDF5_ROOT}/include")
set(HDF5_LIB hdf5)
if(HDF5_ROOT)
  include_directories(${HDF5_INCLUDE_DIR})
  link_directories(${HDF5_LIBRARY_DIR})
  add_definitions(-D__ENABLE_HDF5)
endif(HDF5_ROOT)

#-----------------------------------------------------------#
# Set everything related to VisIt 
#-----------------------------------------------------------#
set(VISIT_ROOT "~/Work/Visu3/visit2.5.2/src")
if(VISIT_ROOT)
  set(VISIT_INCLUDE_DIR "${VISIT_ROOT}/sim/V2/lib")
  set(VISIT_LIBRARY_DIR "${VISIT_ROOT}/lib")
  include_directories(${VISIT_INCLUDE_DIR})
  link_directories(${VISIT_LIBRARY_DIR})
  add_definitions(-D__ENABLE_VISIT)
  set(VISIT_LIB simV2)
endif(VISIT_ROOT)
#-----------------------------------------------------------#
# Set everything related to Fortran
#-----------------------------------------------------------#
if(CMAKE_Fortran_COMPILER)
  include(FortranCInterface)
  FortranCInterface_HEADER(${DAMARIS_SOURCE_DIR}/core/FCMangle.h
			   MACRO_NAMESPACE "FC_FUNC_"
                           SYMBOL_NAMESPACE "FC_SYM_")
  add_definitions(-D__ENABLE_FORTRAN)
  message(STATUS "Fortran binding will be enabled, compiler is ${CMAKE_Fortran_COMPILER}")
else(CMAKE_Fortran_COMPILER)
  message(STATUS "Fortran binding will not be build")
endif(CMAKE_Fortran_COMPILER)

#-----------------------------------------------------------#
# Add the proper subdirectories
#-----------------------------------------------------------#
add_subdirectory (client)
add_subdirectory (server)
add_subdirectory (test)
add_subdirectory (examples)

if(VISIT_ROOT)
  add_subdirectory (visit/test)
endif(VISIT_ROOT)
